// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('Unknown runtime environment. Where are we?');
}

if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var functionPointers = new Array(0);

function addFunction(func) {
  for (var i = 0; i < functionPointers.length; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return 2*(1 + i);
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[(index-2)/2] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 33920;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
          var buf = Buffer.from ? Buffer.from(buffer.buffer) : new Buffer(buffer.buffer);
          try {
            return fs.readSync(stream.nfd, buf, offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
          var buf = Buffer.from ? Buffer.from(buffer.buffer) : new Buffer(buffer.buffer);
          try {
            return fs.writeSync(stream.nfd, buf, offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

   

   

   

   

   

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _ed25519_create_keypair($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = (_randombytes($5,32)|0);
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $3;
  $9 = $4;
  _ed25519_derive_public_key($8,$9);
  $2 = 1;
 } else {
  $2 = 0;
 }
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _ed25519_derive_public_key($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $4 = sp + 168|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 (_sha512($4,$6,32,0)|0);
 $7 = HEAP8[$4>>0]|0;
 $8 = $7&255;
 $9 = $8 & 248;
 $10 = $9&255;
 HEAP8[$4>>0] = $10;
 $11 = ((($4)) + 31|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 & 63;
 $15 = $14&255;
 HEAP8[$11>>0] = $15;
 $16 = ((($4)) + 31|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 | 64;
 $20 = $19&255;
 HEAP8[$16>>0] = $20;
 _crypto_sign_ed25519_ref10_ge_scalarmult_base($5,$4);
 $21 = $3;
 _crypto_sign_ed25519_ref10_ge_p3_tobytes($21,$5);
 STACKTOP = sp;return;
}
function _ed25519_sign($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $8 = sp;
 $12 = sp + 320|0;
 $13 = sp + 256|0;
 $14 = sp + 192|0;
 $15 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $16 = $8;
 $17 = $16;
 HEAP32[$17>>2] = $2;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $3;
 $9 = $3;
 $10 = $4;
 $20 = HEAP32[8000]|0;
 $21 = (_llvm_stacksave()|0);
 $11 = $21;
 $$alloca_mul = $20;
 $22 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 (_sha512_init($22)|0);
 $23 = $10;
 (_sha512_update($22,$23,32,0)|0);
 (_sha512_final($22,$12)|0);
 $24 = HEAP8[$12>>0]|0;
 $25 = $24&255;
 $26 = $25 & 248;
 $27 = $26&255;
 HEAP8[$12>>0] = $27;
 $28 = ((($12)) + 31|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 & 63;
 $32 = $31&255;
 HEAP8[$28>>0] = $32;
 $33 = ((($12)) + 31|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 | 64;
 $37 = $36&255;
 HEAP8[$33>>0] = $37;
 (_sha512_init($22)|0);
 $38 = ((($12)) + 32|0);
 (_sha512_update($22,$38,32,0)|0);
 $39 = $7;
 $40 = $8;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4)|0;
 $44 = $43;
 $45 = HEAP32[$44>>2]|0;
 (_sha512_update($22,$39,$42,$45)|0);
 (_sha512_final($22,$13)|0);
 _crypto_sign_ed25519_ref10_sc_reduce($13);
 _crypto_sign_ed25519_ref10_ge_scalarmult_base($15,$13);
 $46 = $6;
 _crypto_sign_ed25519_ref10_ge_p3_tobytes($46,$15);
 (_sha512_init($22)|0);
 $47 = $6;
 (_sha512_update($22,$47,32,0)|0);
 $48 = $9;
 (_sha512_update($22,$48,32,0)|0);
 $49 = $7;
 $50 = $8;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 (_sha512_update($22,$49,$52,$55)|0);
 (_sha512_final($22,$14)|0);
 _crypto_sign_ed25519_ref10_sc_reduce($14);
 $56 = $6;
 $57 = ((($56)) + 32|0);
 _crypto_sign_ed25519_ref10_sc_muladd($57,$14,$12,$13);
 $58 = $11;
 _llvm_stackrestore(($58|0));
 STACKTOP = sp;return;
}
function _ed25519_verify($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(480|0);
 $8 = sp;
 $11 = sp + 448|0;
 $12 = sp + 416|0;
 $13 = sp + 352|0;
 $14 = sp + 320|0;
 $15 = sp + 136|0;
 $16 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $18 = $8;
 $19 = $18;
 HEAP32[$19>>2] = $2;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = $3;
 $9 = $3;
 $22 = HEAP32[8000]|0;
 $23 = (_llvm_stacksave()|0);
 $10 = $23;
 $$alloca_mul = $22;
 $24 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $25 = $6;
 $26 = ((($25)) + 63|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 & 224;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  $31 = $9;
  $32 = (_crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime($15,$31)|0);
  $33 = ($32|0)!=(0);
  if (!($33)) {
   $34 = $9;
   dest=$11; src=$34; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $35 = $6;
   dest=$12; src=$35; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   (_sha512_init($24)|0);
   $36 = $6;
   (_sha512_update($24,$36,32,0)|0);
   $37 = $9;
   (_sha512_update($24,$37,32,0)|0);
   $38 = $7;
   $39 = $8;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   (_sha512_update($24,$38,$41,$44)|0);
   (_sha512_final($24,$13)|0);
   _crypto_sign_ed25519_ref10_sc_reduce($13);
   $45 = $6;
   $46 = ((($45)) + 32|0);
   _crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime($16,$13,$15,$46);
   _crypto_sign_ed25519_ref10_ge_tobytes($14,$16);
   $47 = (_crypto_verify_32($12,$14)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $5 = 1;
    $17 = 1;
    $49 = $10;
    _llvm_stackrestore(($49|0));
    $50 = $5;
    STACKTOP = sp;return ($50|0);
   }
  }
 }
 $5 = 0;
 $17 = 1;
 $49 = $10;
 _llvm_stackrestore(($49|0));
 $50 = $5;
 STACKTOP = sp;return ($50|0);
}
function _crypto_verify_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $3;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 ^ $10;
 $12 = $4;
 $13 = $12 | $11;
 $4 = $13;
 $14 = $2;
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $3;
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $17 ^ $21;
 $23 = $4;
 $24 = $23 | $22;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 2|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $3;
 $30 = ((($29)) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $28 ^ $32;
 $34 = $4;
 $35 = $34 | $33;
 $4 = $35;
 $36 = $2;
 $37 = ((($36)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $3;
 $41 = ((($40)) + 3|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $39 ^ $43;
 $45 = $4;
 $46 = $45 | $44;
 $4 = $46;
 $47 = $2;
 $48 = ((($47)) + 4|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = $3;
 $52 = ((($51)) + 4|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $50 ^ $54;
 $56 = $4;
 $57 = $56 | $55;
 $4 = $57;
 $58 = $2;
 $59 = ((($58)) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $3;
 $63 = ((($62)) + 5|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $61 ^ $65;
 $67 = $4;
 $68 = $67 | $66;
 $4 = $68;
 $69 = $2;
 $70 = ((($69)) + 6|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $3;
 $74 = ((($73)) + 6|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $72 ^ $76;
 $78 = $4;
 $79 = $78 | $77;
 $4 = $79;
 $80 = $2;
 $81 = ((($80)) + 7|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $3;
 $85 = ((($84)) + 7|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = $83 ^ $87;
 $89 = $4;
 $90 = $89 | $88;
 $4 = $90;
 $91 = $2;
 $92 = ((($91)) + 8|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $3;
 $96 = ((($95)) + 8|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $94 ^ $98;
 $100 = $4;
 $101 = $100 | $99;
 $4 = $101;
 $102 = $2;
 $103 = ((($102)) + 9|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = $3;
 $107 = ((($106)) + 9|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = $105 ^ $109;
 $111 = $4;
 $112 = $111 | $110;
 $4 = $112;
 $113 = $2;
 $114 = ((($113)) + 10|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = $3;
 $118 = ((($117)) + 10|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $116 ^ $120;
 $122 = $4;
 $123 = $122 | $121;
 $4 = $123;
 $124 = $2;
 $125 = ((($124)) + 11|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $3;
 $129 = ((($128)) + 11|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = $127 ^ $131;
 $133 = $4;
 $134 = $133 | $132;
 $4 = $134;
 $135 = $2;
 $136 = ((($135)) + 12|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&255;
 $139 = $3;
 $140 = ((($139)) + 12|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = $141&255;
 $143 = $138 ^ $142;
 $144 = $4;
 $145 = $144 | $143;
 $4 = $145;
 $146 = $2;
 $147 = ((($146)) + 13|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = $3;
 $151 = ((($150)) + 13|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152&255;
 $154 = $149 ^ $153;
 $155 = $4;
 $156 = $155 | $154;
 $4 = $156;
 $157 = $2;
 $158 = ((($157)) + 14|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159&255;
 $161 = $3;
 $162 = ((($161)) + 14|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 $165 = $160 ^ $164;
 $166 = $4;
 $167 = $166 | $165;
 $4 = $167;
 $168 = $2;
 $169 = ((($168)) + 15|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&255;
 $172 = $3;
 $173 = ((($172)) + 15|0);
 $174 = HEAP8[$173>>0]|0;
 $175 = $174&255;
 $176 = $171 ^ $175;
 $177 = $4;
 $178 = $177 | $176;
 $4 = $178;
 $179 = $2;
 $180 = ((($179)) + 16|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = $181&255;
 $183 = $3;
 $184 = ((($183)) + 16|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&255;
 $187 = $182 ^ $186;
 $188 = $4;
 $189 = $188 | $187;
 $4 = $189;
 $190 = $2;
 $191 = ((($190)) + 17|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = $3;
 $195 = ((($194)) + 17|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = $196&255;
 $198 = $193 ^ $197;
 $199 = $4;
 $200 = $199 | $198;
 $4 = $200;
 $201 = $2;
 $202 = ((($201)) + 18|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = $3;
 $206 = ((($205)) + 18|0);
 $207 = HEAP8[$206>>0]|0;
 $208 = $207&255;
 $209 = $204 ^ $208;
 $210 = $4;
 $211 = $210 | $209;
 $4 = $211;
 $212 = $2;
 $213 = ((($212)) + 19|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = $214&255;
 $216 = $3;
 $217 = ((($216)) + 19|0);
 $218 = HEAP8[$217>>0]|0;
 $219 = $218&255;
 $220 = $215 ^ $219;
 $221 = $4;
 $222 = $221 | $220;
 $4 = $222;
 $223 = $2;
 $224 = ((($223)) + 20|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $3;
 $228 = ((($227)) + 20|0);
 $229 = HEAP8[$228>>0]|0;
 $230 = $229&255;
 $231 = $226 ^ $230;
 $232 = $4;
 $233 = $232 | $231;
 $4 = $233;
 $234 = $2;
 $235 = ((($234)) + 21|0);
 $236 = HEAP8[$235>>0]|0;
 $237 = $236&255;
 $238 = $3;
 $239 = ((($238)) + 21|0);
 $240 = HEAP8[$239>>0]|0;
 $241 = $240&255;
 $242 = $237 ^ $241;
 $243 = $4;
 $244 = $243 | $242;
 $4 = $244;
 $245 = $2;
 $246 = ((($245)) + 22|0);
 $247 = HEAP8[$246>>0]|0;
 $248 = $247&255;
 $249 = $3;
 $250 = ((($249)) + 22|0);
 $251 = HEAP8[$250>>0]|0;
 $252 = $251&255;
 $253 = $248 ^ $252;
 $254 = $4;
 $255 = $254 | $253;
 $4 = $255;
 $256 = $2;
 $257 = ((($256)) + 23|0);
 $258 = HEAP8[$257>>0]|0;
 $259 = $258&255;
 $260 = $3;
 $261 = ((($260)) + 23|0);
 $262 = HEAP8[$261>>0]|0;
 $263 = $262&255;
 $264 = $259 ^ $263;
 $265 = $4;
 $266 = $265 | $264;
 $4 = $266;
 $267 = $2;
 $268 = ((($267)) + 24|0);
 $269 = HEAP8[$268>>0]|0;
 $270 = $269&255;
 $271 = $3;
 $272 = ((($271)) + 24|0);
 $273 = HEAP8[$272>>0]|0;
 $274 = $273&255;
 $275 = $270 ^ $274;
 $276 = $4;
 $277 = $276 | $275;
 $4 = $277;
 $278 = $2;
 $279 = ((($278)) + 25|0);
 $280 = HEAP8[$279>>0]|0;
 $281 = $280&255;
 $282 = $3;
 $283 = ((($282)) + 25|0);
 $284 = HEAP8[$283>>0]|0;
 $285 = $284&255;
 $286 = $281 ^ $285;
 $287 = $4;
 $288 = $287 | $286;
 $4 = $288;
 $289 = $2;
 $290 = ((($289)) + 26|0);
 $291 = HEAP8[$290>>0]|0;
 $292 = $291&255;
 $293 = $3;
 $294 = ((($293)) + 26|0);
 $295 = HEAP8[$294>>0]|0;
 $296 = $295&255;
 $297 = $292 ^ $296;
 $298 = $4;
 $299 = $298 | $297;
 $4 = $299;
 $300 = $2;
 $301 = ((($300)) + 27|0);
 $302 = HEAP8[$301>>0]|0;
 $303 = $302&255;
 $304 = $3;
 $305 = ((($304)) + 27|0);
 $306 = HEAP8[$305>>0]|0;
 $307 = $306&255;
 $308 = $303 ^ $307;
 $309 = $4;
 $310 = $309 | $308;
 $4 = $310;
 $311 = $2;
 $312 = ((($311)) + 28|0);
 $313 = HEAP8[$312>>0]|0;
 $314 = $313&255;
 $315 = $3;
 $316 = ((($315)) + 28|0);
 $317 = HEAP8[$316>>0]|0;
 $318 = $317&255;
 $319 = $314 ^ $318;
 $320 = $4;
 $321 = $320 | $319;
 $4 = $321;
 $322 = $2;
 $323 = ((($322)) + 29|0);
 $324 = HEAP8[$323>>0]|0;
 $325 = $324&255;
 $326 = $3;
 $327 = ((($326)) + 29|0);
 $328 = HEAP8[$327>>0]|0;
 $329 = $328&255;
 $330 = $325 ^ $329;
 $331 = $4;
 $332 = $331 | $330;
 $4 = $332;
 $333 = $2;
 $334 = ((($333)) + 30|0);
 $335 = HEAP8[$334>>0]|0;
 $336 = $335&255;
 $337 = $3;
 $338 = ((($337)) + 30|0);
 $339 = HEAP8[$338>>0]|0;
 $340 = $339&255;
 $341 = $336 ^ $340;
 $342 = $4;
 $343 = $342 | $341;
 $4 = $343;
 $344 = $2;
 $345 = ((($344)) + 31|0);
 $346 = HEAP8[$345>>0]|0;
 $347 = $346&255;
 $348 = $3;
 $349 = ((($348)) + 31|0);
 $350 = HEAP8[$349>>0]|0;
 $351 = $350&255;
 $352 = $347 ^ $351;
 $353 = $4;
 $354 = $353 | $352;
 $4 = $354;
 $355 = $4;
 $356 = (($355) - 1)|0;
 $357 = $356 >>> 8;
 $358 = 1 & $357;
 $359 = (($358) - 1)|0;
 STACKTOP = sp;return ($359|0);
}
function _crypto_sign_ed25519_ref10_fe_0($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 36|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 36|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $4;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $8 = $43;
 $44 = $4;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $47 = $4;
 $48 = ((($47)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $10 = $49;
 $50 = $4;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $53 = $4;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $4;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $13 = $58;
 $59 = $4;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $14 = $61;
 $62 = $4;
 $63 = ((($62)) + 36|0);
 $64 = HEAP32[$63>>2]|0;
 $15 = $64;
 $65 = $5;
 $66 = HEAP32[$65>>2]|0;
 $16 = $66;
 $67 = $5;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $17 = $69;
 $70 = $5;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $18 = $72;
 $73 = $5;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $19 = $75;
 $76 = $5;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $20 = $78;
 $79 = $5;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $21 = $81;
 $82 = $5;
 $83 = ((($82)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $22 = $84;
 $85 = $5;
 $86 = ((($85)) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $23 = $87;
 $88 = $5;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $24 = $90;
 $91 = $5;
 $92 = ((($91)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $25 = $93;
 $94 = $6;
 $95 = $16;
 $96 = (($94) + ($95))|0;
 $26 = $96;
 $97 = $7;
 $98 = $17;
 $99 = (($97) + ($98))|0;
 $27 = $99;
 $100 = $8;
 $101 = $18;
 $102 = (($100) + ($101))|0;
 $28 = $102;
 $103 = $9;
 $104 = $19;
 $105 = (($103) + ($104))|0;
 $29 = $105;
 $106 = $10;
 $107 = $20;
 $108 = (($106) + ($107))|0;
 $30 = $108;
 $109 = $11;
 $110 = $21;
 $111 = (($109) + ($110))|0;
 $31 = $111;
 $112 = $12;
 $113 = $22;
 $114 = (($112) + ($113))|0;
 $32 = $114;
 $115 = $13;
 $116 = $23;
 $117 = (($115) + ($116))|0;
 $33 = $117;
 $118 = $14;
 $119 = $24;
 $120 = (($118) + ($119))|0;
 $34 = $120;
 $121 = $15;
 $122 = $25;
 $123 = (($121) + ($122))|0;
 $35 = $123;
 $124 = $26;
 $125 = $3;
 HEAP32[$125>>2] = $124;
 $126 = $27;
 $127 = $3;
 $128 = ((($127)) + 4|0);
 HEAP32[$128>>2] = $126;
 $129 = $28;
 $130 = $3;
 $131 = ((($130)) + 8|0);
 HEAP32[$131>>2] = $129;
 $132 = $29;
 $133 = $3;
 $134 = ((($133)) + 12|0);
 HEAP32[$134>>2] = $132;
 $135 = $30;
 $136 = $3;
 $137 = ((($136)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = $31;
 $139 = $3;
 $140 = ((($139)) + 20|0);
 HEAP32[$140>>2] = $138;
 $141 = $32;
 $142 = $3;
 $143 = ((($142)) + 24|0);
 HEAP32[$143>>2] = $141;
 $144 = $33;
 $145 = $3;
 $146 = ((($145)) + 28|0);
 HEAP32[$146>>2] = $144;
 $147 = $34;
 $148 = $3;
 $149 = ((($148)) + 32|0);
 HEAP32[$149>>2] = $147;
 $150 = $35;
 $151 = $3;
 $152 = ((($151)) + 36|0);
 HEAP32[$152>>2] = $150;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $3;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $3;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $8 = $43;
 $44 = $3;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $47 = $3;
 $48 = ((($47)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $10 = $49;
 $50 = $3;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $53 = $3;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $3;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $13 = $58;
 $59 = $3;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $14 = $61;
 $62 = $3;
 $63 = ((($62)) + 36|0);
 $64 = HEAP32[$63>>2]|0;
 $15 = $64;
 $65 = $4;
 $66 = HEAP32[$65>>2]|0;
 $16 = $66;
 $67 = $4;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $17 = $69;
 $70 = $4;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $18 = $72;
 $73 = $4;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $19 = $75;
 $76 = $4;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $20 = $78;
 $79 = $4;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $21 = $81;
 $82 = $4;
 $83 = ((($82)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $22 = $84;
 $85 = $4;
 $86 = ((($85)) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $23 = $87;
 $88 = $4;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $24 = $90;
 $91 = $4;
 $92 = ((($91)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $25 = $93;
 $94 = $6;
 $95 = $16;
 $96 = $94 ^ $95;
 $26 = $96;
 $97 = $7;
 $98 = $17;
 $99 = $97 ^ $98;
 $27 = $99;
 $100 = $8;
 $101 = $18;
 $102 = $100 ^ $101;
 $28 = $102;
 $103 = $9;
 $104 = $19;
 $105 = $103 ^ $104;
 $29 = $105;
 $106 = $10;
 $107 = $20;
 $108 = $106 ^ $107;
 $30 = $108;
 $109 = $11;
 $110 = $21;
 $111 = $109 ^ $110;
 $31 = $111;
 $112 = $12;
 $113 = $22;
 $114 = $112 ^ $113;
 $32 = $114;
 $115 = $13;
 $116 = $23;
 $117 = $115 ^ $116;
 $33 = $117;
 $118 = $14;
 $119 = $24;
 $120 = $118 ^ $119;
 $34 = $120;
 $121 = $15;
 $122 = $25;
 $123 = $121 ^ $122;
 $35 = $123;
 $124 = $5;
 $125 = (0 - ($124))|0;
 $5 = $125;
 $126 = $5;
 $127 = $26;
 $128 = $127 & $126;
 $26 = $128;
 $129 = $5;
 $130 = $27;
 $131 = $130 & $129;
 $27 = $131;
 $132 = $5;
 $133 = $28;
 $134 = $133 & $132;
 $28 = $134;
 $135 = $5;
 $136 = $29;
 $137 = $136 & $135;
 $29 = $137;
 $138 = $5;
 $139 = $30;
 $140 = $139 & $138;
 $30 = $140;
 $141 = $5;
 $142 = $31;
 $143 = $142 & $141;
 $31 = $143;
 $144 = $5;
 $145 = $32;
 $146 = $145 & $144;
 $32 = $146;
 $147 = $5;
 $148 = $33;
 $149 = $148 & $147;
 $33 = $149;
 $150 = $5;
 $151 = $34;
 $152 = $151 & $150;
 $34 = $152;
 $153 = $5;
 $154 = $35;
 $155 = $154 & $153;
 $35 = $155;
 $156 = $6;
 $157 = $26;
 $158 = $156 ^ $157;
 $159 = $3;
 HEAP32[$159>>2] = $158;
 $160 = $7;
 $161 = $27;
 $162 = $160 ^ $161;
 $163 = $3;
 $164 = ((($163)) + 4|0);
 HEAP32[$164>>2] = $162;
 $165 = $8;
 $166 = $28;
 $167 = $165 ^ $166;
 $168 = $3;
 $169 = ((($168)) + 8|0);
 HEAP32[$169>>2] = $167;
 $170 = $9;
 $171 = $29;
 $172 = $170 ^ $171;
 $173 = $3;
 $174 = ((($173)) + 12|0);
 HEAP32[$174>>2] = $172;
 $175 = $10;
 $176 = $30;
 $177 = $175 ^ $176;
 $178 = $3;
 $179 = ((($178)) + 16|0);
 HEAP32[$179>>2] = $177;
 $180 = $11;
 $181 = $31;
 $182 = $180 ^ $181;
 $183 = $3;
 $184 = ((($183)) + 20|0);
 HEAP32[$184>>2] = $182;
 $185 = $12;
 $186 = $32;
 $187 = $185 ^ $186;
 $188 = $3;
 $189 = ((($188)) + 24|0);
 HEAP32[$189>>2] = $187;
 $190 = $13;
 $191 = $33;
 $192 = $190 ^ $191;
 $193 = $3;
 $194 = ((($193)) + 28|0);
 HEAP32[$194>>2] = $192;
 $195 = $14;
 $196 = $34;
 $197 = $195 ^ $196;
 $198 = $3;
 $199 = ((($198)) + 32|0);
 HEAP32[$199>>2] = $197;
 $200 = $15;
 $201 = $35;
 $202 = $200 ^ $201;
 $203 = $3;
 $204 = ((($203)) + 36|0);
 HEAP32[$204>>2] = $202;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $4 = $15;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $3;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = $3;
 $29 = ((($28)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $9 = $30;
 $31 = $3;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $10 = $33;
 $34 = $3;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $11 = $36;
 $37 = $3;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $12 = $39;
 $40 = $3;
 $41 = ((($40)) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 $13 = $42;
 $43 = $4;
 $44 = $2;
 HEAP32[$44>>2] = $43;
 $45 = $5;
 $46 = $2;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = $6;
 $49 = $2;
 $50 = ((($49)) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $7;
 $52 = $2;
 $53 = ((($52)) + 12|0);
 HEAP32[$53>>2] = $51;
 $54 = $8;
 $55 = $2;
 $56 = ((($55)) + 16|0);
 HEAP32[$56>>2] = $54;
 $57 = $9;
 $58 = $2;
 $59 = ((($58)) + 20|0);
 HEAP32[$59>>2] = $57;
 $60 = $10;
 $61 = $2;
 $62 = ((($61)) + 24|0);
 HEAP32[$62>>2] = $60;
 $63 = $11;
 $64 = $2;
 $65 = ((($64)) + 28|0);
 HEAP32[$65>>2] = $63;
 $66 = $12;
 $67 = $2;
 $68 = ((($67)) + 32|0);
 HEAP32[$68>>2] = $66;
 $69 = $13;
 $70 = $2;
 $71 = ((($70)) + 36|0);
 HEAP32[$71>>2] = $69;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_frombytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 152|0;
 $5 = sp + 144|0;
 $6 = sp + 136|0;
 $7 = sp + 128|0;
 $8 = sp + 120|0;
 $9 = sp + 112|0;
 $10 = sp + 104|0;
 $11 = sp + 96|0;
 $12 = sp + 88|0;
 $13 = sp + 80|0;
 $14 = sp + 72|0;
 $15 = sp + 64|0;
 $16 = sp + 56|0;
 $17 = sp + 48|0;
 $18 = sp + 40|0;
 $19 = sp + 32|0;
 $20 = sp + 24|0;
 $21 = sp + 16|0;
 $22 = sp + 8|0;
 $23 = sp;
 $2 = $0;
 $3 = $1;
 $24 = $3;
 $25 = (_load_4($24)|0);
 $26 = tempRet0;
 $27 = $4;
 $28 = $27;
 HEAP32[$28>>2] = $25;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = $26;
 $31 = $3;
 $32 = ((($31)) + 4|0);
 $33 = (_load_3($32)|0);
 $34 = tempRet0;
 $35 = (_bitshift64Shl(($33|0),($34|0),6)|0);
 $36 = tempRet0;
 $37 = $5;
 $38 = $37;
 HEAP32[$38>>2] = $35;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = $3;
 $42 = ((($41)) + 7|0);
 $43 = (_load_3($42)|0);
 $44 = tempRet0;
 $45 = (_bitshift64Shl(($43|0),($44|0),5)|0);
 $46 = tempRet0;
 $47 = $6;
 $48 = $47;
 HEAP32[$48>>2] = $45;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $46;
 $51 = $3;
 $52 = ((($51)) + 10|0);
 $53 = (_load_3($52)|0);
 $54 = tempRet0;
 $55 = (_bitshift64Shl(($53|0),($54|0),3)|0);
 $56 = tempRet0;
 $57 = $7;
 $58 = $57;
 HEAP32[$58>>2] = $55;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = $56;
 $61 = $3;
 $62 = ((($61)) + 13|0);
 $63 = (_load_3($62)|0);
 $64 = tempRet0;
 $65 = (_bitshift64Shl(($63|0),($64|0),2)|0);
 $66 = tempRet0;
 $67 = $8;
 $68 = $67;
 HEAP32[$68>>2] = $65;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $71 = $3;
 $72 = ((($71)) + 16|0);
 $73 = (_load_4($72)|0);
 $74 = tempRet0;
 $75 = $9;
 $76 = $75;
 HEAP32[$76>>2] = $73;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = $74;
 $79 = $3;
 $80 = ((($79)) + 20|0);
 $81 = (_load_3($80)|0);
 $82 = tempRet0;
 $83 = (_bitshift64Shl(($81|0),($82|0),7)|0);
 $84 = tempRet0;
 $85 = $10;
 $86 = $85;
 HEAP32[$86>>2] = $83;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $84;
 $89 = $3;
 $90 = ((($89)) + 23|0);
 $91 = (_load_3($90)|0);
 $92 = tempRet0;
 $93 = (_bitshift64Shl(($91|0),($92|0),5)|0);
 $94 = tempRet0;
 $95 = $11;
 $96 = $95;
 HEAP32[$96>>2] = $93;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = $94;
 $99 = $3;
 $100 = ((($99)) + 26|0);
 $101 = (_load_3($100)|0);
 $102 = tempRet0;
 $103 = (_bitshift64Shl(($101|0),($102|0),4)|0);
 $104 = tempRet0;
 $105 = $12;
 $106 = $105;
 HEAP32[$106>>2] = $103;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $104;
 $109 = $3;
 $110 = ((($109)) + 29|0);
 $111 = (_load_3($110)|0);
 $112 = tempRet0;
 $113 = $111 & 8388607;
 $114 = (_bitshift64Shl(($113|0),0,2)|0);
 $115 = tempRet0;
 $116 = $13;
 $117 = $116;
 HEAP32[$117>>2] = $114;
 $118 = (($116) + 4)|0;
 $119 = $118;
 HEAP32[$119>>2] = $115;
 $120 = $13;
 $121 = $120;
 $122 = HEAP32[$121>>2]|0;
 $123 = (($120) + 4)|0;
 $124 = $123;
 $125 = HEAP32[$124>>2]|0;
 $126 = (_i64Add(($122|0),($125|0),16777216,0)|0);
 $127 = tempRet0;
 $128 = (_bitshift64Ashr(($126|0),($127|0),25)|0);
 $129 = tempRet0;
 $130 = $23;
 $131 = $130;
 HEAP32[$131>>2] = $128;
 $132 = (($130) + 4)|0;
 $133 = $132;
 HEAP32[$133>>2] = $129;
 $134 = $23;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = (($134) + 4)|0;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = (___muldi3(($136|0),($139|0),19,0)|0);
 $141 = tempRet0;
 $142 = $4;
 $143 = $142;
 $144 = HEAP32[$143>>2]|0;
 $145 = (($142) + 4)|0;
 $146 = $145;
 $147 = HEAP32[$146>>2]|0;
 $148 = (_i64Add(($144|0),($147|0),($140|0),($141|0))|0);
 $149 = tempRet0;
 $150 = $4;
 $151 = $150;
 HEAP32[$151>>2] = $148;
 $152 = (($150) + 4)|0;
 $153 = $152;
 HEAP32[$153>>2] = $149;
 $154 = $23;
 $155 = $154;
 $156 = HEAP32[$155>>2]|0;
 $157 = (($154) + 4)|0;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (_bitshift64Shl(($156|0),($159|0),25)|0);
 $161 = tempRet0;
 $162 = $13;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = (($162) + 4)|0;
 $166 = $165;
 $167 = HEAP32[$166>>2]|0;
 $168 = (_i64Subtract(($164|0),($167|0),($160|0),($161|0))|0);
 $169 = tempRet0;
 $170 = $13;
 $171 = $170;
 HEAP32[$171>>2] = $168;
 $172 = (($170) + 4)|0;
 $173 = $172;
 HEAP32[$173>>2] = $169;
 $174 = $5;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = (($174) + 4)|0;
 $178 = $177;
 $179 = HEAP32[$178>>2]|0;
 $180 = (_i64Add(($176|0),($179|0),16777216,0)|0);
 $181 = tempRet0;
 $182 = (_bitshift64Ashr(($180|0),($181|0),25)|0);
 $183 = tempRet0;
 $184 = $15;
 $185 = $184;
 HEAP32[$185>>2] = $182;
 $186 = (($184) + 4)|0;
 $187 = $186;
 HEAP32[$187>>2] = $183;
 $188 = $15;
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = (($188) + 4)|0;
 $192 = $191;
 $193 = HEAP32[$192>>2]|0;
 $194 = $6;
 $195 = $194;
 $196 = HEAP32[$195>>2]|0;
 $197 = (($194) + 4)|0;
 $198 = $197;
 $199 = HEAP32[$198>>2]|0;
 $200 = (_i64Add(($196|0),($199|0),($190|0),($193|0))|0);
 $201 = tempRet0;
 $202 = $6;
 $203 = $202;
 HEAP32[$203>>2] = $200;
 $204 = (($202) + 4)|0;
 $205 = $204;
 HEAP32[$205>>2] = $201;
 $206 = $15;
 $207 = $206;
 $208 = HEAP32[$207>>2]|0;
 $209 = (($206) + 4)|0;
 $210 = $209;
 $211 = HEAP32[$210>>2]|0;
 $212 = (_bitshift64Shl(($208|0),($211|0),25)|0);
 $213 = tempRet0;
 $214 = $5;
 $215 = $214;
 $216 = HEAP32[$215>>2]|0;
 $217 = (($214) + 4)|0;
 $218 = $217;
 $219 = HEAP32[$218>>2]|0;
 $220 = (_i64Subtract(($216|0),($219|0),($212|0),($213|0))|0);
 $221 = tempRet0;
 $222 = $5;
 $223 = $222;
 HEAP32[$223>>2] = $220;
 $224 = (($222) + 4)|0;
 $225 = $224;
 HEAP32[$225>>2] = $221;
 $226 = $7;
 $227 = $226;
 $228 = HEAP32[$227>>2]|0;
 $229 = (($226) + 4)|0;
 $230 = $229;
 $231 = HEAP32[$230>>2]|0;
 $232 = (_i64Add(($228|0),($231|0),16777216,0)|0);
 $233 = tempRet0;
 $234 = (_bitshift64Ashr(($232|0),($233|0),25)|0);
 $235 = tempRet0;
 $236 = $17;
 $237 = $236;
 HEAP32[$237>>2] = $234;
 $238 = (($236) + 4)|0;
 $239 = $238;
 HEAP32[$239>>2] = $235;
 $240 = $17;
 $241 = $240;
 $242 = HEAP32[$241>>2]|0;
 $243 = (($240) + 4)|0;
 $244 = $243;
 $245 = HEAP32[$244>>2]|0;
 $246 = $8;
 $247 = $246;
 $248 = HEAP32[$247>>2]|0;
 $249 = (($246) + 4)|0;
 $250 = $249;
 $251 = HEAP32[$250>>2]|0;
 $252 = (_i64Add(($248|0),($251|0),($242|0),($245|0))|0);
 $253 = tempRet0;
 $254 = $8;
 $255 = $254;
 HEAP32[$255>>2] = $252;
 $256 = (($254) + 4)|0;
 $257 = $256;
 HEAP32[$257>>2] = $253;
 $258 = $17;
 $259 = $258;
 $260 = HEAP32[$259>>2]|0;
 $261 = (($258) + 4)|0;
 $262 = $261;
 $263 = HEAP32[$262>>2]|0;
 $264 = (_bitshift64Shl(($260|0),($263|0),25)|0);
 $265 = tempRet0;
 $266 = $7;
 $267 = $266;
 $268 = HEAP32[$267>>2]|0;
 $269 = (($266) + 4)|0;
 $270 = $269;
 $271 = HEAP32[$270>>2]|0;
 $272 = (_i64Subtract(($268|0),($271|0),($264|0),($265|0))|0);
 $273 = tempRet0;
 $274 = $7;
 $275 = $274;
 HEAP32[$275>>2] = $272;
 $276 = (($274) + 4)|0;
 $277 = $276;
 HEAP32[$277>>2] = $273;
 $278 = $9;
 $279 = $278;
 $280 = HEAP32[$279>>2]|0;
 $281 = (($278) + 4)|0;
 $282 = $281;
 $283 = HEAP32[$282>>2]|0;
 $284 = (_i64Add(($280|0),($283|0),16777216,0)|0);
 $285 = tempRet0;
 $286 = (_bitshift64Ashr(($284|0),($285|0),25)|0);
 $287 = tempRet0;
 $288 = $19;
 $289 = $288;
 HEAP32[$289>>2] = $286;
 $290 = (($288) + 4)|0;
 $291 = $290;
 HEAP32[$291>>2] = $287;
 $292 = $19;
 $293 = $292;
 $294 = HEAP32[$293>>2]|0;
 $295 = (($292) + 4)|0;
 $296 = $295;
 $297 = HEAP32[$296>>2]|0;
 $298 = $10;
 $299 = $298;
 $300 = HEAP32[$299>>2]|0;
 $301 = (($298) + 4)|0;
 $302 = $301;
 $303 = HEAP32[$302>>2]|0;
 $304 = (_i64Add(($300|0),($303|0),($294|0),($297|0))|0);
 $305 = tempRet0;
 $306 = $10;
 $307 = $306;
 HEAP32[$307>>2] = $304;
 $308 = (($306) + 4)|0;
 $309 = $308;
 HEAP32[$309>>2] = $305;
 $310 = $19;
 $311 = $310;
 $312 = HEAP32[$311>>2]|0;
 $313 = (($310) + 4)|0;
 $314 = $313;
 $315 = HEAP32[$314>>2]|0;
 $316 = (_bitshift64Shl(($312|0),($315|0),25)|0);
 $317 = tempRet0;
 $318 = $9;
 $319 = $318;
 $320 = HEAP32[$319>>2]|0;
 $321 = (($318) + 4)|0;
 $322 = $321;
 $323 = HEAP32[$322>>2]|0;
 $324 = (_i64Subtract(($320|0),($323|0),($316|0),($317|0))|0);
 $325 = tempRet0;
 $326 = $9;
 $327 = $326;
 HEAP32[$327>>2] = $324;
 $328 = (($326) + 4)|0;
 $329 = $328;
 HEAP32[$329>>2] = $325;
 $330 = $11;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (($330) + 4)|0;
 $334 = $333;
 $335 = HEAP32[$334>>2]|0;
 $336 = (_i64Add(($332|0),($335|0),16777216,0)|0);
 $337 = tempRet0;
 $338 = (_bitshift64Ashr(($336|0),($337|0),25)|0);
 $339 = tempRet0;
 $340 = $21;
 $341 = $340;
 HEAP32[$341>>2] = $338;
 $342 = (($340) + 4)|0;
 $343 = $342;
 HEAP32[$343>>2] = $339;
 $344 = $21;
 $345 = $344;
 $346 = HEAP32[$345>>2]|0;
 $347 = (($344) + 4)|0;
 $348 = $347;
 $349 = HEAP32[$348>>2]|0;
 $350 = $12;
 $351 = $350;
 $352 = HEAP32[$351>>2]|0;
 $353 = (($350) + 4)|0;
 $354 = $353;
 $355 = HEAP32[$354>>2]|0;
 $356 = (_i64Add(($352|0),($355|0),($346|0),($349|0))|0);
 $357 = tempRet0;
 $358 = $12;
 $359 = $358;
 HEAP32[$359>>2] = $356;
 $360 = (($358) + 4)|0;
 $361 = $360;
 HEAP32[$361>>2] = $357;
 $362 = $21;
 $363 = $362;
 $364 = HEAP32[$363>>2]|0;
 $365 = (($362) + 4)|0;
 $366 = $365;
 $367 = HEAP32[$366>>2]|0;
 $368 = (_bitshift64Shl(($364|0),($367|0),25)|0);
 $369 = tempRet0;
 $370 = $11;
 $371 = $370;
 $372 = HEAP32[$371>>2]|0;
 $373 = (($370) + 4)|0;
 $374 = $373;
 $375 = HEAP32[$374>>2]|0;
 $376 = (_i64Subtract(($372|0),($375|0),($368|0),($369|0))|0);
 $377 = tempRet0;
 $378 = $11;
 $379 = $378;
 HEAP32[$379>>2] = $376;
 $380 = (($378) + 4)|0;
 $381 = $380;
 HEAP32[$381>>2] = $377;
 $382 = $4;
 $383 = $382;
 $384 = HEAP32[$383>>2]|0;
 $385 = (($382) + 4)|0;
 $386 = $385;
 $387 = HEAP32[$386>>2]|0;
 $388 = (_i64Add(($384|0),($387|0),33554432,0)|0);
 $389 = tempRet0;
 $390 = (_bitshift64Ashr(($388|0),($389|0),26)|0);
 $391 = tempRet0;
 $392 = $14;
 $393 = $392;
 HEAP32[$393>>2] = $390;
 $394 = (($392) + 4)|0;
 $395 = $394;
 HEAP32[$395>>2] = $391;
 $396 = $14;
 $397 = $396;
 $398 = HEAP32[$397>>2]|0;
 $399 = (($396) + 4)|0;
 $400 = $399;
 $401 = HEAP32[$400>>2]|0;
 $402 = $5;
 $403 = $402;
 $404 = HEAP32[$403>>2]|0;
 $405 = (($402) + 4)|0;
 $406 = $405;
 $407 = HEAP32[$406>>2]|0;
 $408 = (_i64Add(($404|0),($407|0),($398|0),($401|0))|0);
 $409 = tempRet0;
 $410 = $5;
 $411 = $410;
 HEAP32[$411>>2] = $408;
 $412 = (($410) + 4)|0;
 $413 = $412;
 HEAP32[$413>>2] = $409;
 $414 = $14;
 $415 = $414;
 $416 = HEAP32[$415>>2]|0;
 $417 = (($414) + 4)|0;
 $418 = $417;
 $419 = HEAP32[$418>>2]|0;
 $420 = (_bitshift64Shl(($416|0),($419|0),26)|0);
 $421 = tempRet0;
 $422 = $4;
 $423 = $422;
 $424 = HEAP32[$423>>2]|0;
 $425 = (($422) + 4)|0;
 $426 = $425;
 $427 = HEAP32[$426>>2]|0;
 $428 = (_i64Subtract(($424|0),($427|0),($420|0),($421|0))|0);
 $429 = tempRet0;
 $430 = $4;
 $431 = $430;
 HEAP32[$431>>2] = $428;
 $432 = (($430) + 4)|0;
 $433 = $432;
 HEAP32[$433>>2] = $429;
 $434 = $6;
 $435 = $434;
 $436 = HEAP32[$435>>2]|0;
 $437 = (($434) + 4)|0;
 $438 = $437;
 $439 = HEAP32[$438>>2]|0;
 $440 = (_i64Add(($436|0),($439|0),33554432,0)|0);
 $441 = tempRet0;
 $442 = (_bitshift64Ashr(($440|0),($441|0),26)|0);
 $443 = tempRet0;
 $444 = $16;
 $445 = $444;
 HEAP32[$445>>2] = $442;
 $446 = (($444) + 4)|0;
 $447 = $446;
 HEAP32[$447>>2] = $443;
 $448 = $16;
 $449 = $448;
 $450 = HEAP32[$449>>2]|0;
 $451 = (($448) + 4)|0;
 $452 = $451;
 $453 = HEAP32[$452>>2]|0;
 $454 = $7;
 $455 = $454;
 $456 = HEAP32[$455>>2]|0;
 $457 = (($454) + 4)|0;
 $458 = $457;
 $459 = HEAP32[$458>>2]|0;
 $460 = (_i64Add(($456|0),($459|0),($450|0),($453|0))|0);
 $461 = tempRet0;
 $462 = $7;
 $463 = $462;
 HEAP32[$463>>2] = $460;
 $464 = (($462) + 4)|0;
 $465 = $464;
 HEAP32[$465>>2] = $461;
 $466 = $16;
 $467 = $466;
 $468 = HEAP32[$467>>2]|0;
 $469 = (($466) + 4)|0;
 $470 = $469;
 $471 = HEAP32[$470>>2]|0;
 $472 = (_bitshift64Shl(($468|0),($471|0),26)|0);
 $473 = tempRet0;
 $474 = $6;
 $475 = $474;
 $476 = HEAP32[$475>>2]|0;
 $477 = (($474) + 4)|0;
 $478 = $477;
 $479 = HEAP32[$478>>2]|0;
 $480 = (_i64Subtract(($476|0),($479|0),($472|0),($473|0))|0);
 $481 = tempRet0;
 $482 = $6;
 $483 = $482;
 HEAP32[$483>>2] = $480;
 $484 = (($482) + 4)|0;
 $485 = $484;
 HEAP32[$485>>2] = $481;
 $486 = $8;
 $487 = $486;
 $488 = HEAP32[$487>>2]|0;
 $489 = (($486) + 4)|0;
 $490 = $489;
 $491 = HEAP32[$490>>2]|0;
 $492 = (_i64Add(($488|0),($491|0),33554432,0)|0);
 $493 = tempRet0;
 $494 = (_bitshift64Ashr(($492|0),($493|0),26)|0);
 $495 = tempRet0;
 $496 = $18;
 $497 = $496;
 HEAP32[$497>>2] = $494;
 $498 = (($496) + 4)|0;
 $499 = $498;
 HEAP32[$499>>2] = $495;
 $500 = $18;
 $501 = $500;
 $502 = HEAP32[$501>>2]|0;
 $503 = (($500) + 4)|0;
 $504 = $503;
 $505 = HEAP32[$504>>2]|0;
 $506 = $9;
 $507 = $506;
 $508 = HEAP32[$507>>2]|0;
 $509 = (($506) + 4)|0;
 $510 = $509;
 $511 = HEAP32[$510>>2]|0;
 $512 = (_i64Add(($508|0),($511|0),($502|0),($505|0))|0);
 $513 = tempRet0;
 $514 = $9;
 $515 = $514;
 HEAP32[$515>>2] = $512;
 $516 = (($514) + 4)|0;
 $517 = $516;
 HEAP32[$517>>2] = $513;
 $518 = $18;
 $519 = $518;
 $520 = HEAP32[$519>>2]|0;
 $521 = (($518) + 4)|0;
 $522 = $521;
 $523 = HEAP32[$522>>2]|0;
 $524 = (_bitshift64Shl(($520|0),($523|0),26)|0);
 $525 = tempRet0;
 $526 = $8;
 $527 = $526;
 $528 = HEAP32[$527>>2]|0;
 $529 = (($526) + 4)|0;
 $530 = $529;
 $531 = HEAP32[$530>>2]|0;
 $532 = (_i64Subtract(($528|0),($531|0),($524|0),($525|0))|0);
 $533 = tempRet0;
 $534 = $8;
 $535 = $534;
 HEAP32[$535>>2] = $532;
 $536 = (($534) + 4)|0;
 $537 = $536;
 HEAP32[$537>>2] = $533;
 $538 = $10;
 $539 = $538;
 $540 = HEAP32[$539>>2]|0;
 $541 = (($538) + 4)|0;
 $542 = $541;
 $543 = HEAP32[$542>>2]|0;
 $544 = (_i64Add(($540|0),($543|0),33554432,0)|0);
 $545 = tempRet0;
 $546 = (_bitshift64Ashr(($544|0),($545|0),26)|0);
 $547 = tempRet0;
 $548 = $20;
 $549 = $548;
 HEAP32[$549>>2] = $546;
 $550 = (($548) + 4)|0;
 $551 = $550;
 HEAP32[$551>>2] = $547;
 $552 = $20;
 $553 = $552;
 $554 = HEAP32[$553>>2]|0;
 $555 = (($552) + 4)|0;
 $556 = $555;
 $557 = HEAP32[$556>>2]|0;
 $558 = $11;
 $559 = $558;
 $560 = HEAP32[$559>>2]|0;
 $561 = (($558) + 4)|0;
 $562 = $561;
 $563 = HEAP32[$562>>2]|0;
 $564 = (_i64Add(($560|0),($563|0),($554|0),($557|0))|0);
 $565 = tempRet0;
 $566 = $11;
 $567 = $566;
 HEAP32[$567>>2] = $564;
 $568 = (($566) + 4)|0;
 $569 = $568;
 HEAP32[$569>>2] = $565;
 $570 = $20;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (($570) + 4)|0;
 $574 = $573;
 $575 = HEAP32[$574>>2]|0;
 $576 = (_bitshift64Shl(($572|0),($575|0),26)|0);
 $577 = tempRet0;
 $578 = $10;
 $579 = $578;
 $580 = HEAP32[$579>>2]|0;
 $581 = (($578) + 4)|0;
 $582 = $581;
 $583 = HEAP32[$582>>2]|0;
 $584 = (_i64Subtract(($580|0),($583|0),($576|0),($577|0))|0);
 $585 = tempRet0;
 $586 = $10;
 $587 = $586;
 HEAP32[$587>>2] = $584;
 $588 = (($586) + 4)|0;
 $589 = $588;
 HEAP32[$589>>2] = $585;
 $590 = $12;
 $591 = $590;
 $592 = HEAP32[$591>>2]|0;
 $593 = (($590) + 4)|0;
 $594 = $593;
 $595 = HEAP32[$594>>2]|0;
 $596 = (_i64Add(($592|0),($595|0),33554432,0)|0);
 $597 = tempRet0;
 $598 = (_bitshift64Ashr(($596|0),($597|0),26)|0);
 $599 = tempRet0;
 $600 = $22;
 $601 = $600;
 HEAP32[$601>>2] = $598;
 $602 = (($600) + 4)|0;
 $603 = $602;
 HEAP32[$603>>2] = $599;
 $604 = $22;
 $605 = $604;
 $606 = HEAP32[$605>>2]|0;
 $607 = (($604) + 4)|0;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = $13;
 $611 = $610;
 $612 = HEAP32[$611>>2]|0;
 $613 = (($610) + 4)|0;
 $614 = $613;
 $615 = HEAP32[$614>>2]|0;
 $616 = (_i64Add(($612|0),($615|0),($606|0),($609|0))|0);
 $617 = tempRet0;
 $618 = $13;
 $619 = $618;
 HEAP32[$619>>2] = $616;
 $620 = (($618) + 4)|0;
 $621 = $620;
 HEAP32[$621>>2] = $617;
 $622 = $22;
 $623 = $622;
 $624 = HEAP32[$623>>2]|0;
 $625 = (($622) + 4)|0;
 $626 = $625;
 $627 = HEAP32[$626>>2]|0;
 $628 = (_bitshift64Shl(($624|0),($627|0),26)|0);
 $629 = tempRet0;
 $630 = $12;
 $631 = $630;
 $632 = HEAP32[$631>>2]|0;
 $633 = (($630) + 4)|0;
 $634 = $633;
 $635 = HEAP32[$634>>2]|0;
 $636 = (_i64Subtract(($632|0),($635|0),($628|0),($629|0))|0);
 $637 = tempRet0;
 $638 = $12;
 $639 = $638;
 HEAP32[$639>>2] = $636;
 $640 = (($638) + 4)|0;
 $641 = $640;
 HEAP32[$641>>2] = $637;
 $642 = $4;
 $643 = $642;
 $644 = HEAP32[$643>>2]|0;
 $645 = (($642) + 4)|0;
 $646 = $645;
 $647 = HEAP32[$646>>2]|0;
 $648 = $2;
 HEAP32[$648>>2] = $644;
 $649 = $5;
 $650 = $649;
 $651 = HEAP32[$650>>2]|0;
 $652 = (($649) + 4)|0;
 $653 = $652;
 $654 = HEAP32[$653>>2]|0;
 $655 = $2;
 $656 = ((($655)) + 4|0);
 HEAP32[$656>>2] = $651;
 $657 = $6;
 $658 = $657;
 $659 = HEAP32[$658>>2]|0;
 $660 = (($657) + 4)|0;
 $661 = $660;
 $662 = HEAP32[$661>>2]|0;
 $663 = $2;
 $664 = ((($663)) + 8|0);
 HEAP32[$664>>2] = $659;
 $665 = $7;
 $666 = $665;
 $667 = HEAP32[$666>>2]|0;
 $668 = (($665) + 4)|0;
 $669 = $668;
 $670 = HEAP32[$669>>2]|0;
 $671 = $2;
 $672 = ((($671)) + 12|0);
 HEAP32[$672>>2] = $667;
 $673 = $8;
 $674 = $673;
 $675 = HEAP32[$674>>2]|0;
 $676 = (($673) + 4)|0;
 $677 = $676;
 $678 = HEAP32[$677>>2]|0;
 $679 = $2;
 $680 = ((($679)) + 16|0);
 HEAP32[$680>>2] = $675;
 $681 = $9;
 $682 = $681;
 $683 = HEAP32[$682>>2]|0;
 $684 = (($681) + 4)|0;
 $685 = $684;
 $686 = HEAP32[$685>>2]|0;
 $687 = $2;
 $688 = ((($687)) + 20|0);
 HEAP32[$688>>2] = $683;
 $689 = $10;
 $690 = $689;
 $691 = HEAP32[$690>>2]|0;
 $692 = (($689) + 4)|0;
 $693 = $692;
 $694 = HEAP32[$693>>2]|0;
 $695 = $2;
 $696 = ((($695)) + 24|0);
 HEAP32[$696>>2] = $691;
 $697 = $11;
 $698 = $697;
 $699 = HEAP32[$698>>2]|0;
 $700 = (($697) + 4)|0;
 $701 = $700;
 $702 = HEAP32[$701>>2]|0;
 $703 = $2;
 $704 = ((($703)) + 28|0);
 HEAP32[$704>>2] = $699;
 $705 = $12;
 $706 = $705;
 $707 = HEAP32[$706>>2]|0;
 $708 = (($705) + 4)|0;
 $709 = $708;
 $710 = HEAP32[$709>>2]|0;
 $711 = $2;
 $712 = ((($711)) + 32|0);
 HEAP32[$712>>2] = $707;
 $713 = $13;
 $714 = $713;
 $715 = HEAP32[$714>>2]|0;
 $716 = (($713) + 4)|0;
 $717 = $716;
 $718 = HEAP32[$717>>2]|0;
 $719 = $2;
 $720 = ((($719)) + 36|0);
 HEAP32[$720>>2] = $715;
 STACKTOP = sp;return;
}
function _load_4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = tempRet0;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $1;
 $47 = ((($46)) + 3|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (_bitshift64Shl(($49|0),0,24)|0);
 $51 = tempRet0;
 $52 = $2;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $54 | $50;
 $59 = $57 | $51;
 $60 = $2;
 $61 = $60;
 HEAP32[$61>>2] = $58;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 $64 = $2;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 tempRet0 = ($69);
 STACKTOP = sp;return ($66|0);
}
function _load_3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = tempRet0;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $2;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 tempRet0 = ($51);
 STACKTOP = sp;return ($48|0);
}
function _crypto_sign_ed25519_ref10_fe_invert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $4 = sp + 128|0;
 $5 = sp + 88|0;
 $6 = sp + 48|0;
 $7 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $9 = $3;
 _crypto_sign_ed25519_ref10_fe_sq($4,$9);
 $8 = 1;
 while(1) {
  $10 = $8;
  $11 = ($10|0)<(1);
  if (!($11)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($4,$4);
  $12 = $8;
  $13 = (($12) + 1)|0;
  $8 = $13;
 }
 _crypto_sign_ed25519_ref10_fe_sq($5,$4);
 $8 = 1;
 while(1) {
  $14 = $8;
  $15 = ($14|0)<(2);
  if (!($15)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $16 = $8;
  $17 = (($16) + 1)|0;
  $8 = $17;
 }
 $18 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($5,$18,$5);
 _crypto_sign_ed25519_ref10_fe_mul($4,$4,$5);
 _crypto_sign_ed25519_ref10_fe_sq($6,$4);
 $8 = 1;
 while(1) {
  $19 = $8;
  $20 = ($19|0)<(1);
  if (!($20)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $21 = $8;
  $22 = (($21) + 1)|0;
  $8 = $22;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$5,$6);
 _crypto_sign_ed25519_ref10_fe_sq($6,$5);
 $8 = 1;
 while(1) {
  $23 = $8;
  $24 = ($23|0)<(5);
  if (!($24)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $25 = $8;
  $26 = (($25) + 1)|0;
  $8 = $26;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($6,$5);
 $8 = 1;
 while(1) {
  $27 = $8;
  $28 = ($27|0)<(10);
  if (!($28)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $29 = $8;
  $30 = (($29) + 1)|0;
  $8 = $30;
 }
 _crypto_sign_ed25519_ref10_fe_mul($6,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($7,$6);
 $8 = 1;
 while(1) {
  $31 = $8;
  $32 = ($31|0)<(20);
  if (!($32)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($7,$7);
  $33 = $8;
  $34 = (($33) + 1)|0;
  $8 = $34;
 }
 _crypto_sign_ed25519_ref10_fe_mul($6,$7,$6);
 _crypto_sign_ed25519_ref10_fe_sq($6,$6);
 $8 = 1;
 while(1) {
  $35 = $8;
  $36 = ($35|0)<(10);
  if (!($36)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $37 = $8;
  $38 = (($37) + 1)|0;
  $8 = $38;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($6,$5);
 $8 = 1;
 while(1) {
  $39 = $8;
  $40 = ($39|0)<(50);
  if (!($40)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $41 = $8;
  $42 = (($41) + 1)|0;
  $8 = $42;
 }
 _crypto_sign_ed25519_ref10_fe_mul($6,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($7,$6);
 $8 = 1;
 while(1) {
  $43 = $8;
  $44 = ($43|0)<(100);
  if (!($44)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($7,$7);
  $45 = $8;
  $46 = (($45) + 1)|0;
  $8 = $46;
 }
 _crypto_sign_ed25519_ref10_fe_mul($6,$7,$6);
 _crypto_sign_ed25519_ref10_fe_sq($6,$6);
 $8 = 1;
 while(1) {
  $47 = $8;
  $48 = ($47|0)<(50);
  if (!($48)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $49 = $8;
  $50 = (($49) + 1)|0;
  $8 = $50;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($5,$5);
 $8 = 1;
 while(1) {
  $51 = $8;
  $52 = ($51|0)<(5);
  if (!($52)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $53 = $8;
  $54 = (($53) + 1)|0;
  $8 = $54;
 }
 $55 = $2;
 _crypto_sign_ed25519_ref10_fe_mul($55,$5,$4);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_isnegative($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 8|0;
 $1 = $0;
 $3 = $1;
 _crypto_sign_ed25519_ref10_fe_tobytes($2,$3);
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 & 1;
 STACKTOP = sp;return ($6|0);
}
function _crypto_sign_ed25519_ref10_fe_isnonzero($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 8|0;
 $1 = $0;
 $3 = $1;
 _crypto_sign_ed25519_ref10_fe_tobytes($2,$3);
 $4 = (_crypto_verify_32_1($2,32856)|0);
 STACKTOP = sp;return ($4|0);
}
function _crypto_verify_32_1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $3;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 ^ $10;
 $12 = $4;
 $13 = $12 | $11;
 $4 = $13;
 $14 = $2;
 $15 = ((($14)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $3;
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $17 ^ $21;
 $23 = $4;
 $24 = $23 | $22;
 $4 = $24;
 $25 = $2;
 $26 = ((($25)) + 2|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $3;
 $30 = ((($29)) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $28 ^ $32;
 $34 = $4;
 $35 = $34 | $33;
 $4 = $35;
 $36 = $2;
 $37 = ((($36)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $3;
 $41 = ((($40)) + 3|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $39 ^ $43;
 $45 = $4;
 $46 = $45 | $44;
 $4 = $46;
 $47 = $2;
 $48 = ((($47)) + 4|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = $3;
 $52 = ((($51)) + 4|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $50 ^ $54;
 $56 = $4;
 $57 = $56 | $55;
 $4 = $57;
 $58 = $2;
 $59 = ((($58)) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $3;
 $63 = ((($62)) + 5|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $61 ^ $65;
 $67 = $4;
 $68 = $67 | $66;
 $4 = $68;
 $69 = $2;
 $70 = ((($69)) + 6|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $3;
 $74 = ((($73)) + 6|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $72 ^ $76;
 $78 = $4;
 $79 = $78 | $77;
 $4 = $79;
 $80 = $2;
 $81 = ((($80)) + 7|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $3;
 $85 = ((($84)) + 7|0);
 $86 = HEAP8[$85>>0]|0;
 $87 = $86&255;
 $88 = $83 ^ $87;
 $89 = $4;
 $90 = $89 | $88;
 $4 = $90;
 $91 = $2;
 $92 = ((($91)) + 8|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $3;
 $96 = ((($95)) + 8|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $94 ^ $98;
 $100 = $4;
 $101 = $100 | $99;
 $4 = $101;
 $102 = $2;
 $103 = ((($102)) + 9|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = $3;
 $107 = ((($106)) + 9|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = $105 ^ $109;
 $111 = $4;
 $112 = $111 | $110;
 $4 = $112;
 $113 = $2;
 $114 = ((($113)) + 10|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = $3;
 $118 = ((($117)) + 10|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $116 ^ $120;
 $122 = $4;
 $123 = $122 | $121;
 $4 = $123;
 $124 = $2;
 $125 = ((($124)) + 11|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $128 = $3;
 $129 = ((($128)) + 11|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = $127 ^ $131;
 $133 = $4;
 $134 = $133 | $132;
 $4 = $134;
 $135 = $2;
 $136 = ((($135)) + 12|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&255;
 $139 = $3;
 $140 = ((($139)) + 12|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = $141&255;
 $143 = $138 ^ $142;
 $144 = $4;
 $145 = $144 | $143;
 $4 = $145;
 $146 = $2;
 $147 = ((($146)) + 13|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = $148&255;
 $150 = $3;
 $151 = ((($150)) + 13|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152&255;
 $154 = $149 ^ $153;
 $155 = $4;
 $156 = $155 | $154;
 $4 = $156;
 $157 = $2;
 $158 = ((($157)) + 14|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159&255;
 $161 = $3;
 $162 = ((($161)) + 14|0);
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 $165 = $160 ^ $164;
 $166 = $4;
 $167 = $166 | $165;
 $4 = $167;
 $168 = $2;
 $169 = ((($168)) + 15|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $170&255;
 $172 = $3;
 $173 = ((($172)) + 15|0);
 $174 = HEAP8[$173>>0]|0;
 $175 = $174&255;
 $176 = $171 ^ $175;
 $177 = $4;
 $178 = $177 | $176;
 $4 = $178;
 $179 = $2;
 $180 = ((($179)) + 16|0);
 $181 = HEAP8[$180>>0]|0;
 $182 = $181&255;
 $183 = $3;
 $184 = ((($183)) + 16|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&255;
 $187 = $182 ^ $186;
 $188 = $4;
 $189 = $188 | $187;
 $4 = $189;
 $190 = $2;
 $191 = ((($190)) + 17|0);
 $192 = HEAP8[$191>>0]|0;
 $193 = $192&255;
 $194 = $3;
 $195 = ((($194)) + 17|0);
 $196 = HEAP8[$195>>0]|0;
 $197 = $196&255;
 $198 = $193 ^ $197;
 $199 = $4;
 $200 = $199 | $198;
 $4 = $200;
 $201 = $2;
 $202 = ((($201)) + 18|0);
 $203 = HEAP8[$202>>0]|0;
 $204 = $203&255;
 $205 = $3;
 $206 = ((($205)) + 18|0);
 $207 = HEAP8[$206>>0]|0;
 $208 = $207&255;
 $209 = $204 ^ $208;
 $210 = $4;
 $211 = $210 | $209;
 $4 = $211;
 $212 = $2;
 $213 = ((($212)) + 19|0);
 $214 = HEAP8[$213>>0]|0;
 $215 = $214&255;
 $216 = $3;
 $217 = ((($216)) + 19|0);
 $218 = HEAP8[$217>>0]|0;
 $219 = $218&255;
 $220 = $215 ^ $219;
 $221 = $4;
 $222 = $221 | $220;
 $4 = $222;
 $223 = $2;
 $224 = ((($223)) + 20|0);
 $225 = HEAP8[$224>>0]|0;
 $226 = $225&255;
 $227 = $3;
 $228 = ((($227)) + 20|0);
 $229 = HEAP8[$228>>0]|0;
 $230 = $229&255;
 $231 = $226 ^ $230;
 $232 = $4;
 $233 = $232 | $231;
 $4 = $233;
 $234 = $2;
 $235 = ((($234)) + 21|0);
 $236 = HEAP8[$235>>0]|0;
 $237 = $236&255;
 $238 = $3;
 $239 = ((($238)) + 21|0);
 $240 = HEAP8[$239>>0]|0;
 $241 = $240&255;
 $242 = $237 ^ $241;
 $243 = $4;
 $244 = $243 | $242;
 $4 = $244;
 $245 = $2;
 $246 = ((($245)) + 22|0);
 $247 = HEAP8[$246>>0]|0;
 $248 = $247&255;
 $249 = $3;
 $250 = ((($249)) + 22|0);
 $251 = HEAP8[$250>>0]|0;
 $252 = $251&255;
 $253 = $248 ^ $252;
 $254 = $4;
 $255 = $254 | $253;
 $4 = $255;
 $256 = $2;
 $257 = ((($256)) + 23|0);
 $258 = HEAP8[$257>>0]|0;
 $259 = $258&255;
 $260 = $3;
 $261 = ((($260)) + 23|0);
 $262 = HEAP8[$261>>0]|0;
 $263 = $262&255;
 $264 = $259 ^ $263;
 $265 = $4;
 $266 = $265 | $264;
 $4 = $266;
 $267 = $2;
 $268 = ((($267)) + 24|0);
 $269 = HEAP8[$268>>0]|0;
 $270 = $269&255;
 $271 = $3;
 $272 = ((($271)) + 24|0);
 $273 = HEAP8[$272>>0]|0;
 $274 = $273&255;
 $275 = $270 ^ $274;
 $276 = $4;
 $277 = $276 | $275;
 $4 = $277;
 $278 = $2;
 $279 = ((($278)) + 25|0);
 $280 = HEAP8[$279>>0]|0;
 $281 = $280&255;
 $282 = $3;
 $283 = ((($282)) + 25|0);
 $284 = HEAP8[$283>>0]|0;
 $285 = $284&255;
 $286 = $281 ^ $285;
 $287 = $4;
 $288 = $287 | $286;
 $4 = $288;
 $289 = $2;
 $290 = ((($289)) + 26|0);
 $291 = HEAP8[$290>>0]|0;
 $292 = $291&255;
 $293 = $3;
 $294 = ((($293)) + 26|0);
 $295 = HEAP8[$294>>0]|0;
 $296 = $295&255;
 $297 = $292 ^ $296;
 $298 = $4;
 $299 = $298 | $297;
 $4 = $299;
 $300 = $2;
 $301 = ((($300)) + 27|0);
 $302 = HEAP8[$301>>0]|0;
 $303 = $302&255;
 $304 = $3;
 $305 = ((($304)) + 27|0);
 $306 = HEAP8[$305>>0]|0;
 $307 = $306&255;
 $308 = $303 ^ $307;
 $309 = $4;
 $310 = $309 | $308;
 $4 = $310;
 $311 = $2;
 $312 = ((($311)) + 28|0);
 $313 = HEAP8[$312>>0]|0;
 $314 = $313&255;
 $315 = $3;
 $316 = ((($315)) + 28|0);
 $317 = HEAP8[$316>>0]|0;
 $318 = $317&255;
 $319 = $314 ^ $318;
 $320 = $4;
 $321 = $320 | $319;
 $4 = $321;
 $322 = $2;
 $323 = ((($322)) + 29|0);
 $324 = HEAP8[$323>>0]|0;
 $325 = $324&255;
 $326 = $3;
 $327 = ((($326)) + 29|0);
 $328 = HEAP8[$327>>0]|0;
 $329 = $328&255;
 $330 = $325 ^ $329;
 $331 = $4;
 $332 = $331 | $330;
 $4 = $332;
 $333 = $2;
 $334 = ((($333)) + 30|0);
 $335 = HEAP8[$334>>0]|0;
 $336 = $335&255;
 $337 = $3;
 $338 = ((($337)) + 30|0);
 $339 = HEAP8[$338>>0]|0;
 $340 = $339&255;
 $341 = $336 ^ $340;
 $342 = $4;
 $343 = $342 | $341;
 $4 = $343;
 $344 = $2;
 $345 = ((($344)) + 31|0);
 $346 = HEAP8[$345>>0]|0;
 $347 = $346&255;
 $348 = $3;
 $349 = ((($348)) + 31|0);
 $350 = HEAP8[$349>>0]|0;
 $351 = $350&255;
 $352 = $347 ^ $351;
 $353 = $4;
 $354 = $353 | $352;
 $4 = $354;
 $355 = $4;
 $356 = (($355) - 1)|0;
 $357 = $356 >>> 8;
 $358 = 1 & $357;
 $359 = (($358) - 1)|0;
 STACKTOP = sp;return ($359|0);
}
function _crypto_sign_ed25519_ref10_fe_mul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1120|0);
 $40 = sp + 952|0;
 $41 = sp + 944|0;
 $42 = sp + 936|0;
 $43 = sp + 928|0;
 $44 = sp + 920|0;
 $45 = sp + 912|0;
 $46 = sp + 904|0;
 $47 = sp + 896|0;
 $48 = sp + 888|0;
 $49 = sp + 880|0;
 $50 = sp + 872|0;
 $51 = sp + 864|0;
 $52 = sp + 856|0;
 $53 = sp + 848|0;
 $54 = sp + 840|0;
 $55 = sp + 832|0;
 $56 = sp + 824|0;
 $57 = sp + 816|0;
 $58 = sp + 808|0;
 $59 = sp + 800|0;
 $60 = sp + 792|0;
 $61 = sp + 784|0;
 $62 = sp + 776|0;
 $63 = sp + 768|0;
 $64 = sp + 760|0;
 $65 = sp + 752|0;
 $66 = sp + 744|0;
 $67 = sp + 736|0;
 $68 = sp + 728|0;
 $69 = sp + 720|0;
 $70 = sp + 712|0;
 $71 = sp + 704|0;
 $72 = sp + 696|0;
 $73 = sp + 688|0;
 $74 = sp + 680|0;
 $75 = sp + 672|0;
 $76 = sp + 664|0;
 $77 = sp + 656|0;
 $78 = sp + 648|0;
 $79 = sp + 640|0;
 $80 = sp + 632|0;
 $81 = sp + 624|0;
 $82 = sp + 616|0;
 $83 = sp + 608|0;
 $84 = sp + 600|0;
 $85 = sp + 592|0;
 $86 = sp + 584|0;
 $87 = sp + 576|0;
 $88 = sp + 568|0;
 $89 = sp + 560|0;
 $90 = sp + 552|0;
 $91 = sp + 544|0;
 $92 = sp + 536|0;
 $93 = sp + 528|0;
 $94 = sp + 520|0;
 $95 = sp + 512|0;
 $96 = sp + 504|0;
 $97 = sp + 496|0;
 $98 = sp + 488|0;
 $99 = sp + 480|0;
 $100 = sp + 472|0;
 $101 = sp + 464|0;
 $102 = sp + 456|0;
 $103 = sp + 448|0;
 $104 = sp + 440|0;
 $105 = sp + 432|0;
 $106 = sp + 424|0;
 $107 = sp + 416|0;
 $108 = sp + 408|0;
 $109 = sp + 400|0;
 $110 = sp + 392|0;
 $111 = sp + 384|0;
 $112 = sp + 376|0;
 $113 = sp + 368|0;
 $114 = sp + 360|0;
 $115 = sp + 352|0;
 $116 = sp + 344|0;
 $117 = sp + 336|0;
 $118 = sp + 328|0;
 $119 = sp + 320|0;
 $120 = sp + 312|0;
 $121 = sp + 304|0;
 $122 = sp + 296|0;
 $123 = sp + 288|0;
 $124 = sp + 280|0;
 $125 = sp + 272|0;
 $126 = sp + 264|0;
 $127 = sp + 256|0;
 $128 = sp + 248|0;
 $129 = sp + 240|0;
 $130 = sp + 232|0;
 $131 = sp + 224|0;
 $132 = sp + 216|0;
 $133 = sp + 208|0;
 $134 = sp + 200|0;
 $135 = sp + 192|0;
 $136 = sp + 184|0;
 $137 = sp + 176|0;
 $138 = sp + 168|0;
 $139 = sp + 160|0;
 $140 = sp + 152|0;
 $141 = sp + 144|0;
 $142 = sp + 136|0;
 $143 = sp + 128|0;
 $144 = sp + 120|0;
 $145 = sp + 112|0;
 $146 = sp + 104|0;
 $147 = sp + 96|0;
 $148 = sp + 88|0;
 $149 = sp + 80|0;
 $150 = sp + 72|0;
 $151 = sp + 64|0;
 $152 = sp + 56|0;
 $153 = sp + 48|0;
 $154 = sp + 40|0;
 $155 = sp + 32|0;
 $156 = sp + 24|0;
 $157 = sp + 16|0;
 $158 = sp + 8|0;
 $159 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $160 = $4;
 $161 = HEAP32[$160>>2]|0;
 $6 = $161;
 $162 = $4;
 $163 = ((($162)) + 4|0);
 $164 = HEAP32[$163>>2]|0;
 $7 = $164;
 $165 = $4;
 $166 = ((($165)) + 8|0);
 $167 = HEAP32[$166>>2]|0;
 $8 = $167;
 $168 = $4;
 $169 = ((($168)) + 12|0);
 $170 = HEAP32[$169>>2]|0;
 $9 = $170;
 $171 = $4;
 $172 = ((($171)) + 16|0);
 $173 = HEAP32[$172>>2]|0;
 $10 = $173;
 $174 = $4;
 $175 = ((($174)) + 20|0);
 $176 = HEAP32[$175>>2]|0;
 $11 = $176;
 $177 = $4;
 $178 = ((($177)) + 24|0);
 $179 = HEAP32[$178>>2]|0;
 $12 = $179;
 $180 = $4;
 $181 = ((($180)) + 28|0);
 $182 = HEAP32[$181>>2]|0;
 $13 = $182;
 $183 = $4;
 $184 = ((($183)) + 32|0);
 $185 = HEAP32[$184>>2]|0;
 $14 = $185;
 $186 = $4;
 $187 = ((($186)) + 36|0);
 $188 = HEAP32[$187>>2]|0;
 $15 = $188;
 $189 = $5;
 $190 = HEAP32[$189>>2]|0;
 $16 = $190;
 $191 = $5;
 $192 = ((($191)) + 4|0);
 $193 = HEAP32[$192>>2]|0;
 $17 = $193;
 $194 = $5;
 $195 = ((($194)) + 8|0);
 $196 = HEAP32[$195>>2]|0;
 $18 = $196;
 $197 = $5;
 $198 = ((($197)) + 12|0);
 $199 = HEAP32[$198>>2]|0;
 $19 = $199;
 $200 = $5;
 $201 = ((($200)) + 16|0);
 $202 = HEAP32[$201>>2]|0;
 $20 = $202;
 $203 = $5;
 $204 = ((($203)) + 20|0);
 $205 = HEAP32[$204>>2]|0;
 $21 = $205;
 $206 = $5;
 $207 = ((($206)) + 24|0);
 $208 = HEAP32[$207>>2]|0;
 $22 = $208;
 $209 = $5;
 $210 = ((($209)) + 28|0);
 $211 = HEAP32[$210>>2]|0;
 $23 = $211;
 $212 = $5;
 $213 = ((($212)) + 32|0);
 $214 = HEAP32[$213>>2]|0;
 $24 = $214;
 $215 = $5;
 $216 = ((($215)) + 36|0);
 $217 = HEAP32[$216>>2]|0;
 $25 = $217;
 $218 = $17;
 $219 = ($218*19)|0;
 $26 = $219;
 $220 = $18;
 $221 = ($220*19)|0;
 $27 = $221;
 $222 = $19;
 $223 = ($222*19)|0;
 $28 = $223;
 $224 = $20;
 $225 = ($224*19)|0;
 $29 = $225;
 $226 = $21;
 $227 = ($226*19)|0;
 $30 = $227;
 $228 = $22;
 $229 = ($228*19)|0;
 $31 = $229;
 $230 = $23;
 $231 = ($230*19)|0;
 $32 = $231;
 $232 = $24;
 $233 = ($232*19)|0;
 $33 = $233;
 $234 = $25;
 $235 = ($234*19)|0;
 $34 = $235;
 $236 = $7;
 $237 = $236<<1;
 $35 = $237;
 $238 = $9;
 $239 = $238<<1;
 $36 = $239;
 $240 = $11;
 $241 = $240<<1;
 $37 = $241;
 $242 = $13;
 $243 = $242<<1;
 $38 = $243;
 $244 = $15;
 $245 = $244<<1;
 $39 = $245;
 $246 = $6;
 $247 = ($246|0)<(0);
 $248 = $247 << 31 >> 31;
 $249 = $16;
 $250 = ($249|0)<(0);
 $251 = $250 << 31 >> 31;
 $252 = (___muldi3(($246|0),($248|0),($249|0),($251|0))|0);
 $253 = tempRet0;
 $254 = $40;
 $255 = $254;
 HEAP32[$255>>2] = $252;
 $256 = (($254) + 4)|0;
 $257 = $256;
 HEAP32[$257>>2] = $253;
 $258 = $6;
 $259 = ($258|0)<(0);
 $260 = $259 << 31 >> 31;
 $261 = $17;
 $262 = ($261|0)<(0);
 $263 = $262 << 31 >> 31;
 $264 = (___muldi3(($258|0),($260|0),($261|0),($263|0))|0);
 $265 = tempRet0;
 $266 = $41;
 $267 = $266;
 HEAP32[$267>>2] = $264;
 $268 = (($266) + 4)|0;
 $269 = $268;
 HEAP32[$269>>2] = $265;
 $270 = $6;
 $271 = ($270|0)<(0);
 $272 = $271 << 31 >> 31;
 $273 = $18;
 $274 = ($273|0)<(0);
 $275 = $274 << 31 >> 31;
 $276 = (___muldi3(($270|0),($272|0),($273|0),($275|0))|0);
 $277 = tempRet0;
 $278 = $42;
 $279 = $278;
 HEAP32[$279>>2] = $276;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = $277;
 $282 = $6;
 $283 = ($282|0)<(0);
 $284 = $283 << 31 >> 31;
 $285 = $19;
 $286 = ($285|0)<(0);
 $287 = $286 << 31 >> 31;
 $288 = (___muldi3(($282|0),($284|0),($285|0),($287|0))|0);
 $289 = tempRet0;
 $290 = $43;
 $291 = $290;
 HEAP32[$291>>2] = $288;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = $289;
 $294 = $6;
 $295 = ($294|0)<(0);
 $296 = $295 << 31 >> 31;
 $297 = $20;
 $298 = ($297|0)<(0);
 $299 = $298 << 31 >> 31;
 $300 = (___muldi3(($294|0),($296|0),($297|0),($299|0))|0);
 $301 = tempRet0;
 $302 = $44;
 $303 = $302;
 HEAP32[$303>>2] = $300;
 $304 = (($302) + 4)|0;
 $305 = $304;
 HEAP32[$305>>2] = $301;
 $306 = $6;
 $307 = ($306|0)<(0);
 $308 = $307 << 31 >> 31;
 $309 = $21;
 $310 = ($309|0)<(0);
 $311 = $310 << 31 >> 31;
 $312 = (___muldi3(($306|0),($308|0),($309|0),($311|0))|0);
 $313 = tempRet0;
 $314 = $45;
 $315 = $314;
 HEAP32[$315>>2] = $312;
 $316 = (($314) + 4)|0;
 $317 = $316;
 HEAP32[$317>>2] = $313;
 $318 = $6;
 $319 = ($318|0)<(0);
 $320 = $319 << 31 >> 31;
 $321 = $22;
 $322 = ($321|0)<(0);
 $323 = $322 << 31 >> 31;
 $324 = (___muldi3(($318|0),($320|0),($321|0),($323|0))|0);
 $325 = tempRet0;
 $326 = $46;
 $327 = $326;
 HEAP32[$327>>2] = $324;
 $328 = (($326) + 4)|0;
 $329 = $328;
 HEAP32[$329>>2] = $325;
 $330 = $6;
 $331 = ($330|0)<(0);
 $332 = $331 << 31 >> 31;
 $333 = $23;
 $334 = ($333|0)<(0);
 $335 = $334 << 31 >> 31;
 $336 = (___muldi3(($330|0),($332|0),($333|0),($335|0))|0);
 $337 = tempRet0;
 $338 = $47;
 $339 = $338;
 HEAP32[$339>>2] = $336;
 $340 = (($338) + 4)|0;
 $341 = $340;
 HEAP32[$341>>2] = $337;
 $342 = $6;
 $343 = ($342|0)<(0);
 $344 = $343 << 31 >> 31;
 $345 = $24;
 $346 = ($345|0)<(0);
 $347 = $346 << 31 >> 31;
 $348 = (___muldi3(($342|0),($344|0),($345|0),($347|0))|0);
 $349 = tempRet0;
 $350 = $48;
 $351 = $350;
 HEAP32[$351>>2] = $348;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = $349;
 $354 = $6;
 $355 = ($354|0)<(0);
 $356 = $355 << 31 >> 31;
 $357 = $25;
 $358 = ($357|0)<(0);
 $359 = $358 << 31 >> 31;
 $360 = (___muldi3(($354|0),($356|0),($357|0),($359|0))|0);
 $361 = tempRet0;
 $362 = $49;
 $363 = $362;
 HEAP32[$363>>2] = $360;
 $364 = (($362) + 4)|0;
 $365 = $364;
 HEAP32[$365>>2] = $361;
 $366 = $7;
 $367 = ($366|0)<(0);
 $368 = $367 << 31 >> 31;
 $369 = $16;
 $370 = ($369|0)<(0);
 $371 = $370 << 31 >> 31;
 $372 = (___muldi3(($366|0),($368|0),($369|0),($371|0))|0);
 $373 = tempRet0;
 $374 = $50;
 $375 = $374;
 HEAP32[$375>>2] = $372;
 $376 = (($374) + 4)|0;
 $377 = $376;
 HEAP32[$377>>2] = $373;
 $378 = $35;
 $379 = ($378|0)<(0);
 $380 = $379 << 31 >> 31;
 $381 = $17;
 $382 = ($381|0)<(0);
 $383 = $382 << 31 >> 31;
 $384 = (___muldi3(($378|0),($380|0),($381|0),($383|0))|0);
 $385 = tempRet0;
 $386 = $51;
 $387 = $386;
 HEAP32[$387>>2] = $384;
 $388 = (($386) + 4)|0;
 $389 = $388;
 HEAP32[$389>>2] = $385;
 $390 = $7;
 $391 = ($390|0)<(0);
 $392 = $391 << 31 >> 31;
 $393 = $18;
 $394 = ($393|0)<(0);
 $395 = $394 << 31 >> 31;
 $396 = (___muldi3(($390|0),($392|0),($393|0),($395|0))|0);
 $397 = tempRet0;
 $398 = $52;
 $399 = $398;
 HEAP32[$399>>2] = $396;
 $400 = (($398) + 4)|0;
 $401 = $400;
 HEAP32[$401>>2] = $397;
 $402 = $35;
 $403 = ($402|0)<(0);
 $404 = $403 << 31 >> 31;
 $405 = $19;
 $406 = ($405|0)<(0);
 $407 = $406 << 31 >> 31;
 $408 = (___muldi3(($402|0),($404|0),($405|0),($407|0))|0);
 $409 = tempRet0;
 $410 = $53;
 $411 = $410;
 HEAP32[$411>>2] = $408;
 $412 = (($410) + 4)|0;
 $413 = $412;
 HEAP32[$413>>2] = $409;
 $414 = $7;
 $415 = ($414|0)<(0);
 $416 = $415 << 31 >> 31;
 $417 = $20;
 $418 = ($417|0)<(0);
 $419 = $418 << 31 >> 31;
 $420 = (___muldi3(($414|0),($416|0),($417|0),($419|0))|0);
 $421 = tempRet0;
 $422 = $54;
 $423 = $422;
 HEAP32[$423>>2] = $420;
 $424 = (($422) + 4)|0;
 $425 = $424;
 HEAP32[$425>>2] = $421;
 $426 = $35;
 $427 = ($426|0)<(0);
 $428 = $427 << 31 >> 31;
 $429 = $21;
 $430 = ($429|0)<(0);
 $431 = $430 << 31 >> 31;
 $432 = (___muldi3(($426|0),($428|0),($429|0),($431|0))|0);
 $433 = tempRet0;
 $434 = $55;
 $435 = $434;
 HEAP32[$435>>2] = $432;
 $436 = (($434) + 4)|0;
 $437 = $436;
 HEAP32[$437>>2] = $433;
 $438 = $7;
 $439 = ($438|0)<(0);
 $440 = $439 << 31 >> 31;
 $441 = $22;
 $442 = ($441|0)<(0);
 $443 = $442 << 31 >> 31;
 $444 = (___muldi3(($438|0),($440|0),($441|0),($443|0))|0);
 $445 = tempRet0;
 $446 = $56;
 $447 = $446;
 HEAP32[$447>>2] = $444;
 $448 = (($446) + 4)|0;
 $449 = $448;
 HEAP32[$449>>2] = $445;
 $450 = $35;
 $451 = ($450|0)<(0);
 $452 = $451 << 31 >> 31;
 $453 = $23;
 $454 = ($453|0)<(0);
 $455 = $454 << 31 >> 31;
 $456 = (___muldi3(($450|0),($452|0),($453|0),($455|0))|0);
 $457 = tempRet0;
 $458 = $57;
 $459 = $458;
 HEAP32[$459>>2] = $456;
 $460 = (($458) + 4)|0;
 $461 = $460;
 HEAP32[$461>>2] = $457;
 $462 = $7;
 $463 = ($462|0)<(0);
 $464 = $463 << 31 >> 31;
 $465 = $24;
 $466 = ($465|0)<(0);
 $467 = $466 << 31 >> 31;
 $468 = (___muldi3(($462|0),($464|0),($465|0),($467|0))|0);
 $469 = tempRet0;
 $470 = $58;
 $471 = $470;
 HEAP32[$471>>2] = $468;
 $472 = (($470) + 4)|0;
 $473 = $472;
 HEAP32[$473>>2] = $469;
 $474 = $35;
 $475 = ($474|0)<(0);
 $476 = $475 << 31 >> 31;
 $477 = $34;
 $478 = ($477|0)<(0);
 $479 = $478 << 31 >> 31;
 $480 = (___muldi3(($474|0),($476|0),($477|0),($479|0))|0);
 $481 = tempRet0;
 $482 = $59;
 $483 = $482;
 HEAP32[$483>>2] = $480;
 $484 = (($482) + 4)|0;
 $485 = $484;
 HEAP32[$485>>2] = $481;
 $486 = $8;
 $487 = ($486|0)<(0);
 $488 = $487 << 31 >> 31;
 $489 = $16;
 $490 = ($489|0)<(0);
 $491 = $490 << 31 >> 31;
 $492 = (___muldi3(($486|0),($488|0),($489|0),($491|0))|0);
 $493 = tempRet0;
 $494 = $60;
 $495 = $494;
 HEAP32[$495>>2] = $492;
 $496 = (($494) + 4)|0;
 $497 = $496;
 HEAP32[$497>>2] = $493;
 $498 = $8;
 $499 = ($498|0)<(0);
 $500 = $499 << 31 >> 31;
 $501 = $17;
 $502 = ($501|0)<(0);
 $503 = $502 << 31 >> 31;
 $504 = (___muldi3(($498|0),($500|0),($501|0),($503|0))|0);
 $505 = tempRet0;
 $506 = $61;
 $507 = $506;
 HEAP32[$507>>2] = $504;
 $508 = (($506) + 4)|0;
 $509 = $508;
 HEAP32[$509>>2] = $505;
 $510 = $8;
 $511 = ($510|0)<(0);
 $512 = $511 << 31 >> 31;
 $513 = $18;
 $514 = ($513|0)<(0);
 $515 = $514 << 31 >> 31;
 $516 = (___muldi3(($510|0),($512|0),($513|0),($515|0))|0);
 $517 = tempRet0;
 $518 = $62;
 $519 = $518;
 HEAP32[$519>>2] = $516;
 $520 = (($518) + 4)|0;
 $521 = $520;
 HEAP32[$521>>2] = $517;
 $522 = $8;
 $523 = ($522|0)<(0);
 $524 = $523 << 31 >> 31;
 $525 = $19;
 $526 = ($525|0)<(0);
 $527 = $526 << 31 >> 31;
 $528 = (___muldi3(($522|0),($524|0),($525|0),($527|0))|0);
 $529 = tempRet0;
 $530 = $63;
 $531 = $530;
 HEAP32[$531>>2] = $528;
 $532 = (($530) + 4)|0;
 $533 = $532;
 HEAP32[$533>>2] = $529;
 $534 = $8;
 $535 = ($534|0)<(0);
 $536 = $535 << 31 >> 31;
 $537 = $20;
 $538 = ($537|0)<(0);
 $539 = $538 << 31 >> 31;
 $540 = (___muldi3(($534|0),($536|0),($537|0),($539|0))|0);
 $541 = tempRet0;
 $542 = $64;
 $543 = $542;
 HEAP32[$543>>2] = $540;
 $544 = (($542) + 4)|0;
 $545 = $544;
 HEAP32[$545>>2] = $541;
 $546 = $8;
 $547 = ($546|0)<(0);
 $548 = $547 << 31 >> 31;
 $549 = $21;
 $550 = ($549|0)<(0);
 $551 = $550 << 31 >> 31;
 $552 = (___muldi3(($546|0),($548|0),($549|0),($551|0))|0);
 $553 = tempRet0;
 $554 = $65;
 $555 = $554;
 HEAP32[$555>>2] = $552;
 $556 = (($554) + 4)|0;
 $557 = $556;
 HEAP32[$557>>2] = $553;
 $558 = $8;
 $559 = ($558|0)<(0);
 $560 = $559 << 31 >> 31;
 $561 = $22;
 $562 = ($561|0)<(0);
 $563 = $562 << 31 >> 31;
 $564 = (___muldi3(($558|0),($560|0),($561|0),($563|0))|0);
 $565 = tempRet0;
 $566 = $66;
 $567 = $566;
 HEAP32[$567>>2] = $564;
 $568 = (($566) + 4)|0;
 $569 = $568;
 HEAP32[$569>>2] = $565;
 $570 = $8;
 $571 = ($570|0)<(0);
 $572 = $571 << 31 >> 31;
 $573 = $23;
 $574 = ($573|0)<(0);
 $575 = $574 << 31 >> 31;
 $576 = (___muldi3(($570|0),($572|0),($573|0),($575|0))|0);
 $577 = tempRet0;
 $578 = $67;
 $579 = $578;
 HEAP32[$579>>2] = $576;
 $580 = (($578) + 4)|0;
 $581 = $580;
 HEAP32[$581>>2] = $577;
 $582 = $8;
 $583 = ($582|0)<(0);
 $584 = $583 << 31 >> 31;
 $585 = $33;
 $586 = ($585|0)<(0);
 $587 = $586 << 31 >> 31;
 $588 = (___muldi3(($582|0),($584|0),($585|0),($587|0))|0);
 $589 = tempRet0;
 $590 = $68;
 $591 = $590;
 HEAP32[$591>>2] = $588;
 $592 = (($590) + 4)|0;
 $593 = $592;
 HEAP32[$593>>2] = $589;
 $594 = $8;
 $595 = ($594|0)<(0);
 $596 = $595 << 31 >> 31;
 $597 = $34;
 $598 = ($597|0)<(0);
 $599 = $598 << 31 >> 31;
 $600 = (___muldi3(($594|0),($596|0),($597|0),($599|0))|0);
 $601 = tempRet0;
 $602 = $69;
 $603 = $602;
 HEAP32[$603>>2] = $600;
 $604 = (($602) + 4)|0;
 $605 = $604;
 HEAP32[$605>>2] = $601;
 $606 = $9;
 $607 = ($606|0)<(0);
 $608 = $607 << 31 >> 31;
 $609 = $16;
 $610 = ($609|0)<(0);
 $611 = $610 << 31 >> 31;
 $612 = (___muldi3(($606|0),($608|0),($609|0),($611|0))|0);
 $613 = tempRet0;
 $614 = $70;
 $615 = $614;
 HEAP32[$615>>2] = $612;
 $616 = (($614) + 4)|0;
 $617 = $616;
 HEAP32[$617>>2] = $613;
 $618 = $36;
 $619 = ($618|0)<(0);
 $620 = $619 << 31 >> 31;
 $621 = $17;
 $622 = ($621|0)<(0);
 $623 = $622 << 31 >> 31;
 $624 = (___muldi3(($618|0),($620|0),($621|0),($623|0))|0);
 $625 = tempRet0;
 $626 = $71;
 $627 = $626;
 HEAP32[$627>>2] = $624;
 $628 = (($626) + 4)|0;
 $629 = $628;
 HEAP32[$629>>2] = $625;
 $630 = $9;
 $631 = ($630|0)<(0);
 $632 = $631 << 31 >> 31;
 $633 = $18;
 $634 = ($633|0)<(0);
 $635 = $634 << 31 >> 31;
 $636 = (___muldi3(($630|0),($632|0),($633|0),($635|0))|0);
 $637 = tempRet0;
 $638 = $72;
 $639 = $638;
 HEAP32[$639>>2] = $636;
 $640 = (($638) + 4)|0;
 $641 = $640;
 HEAP32[$641>>2] = $637;
 $642 = $36;
 $643 = ($642|0)<(0);
 $644 = $643 << 31 >> 31;
 $645 = $19;
 $646 = ($645|0)<(0);
 $647 = $646 << 31 >> 31;
 $648 = (___muldi3(($642|0),($644|0),($645|0),($647|0))|0);
 $649 = tempRet0;
 $650 = $73;
 $651 = $650;
 HEAP32[$651>>2] = $648;
 $652 = (($650) + 4)|0;
 $653 = $652;
 HEAP32[$653>>2] = $649;
 $654 = $9;
 $655 = ($654|0)<(0);
 $656 = $655 << 31 >> 31;
 $657 = $20;
 $658 = ($657|0)<(0);
 $659 = $658 << 31 >> 31;
 $660 = (___muldi3(($654|0),($656|0),($657|0),($659|0))|0);
 $661 = tempRet0;
 $662 = $74;
 $663 = $662;
 HEAP32[$663>>2] = $660;
 $664 = (($662) + 4)|0;
 $665 = $664;
 HEAP32[$665>>2] = $661;
 $666 = $36;
 $667 = ($666|0)<(0);
 $668 = $667 << 31 >> 31;
 $669 = $21;
 $670 = ($669|0)<(0);
 $671 = $670 << 31 >> 31;
 $672 = (___muldi3(($666|0),($668|0),($669|0),($671|0))|0);
 $673 = tempRet0;
 $674 = $75;
 $675 = $674;
 HEAP32[$675>>2] = $672;
 $676 = (($674) + 4)|0;
 $677 = $676;
 HEAP32[$677>>2] = $673;
 $678 = $9;
 $679 = ($678|0)<(0);
 $680 = $679 << 31 >> 31;
 $681 = $22;
 $682 = ($681|0)<(0);
 $683 = $682 << 31 >> 31;
 $684 = (___muldi3(($678|0),($680|0),($681|0),($683|0))|0);
 $685 = tempRet0;
 $686 = $76;
 $687 = $686;
 HEAP32[$687>>2] = $684;
 $688 = (($686) + 4)|0;
 $689 = $688;
 HEAP32[$689>>2] = $685;
 $690 = $36;
 $691 = ($690|0)<(0);
 $692 = $691 << 31 >> 31;
 $693 = $32;
 $694 = ($693|0)<(0);
 $695 = $694 << 31 >> 31;
 $696 = (___muldi3(($690|0),($692|0),($693|0),($695|0))|0);
 $697 = tempRet0;
 $698 = $77;
 $699 = $698;
 HEAP32[$699>>2] = $696;
 $700 = (($698) + 4)|0;
 $701 = $700;
 HEAP32[$701>>2] = $697;
 $702 = $9;
 $703 = ($702|0)<(0);
 $704 = $703 << 31 >> 31;
 $705 = $33;
 $706 = ($705|0)<(0);
 $707 = $706 << 31 >> 31;
 $708 = (___muldi3(($702|0),($704|0),($705|0),($707|0))|0);
 $709 = tempRet0;
 $710 = $78;
 $711 = $710;
 HEAP32[$711>>2] = $708;
 $712 = (($710) + 4)|0;
 $713 = $712;
 HEAP32[$713>>2] = $709;
 $714 = $36;
 $715 = ($714|0)<(0);
 $716 = $715 << 31 >> 31;
 $717 = $34;
 $718 = ($717|0)<(0);
 $719 = $718 << 31 >> 31;
 $720 = (___muldi3(($714|0),($716|0),($717|0),($719|0))|0);
 $721 = tempRet0;
 $722 = $79;
 $723 = $722;
 HEAP32[$723>>2] = $720;
 $724 = (($722) + 4)|0;
 $725 = $724;
 HEAP32[$725>>2] = $721;
 $726 = $10;
 $727 = ($726|0)<(0);
 $728 = $727 << 31 >> 31;
 $729 = $16;
 $730 = ($729|0)<(0);
 $731 = $730 << 31 >> 31;
 $732 = (___muldi3(($726|0),($728|0),($729|0),($731|0))|0);
 $733 = tempRet0;
 $734 = $80;
 $735 = $734;
 HEAP32[$735>>2] = $732;
 $736 = (($734) + 4)|0;
 $737 = $736;
 HEAP32[$737>>2] = $733;
 $738 = $10;
 $739 = ($738|0)<(0);
 $740 = $739 << 31 >> 31;
 $741 = $17;
 $742 = ($741|0)<(0);
 $743 = $742 << 31 >> 31;
 $744 = (___muldi3(($738|0),($740|0),($741|0),($743|0))|0);
 $745 = tempRet0;
 $746 = $81;
 $747 = $746;
 HEAP32[$747>>2] = $744;
 $748 = (($746) + 4)|0;
 $749 = $748;
 HEAP32[$749>>2] = $745;
 $750 = $10;
 $751 = ($750|0)<(0);
 $752 = $751 << 31 >> 31;
 $753 = $18;
 $754 = ($753|0)<(0);
 $755 = $754 << 31 >> 31;
 $756 = (___muldi3(($750|0),($752|0),($753|0),($755|0))|0);
 $757 = tempRet0;
 $758 = $82;
 $759 = $758;
 HEAP32[$759>>2] = $756;
 $760 = (($758) + 4)|0;
 $761 = $760;
 HEAP32[$761>>2] = $757;
 $762 = $10;
 $763 = ($762|0)<(0);
 $764 = $763 << 31 >> 31;
 $765 = $19;
 $766 = ($765|0)<(0);
 $767 = $766 << 31 >> 31;
 $768 = (___muldi3(($762|0),($764|0),($765|0),($767|0))|0);
 $769 = tempRet0;
 $770 = $83;
 $771 = $770;
 HEAP32[$771>>2] = $768;
 $772 = (($770) + 4)|0;
 $773 = $772;
 HEAP32[$773>>2] = $769;
 $774 = $10;
 $775 = ($774|0)<(0);
 $776 = $775 << 31 >> 31;
 $777 = $20;
 $778 = ($777|0)<(0);
 $779 = $778 << 31 >> 31;
 $780 = (___muldi3(($774|0),($776|0),($777|0),($779|0))|0);
 $781 = tempRet0;
 $782 = $84;
 $783 = $782;
 HEAP32[$783>>2] = $780;
 $784 = (($782) + 4)|0;
 $785 = $784;
 HEAP32[$785>>2] = $781;
 $786 = $10;
 $787 = ($786|0)<(0);
 $788 = $787 << 31 >> 31;
 $789 = $21;
 $790 = ($789|0)<(0);
 $791 = $790 << 31 >> 31;
 $792 = (___muldi3(($786|0),($788|0),($789|0),($791|0))|0);
 $793 = tempRet0;
 $794 = $85;
 $795 = $794;
 HEAP32[$795>>2] = $792;
 $796 = (($794) + 4)|0;
 $797 = $796;
 HEAP32[$797>>2] = $793;
 $798 = $10;
 $799 = ($798|0)<(0);
 $800 = $799 << 31 >> 31;
 $801 = $31;
 $802 = ($801|0)<(0);
 $803 = $802 << 31 >> 31;
 $804 = (___muldi3(($798|0),($800|0),($801|0),($803|0))|0);
 $805 = tempRet0;
 $806 = $86;
 $807 = $806;
 HEAP32[$807>>2] = $804;
 $808 = (($806) + 4)|0;
 $809 = $808;
 HEAP32[$809>>2] = $805;
 $810 = $10;
 $811 = ($810|0)<(0);
 $812 = $811 << 31 >> 31;
 $813 = $32;
 $814 = ($813|0)<(0);
 $815 = $814 << 31 >> 31;
 $816 = (___muldi3(($810|0),($812|0),($813|0),($815|0))|0);
 $817 = tempRet0;
 $818 = $87;
 $819 = $818;
 HEAP32[$819>>2] = $816;
 $820 = (($818) + 4)|0;
 $821 = $820;
 HEAP32[$821>>2] = $817;
 $822 = $10;
 $823 = ($822|0)<(0);
 $824 = $823 << 31 >> 31;
 $825 = $33;
 $826 = ($825|0)<(0);
 $827 = $826 << 31 >> 31;
 $828 = (___muldi3(($822|0),($824|0),($825|0),($827|0))|0);
 $829 = tempRet0;
 $830 = $88;
 $831 = $830;
 HEAP32[$831>>2] = $828;
 $832 = (($830) + 4)|0;
 $833 = $832;
 HEAP32[$833>>2] = $829;
 $834 = $10;
 $835 = ($834|0)<(0);
 $836 = $835 << 31 >> 31;
 $837 = $34;
 $838 = ($837|0)<(0);
 $839 = $838 << 31 >> 31;
 $840 = (___muldi3(($834|0),($836|0),($837|0),($839|0))|0);
 $841 = tempRet0;
 $842 = $89;
 $843 = $842;
 HEAP32[$843>>2] = $840;
 $844 = (($842) + 4)|0;
 $845 = $844;
 HEAP32[$845>>2] = $841;
 $846 = $11;
 $847 = ($846|0)<(0);
 $848 = $847 << 31 >> 31;
 $849 = $16;
 $850 = ($849|0)<(0);
 $851 = $850 << 31 >> 31;
 $852 = (___muldi3(($846|0),($848|0),($849|0),($851|0))|0);
 $853 = tempRet0;
 $854 = $90;
 $855 = $854;
 HEAP32[$855>>2] = $852;
 $856 = (($854) + 4)|0;
 $857 = $856;
 HEAP32[$857>>2] = $853;
 $858 = $37;
 $859 = ($858|0)<(0);
 $860 = $859 << 31 >> 31;
 $861 = $17;
 $862 = ($861|0)<(0);
 $863 = $862 << 31 >> 31;
 $864 = (___muldi3(($858|0),($860|0),($861|0),($863|0))|0);
 $865 = tempRet0;
 $866 = $91;
 $867 = $866;
 HEAP32[$867>>2] = $864;
 $868 = (($866) + 4)|0;
 $869 = $868;
 HEAP32[$869>>2] = $865;
 $870 = $11;
 $871 = ($870|0)<(0);
 $872 = $871 << 31 >> 31;
 $873 = $18;
 $874 = ($873|0)<(0);
 $875 = $874 << 31 >> 31;
 $876 = (___muldi3(($870|0),($872|0),($873|0),($875|0))|0);
 $877 = tempRet0;
 $878 = $92;
 $879 = $878;
 HEAP32[$879>>2] = $876;
 $880 = (($878) + 4)|0;
 $881 = $880;
 HEAP32[$881>>2] = $877;
 $882 = $37;
 $883 = ($882|0)<(0);
 $884 = $883 << 31 >> 31;
 $885 = $19;
 $886 = ($885|0)<(0);
 $887 = $886 << 31 >> 31;
 $888 = (___muldi3(($882|0),($884|0),($885|0),($887|0))|0);
 $889 = tempRet0;
 $890 = $93;
 $891 = $890;
 HEAP32[$891>>2] = $888;
 $892 = (($890) + 4)|0;
 $893 = $892;
 HEAP32[$893>>2] = $889;
 $894 = $11;
 $895 = ($894|0)<(0);
 $896 = $895 << 31 >> 31;
 $897 = $20;
 $898 = ($897|0)<(0);
 $899 = $898 << 31 >> 31;
 $900 = (___muldi3(($894|0),($896|0),($897|0),($899|0))|0);
 $901 = tempRet0;
 $902 = $94;
 $903 = $902;
 HEAP32[$903>>2] = $900;
 $904 = (($902) + 4)|0;
 $905 = $904;
 HEAP32[$905>>2] = $901;
 $906 = $37;
 $907 = ($906|0)<(0);
 $908 = $907 << 31 >> 31;
 $909 = $30;
 $910 = ($909|0)<(0);
 $911 = $910 << 31 >> 31;
 $912 = (___muldi3(($906|0),($908|0),($909|0),($911|0))|0);
 $913 = tempRet0;
 $914 = $95;
 $915 = $914;
 HEAP32[$915>>2] = $912;
 $916 = (($914) + 4)|0;
 $917 = $916;
 HEAP32[$917>>2] = $913;
 $918 = $11;
 $919 = ($918|0)<(0);
 $920 = $919 << 31 >> 31;
 $921 = $31;
 $922 = ($921|0)<(0);
 $923 = $922 << 31 >> 31;
 $924 = (___muldi3(($918|0),($920|0),($921|0),($923|0))|0);
 $925 = tempRet0;
 $926 = $96;
 $927 = $926;
 HEAP32[$927>>2] = $924;
 $928 = (($926) + 4)|0;
 $929 = $928;
 HEAP32[$929>>2] = $925;
 $930 = $37;
 $931 = ($930|0)<(0);
 $932 = $931 << 31 >> 31;
 $933 = $32;
 $934 = ($933|0)<(0);
 $935 = $934 << 31 >> 31;
 $936 = (___muldi3(($930|0),($932|0),($933|0),($935|0))|0);
 $937 = tempRet0;
 $938 = $97;
 $939 = $938;
 HEAP32[$939>>2] = $936;
 $940 = (($938) + 4)|0;
 $941 = $940;
 HEAP32[$941>>2] = $937;
 $942 = $11;
 $943 = ($942|0)<(0);
 $944 = $943 << 31 >> 31;
 $945 = $33;
 $946 = ($945|0)<(0);
 $947 = $946 << 31 >> 31;
 $948 = (___muldi3(($942|0),($944|0),($945|0),($947|0))|0);
 $949 = tempRet0;
 $950 = $98;
 $951 = $950;
 HEAP32[$951>>2] = $948;
 $952 = (($950) + 4)|0;
 $953 = $952;
 HEAP32[$953>>2] = $949;
 $954 = $37;
 $955 = ($954|0)<(0);
 $956 = $955 << 31 >> 31;
 $957 = $34;
 $958 = ($957|0)<(0);
 $959 = $958 << 31 >> 31;
 $960 = (___muldi3(($954|0),($956|0),($957|0),($959|0))|0);
 $961 = tempRet0;
 $962 = $99;
 $963 = $962;
 HEAP32[$963>>2] = $960;
 $964 = (($962) + 4)|0;
 $965 = $964;
 HEAP32[$965>>2] = $961;
 $966 = $12;
 $967 = ($966|0)<(0);
 $968 = $967 << 31 >> 31;
 $969 = $16;
 $970 = ($969|0)<(0);
 $971 = $970 << 31 >> 31;
 $972 = (___muldi3(($966|0),($968|0),($969|0),($971|0))|0);
 $973 = tempRet0;
 $974 = $100;
 $975 = $974;
 HEAP32[$975>>2] = $972;
 $976 = (($974) + 4)|0;
 $977 = $976;
 HEAP32[$977>>2] = $973;
 $978 = $12;
 $979 = ($978|0)<(0);
 $980 = $979 << 31 >> 31;
 $981 = $17;
 $982 = ($981|0)<(0);
 $983 = $982 << 31 >> 31;
 $984 = (___muldi3(($978|0),($980|0),($981|0),($983|0))|0);
 $985 = tempRet0;
 $986 = $101;
 $987 = $986;
 HEAP32[$987>>2] = $984;
 $988 = (($986) + 4)|0;
 $989 = $988;
 HEAP32[$989>>2] = $985;
 $990 = $12;
 $991 = ($990|0)<(0);
 $992 = $991 << 31 >> 31;
 $993 = $18;
 $994 = ($993|0)<(0);
 $995 = $994 << 31 >> 31;
 $996 = (___muldi3(($990|0),($992|0),($993|0),($995|0))|0);
 $997 = tempRet0;
 $998 = $102;
 $999 = $998;
 HEAP32[$999>>2] = $996;
 $1000 = (($998) + 4)|0;
 $1001 = $1000;
 HEAP32[$1001>>2] = $997;
 $1002 = $12;
 $1003 = ($1002|0)<(0);
 $1004 = $1003 << 31 >> 31;
 $1005 = $19;
 $1006 = ($1005|0)<(0);
 $1007 = $1006 << 31 >> 31;
 $1008 = (___muldi3(($1002|0),($1004|0),($1005|0),($1007|0))|0);
 $1009 = tempRet0;
 $1010 = $103;
 $1011 = $1010;
 HEAP32[$1011>>2] = $1008;
 $1012 = (($1010) + 4)|0;
 $1013 = $1012;
 HEAP32[$1013>>2] = $1009;
 $1014 = $12;
 $1015 = ($1014|0)<(0);
 $1016 = $1015 << 31 >> 31;
 $1017 = $29;
 $1018 = ($1017|0)<(0);
 $1019 = $1018 << 31 >> 31;
 $1020 = (___muldi3(($1014|0),($1016|0),($1017|0),($1019|0))|0);
 $1021 = tempRet0;
 $1022 = $104;
 $1023 = $1022;
 HEAP32[$1023>>2] = $1020;
 $1024 = (($1022) + 4)|0;
 $1025 = $1024;
 HEAP32[$1025>>2] = $1021;
 $1026 = $12;
 $1027 = ($1026|0)<(0);
 $1028 = $1027 << 31 >> 31;
 $1029 = $30;
 $1030 = ($1029|0)<(0);
 $1031 = $1030 << 31 >> 31;
 $1032 = (___muldi3(($1026|0),($1028|0),($1029|0),($1031|0))|0);
 $1033 = tempRet0;
 $1034 = $105;
 $1035 = $1034;
 HEAP32[$1035>>2] = $1032;
 $1036 = (($1034) + 4)|0;
 $1037 = $1036;
 HEAP32[$1037>>2] = $1033;
 $1038 = $12;
 $1039 = ($1038|0)<(0);
 $1040 = $1039 << 31 >> 31;
 $1041 = $31;
 $1042 = ($1041|0)<(0);
 $1043 = $1042 << 31 >> 31;
 $1044 = (___muldi3(($1038|0),($1040|0),($1041|0),($1043|0))|0);
 $1045 = tempRet0;
 $1046 = $106;
 $1047 = $1046;
 HEAP32[$1047>>2] = $1044;
 $1048 = (($1046) + 4)|0;
 $1049 = $1048;
 HEAP32[$1049>>2] = $1045;
 $1050 = $12;
 $1051 = ($1050|0)<(0);
 $1052 = $1051 << 31 >> 31;
 $1053 = $32;
 $1054 = ($1053|0)<(0);
 $1055 = $1054 << 31 >> 31;
 $1056 = (___muldi3(($1050|0),($1052|0),($1053|0),($1055|0))|0);
 $1057 = tempRet0;
 $1058 = $107;
 $1059 = $1058;
 HEAP32[$1059>>2] = $1056;
 $1060 = (($1058) + 4)|0;
 $1061 = $1060;
 HEAP32[$1061>>2] = $1057;
 $1062 = $12;
 $1063 = ($1062|0)<(0);
 $1064 = $1063 << 31 >> 31;
 $1065 = $33;
 $1066 = ($1065|0)<(0);
 $1067 = $1066 << 31 >> 31;
 $1068 = (___muldi3(($1062|0),($1064|0),($1065|0),($1067|0))|0);
 $1069 = tempRet0;
 $1070 = $108;
 $1071 = $1070;
 HEAP32[$1071>>2] = $1068;
 $1072 = (($1070) + 4)|0;
 $1073 = $1072;
 HEAP32[$1073>>2] = $1069;
 $1074 = $12;
 $1075 = ($1074|0)<(0);
 $1076 = $1075 << 31 >> 31;
 $1077 = $34;
 $1078 = ($1077|0)<(0);
 $1079 = $1078 << 31 >> 31;
 $1080 = (___muldi3(($1074|0),($1076|0),($1077|0),($1079|0))|0);
 $1081 = tempRet0;
 $1082 = $109;
 $1083 = $1082;
 HEAP32[$1083>>2] = $1080;
 $1084 = (($1082) + 4)|0;
 $1085 = $1084;
 HEAP32[$1085>>2] = $1081;
 $1086 = $13;
 $1087 = ($1086|0)<(0);
 $1088 = $1087 << 31 >> 31;
 $1089 = $16;
 $1090 = ($1089|0)<(0);
 $1091 = $1090 << 31 >> 31;
 $1092 = (___muldi3(($1086|0),($1088|0),($1089|0),($1091|0))|0);
 $1093 = tempRet0;
 $1094 = $110;
 $1095 = $1094;
 HEAP32[$1095>>2] = $1092;
 $1096 = (($1094) + 4)|0;
 $1097 = $1096;
 HEAP32[$1097>>2] = $1093;
 $1098 = $38;
 $1099 = ($1098|0)<(0);
 $1100 = $1099 << 31 >> 31;
 $1101 = $17;
 $1102 = ($1101|0)<(0);
 $1103 = $1102 << 31 >> 31;
 $1104 = (___muldi3(($1098|0),($1100|0),($1101|0),($1103|0))|0);
 $1105 = tempRet0;
 $1106 = $111;
 $1107 = $1106;
 HEAP32[$1107>>2] = $1104;
 $1108 = (($1106) + 4)|0;
 $1109 = $1108;
 HEAP32[$1109>>2] = $1105;
 $1110 = $13;
 $1111 = ($1110|0)<(0);
 $1112 = $1111 << 31 >> 31;
 $1113 = $18;
 $1114 = ($1113|0)<(0);
 $1115 = $1114 << 31 >> 31;
 $1116 = (___muldi3(($1110|0),($1112|0),($1113|0),($1115|0))|0);
 $1117 = tempRet0;
 $1118 = $112;
 $1119 = $1118;
 HEAP32[$1119>>2] = $1116;
 $1120 = (($1118) + 4)|0;
 $1121 = $1120;
 HEAP32[$1121>>2] = $1117;
 $1122 = $38;
 $1123 = ($1122|0)<(0);
 $1124 = $1123 << 31 >> 31;
 $1125 = $28;
 $1126 = ($1125|0)<(0);
 $1127 = $1126 << 31 >> 31;
 $1128 = (___muldi3(($1122|0),($1124|0),($1125|0),($1127|0))|0);
 $1129 = tempRet0;
 $1130 = $113;
 $1131 = $1130;
 HEAP32[$1131>>2] = $1128;
 $1132 = (($1130) + 4)|0;
 $1133 = $1132;
 HEAP32[$1133>>2] = $1129;
 $1134 = $13;
 $1135 = ($1134|0)<(0);
 $1136 = $1135 << 31 >> 31;
 $1137 = $29;
 $1138 = ($1137|0)<(0);
 $1139 = $1138 << 31 >> 31;
 $1140 = (___muldi3(($1134|0),($1136|0),($1137|0),($1139|0))|0);
 $1141 = tempRet0;
 $1142 = $114;
 $1143 = $1142;
 HEAP32[$1143>>2] = $1140;
 $1144 = (($1142) + 4)|0;
 $1145 = $1144;
 HEAP32[$1145>>2] = $1141;
 $1146 = $38;
 $1147 = ($1146|0)<(0);
 $1148 = $1147 << 31 >> 31;
 $1149 = $30;
 $1150 = ($1149|0)<(0);
 $1151 = $1150 << 31 >> 31;
 $1152 = (___muldi3(($1146|0),($1148|0),($1149|0),($1151|0))|0);
 $1153 = tempRet0;
 $1154 = $115;
 $1155 = $1154;
 HEAP32[$1155>>2] = $1152;
 $1156 = (($1154) + 4)|0;
 $1157 = $1156;
 HEAP32[$1157>>2] = $1153;
 $1158 = $13;
 $1159 = ($1158|0)<(0);
 $1160 = $1159 << 31 >> 31;
 $1161 = $31;
 $1162 = ($1161|0)<(0);
 $1163 = $1162 << 31 >> 31;
 $1164 = (___muldi3(($1158|0),($1160|0),($1161|0),($1163|0))|0);
 $1165 = tempRet0;
 $1166 = $116;
 $1167 = $1166;
 HEAP32[$1167>>2] = $1164;
 $1168 = (($1166) + 4)|0;
 $1169 = $1168;
 HEAP32[$1169>>2] = $1165;
 $1170 = $38;
 $1171 = ($1170|0)<(0);
 $1172 = $1171 << 31 >> 31;
 $1173 = $32;
 $1174 = ($1173|0)<(0);
 $1175 = $1174 << 31 >> 31;
 $1176 = (___muldi3(($1170|0),($1172|0),($1173|0),($1175|0))|0);
 $1177 = tempRet0;
 $1178 = $117;
 $1179 = $1178;
 HEAP32[$1179>>2] = $1176;
 $1180 = (($1178) + 4)|0;
 $1181 = $1180;
 HEAP32[$1181>>2] = $1177;
 $1182 = $13;
 $1183 = ($1182|0)<(0);
 $1184 = $1183 << 31 >> 31;
 $1185 = $33;
 $1186 = ($1185|0)<(0);
 $1187 = $1186 << 31 >> 31;
 $1188 = (___muldi3(($1182|0),($1184|0),($1185|0),($1187|0))|0);
 $1189 = tempRet0;
 $1190 = $118;
 $1191 = $1190;
 HEAP32[$1191>>2] = $1188;
 $1192 = (($1190) + 4)|0;
 $1193 = $1192;
 HEAP32[$1193>>2] = $1189;
 $1194 = $38;
 $1195 = ($1194|0)<(0);
 $1196 = $1195 << 31 >> 31;
 $1197 = $34;
 $1198 = ($1197|0)<(0);
 $1199 = $1198 << 31 >> 31;
 $1200 = (___muldi3(($1194|0),($1196|0),($1197|0),($1199|0))|0);
 $1201 = tempRet0;
 $1202 = $119;
 $1203 = $1202;
 HEAP32[$1203>>2] = $1200;
 $1204 = (($1202) + 4)|0;
 $1205 = $1204;
 HEAP32[$1205>>2] = $1201;
 $1206 = $14;
 $1207 = ($1206|0)<(0);
 $1208 = $1207 << 31 >> 31;
 $1209 = $16;
 $1210 = ($1209|0)<(0);
 $1211 = $1210 << 31 >> 31;
 $1212 = (___muldi3(($1206|0),($1208|0),($1209|0),($1211|0))|0);
 $1213 = tempRet0;
 $1214 = $120;
 $1215 = $1214;
 HEAP32[$1215>>2] = $1212;
 $1216 = (($1214) + 4)|0;
 $1217 = $1216;
 HEAP32[$1217>>2] = $1213;
 $1218 = $14;
 $1219 = ($1218|0)<(0);
 $1220 = $1219 << 31 >> 31;
 $1221 = $17;
 $1222 = ($1221|0)<(0);
 $1223 = $1222 << 31 >> 31;
 $1224 = (___muldi3(($1218|0),($1220|0),($1221|0),($1223|0))|0);
 $1225 = tempRet0;
 $1226 = $121;
 $1227 = $1226;
 HEAP32[$1227>>2] = $1224;
 $1228 = (($1226) + 4)|0;
 $1229 = $1228;
 HEAP32[$1229>>2] = $1225;
 $1230 = $14;
 $1231 = ($1230|0)<(0);
 $1232 = $1231 << 31 >> 31;
 $1233 = $27;
 $1234 = ($1233|0)<(0);
 $1235 = $1234 << 31 >> 31;
 $1236 = (___muldi3(($1230|0),($1232|0),($1233|0),($1235|0))|0);
 $1237 = tempRet0;
 $1238 = $122;
 $1239 = $1238;
 HEAP32[$1239>>2] = $1236;
 $1240 = (($1238) + 4)|0;
 $1241 = $1240;
 HEAP32[$1241>>2] = $1237;
 $1242 = $14;
 $1243 = ($1242|0)<(0);
 $1244 = $1243 << 31 >> 31;
 $1245 = $28;
 $1246 = ($1245|0)<(0);
 $1247 = $1246 << 31 >> 31;
 $1248 = (___muldi3(($1242|0),($1244|0),($1245|0),($1247|0))|0);
 $1249 = tempRet0;
 $1250 = $123;
 $1251 = $1250;
 HEAP32[$1251>>2] = $1248;
 $1252 = (($1250) + 4)|0;
 $1253 = $1252;
 HEAP32[$1253>>2] = $1249;
 $1254 = $14;
 $1255 = ($1254|0)<(0);
 $1256 = $1255 << 31 >> 31;
 $1257 = $29;
 $1258 = ($1257|0)<(0);
 $1259 = $1258 << 31 >> 31;
 $1260 = (___muldi3(($1254|0),($1256|0),($1257|0),($1259|0))|0);
 $1261 = tempRet0;
 $1262 = $124;
 $1263 = $1262;
 HEAP32[$1263>>2] = $1260;
 $1264 = (($1262) + 4)|0;
 $1265 = $1264;
 HEAP32[$1265>>2] = $1261;
 $1266 = $14;
 $1267 = ($1266|0)<(0);
 $1268 = $1267 << 31 >> 31;
 $1269 = $30;
 $1270 = ($1269|0)<(0);
 $1271 = $1270 << 31 >> 31;
 $1272 = (___muldi3(($1266|0),($1268|0),($1269|0),($1271|0))|0);
 $1273 = tempRet0;
 $1274 = $125;
 $1275 = $1274;
 HEAP32[$1275>>2] = $1272;
 $1276 = (($1274) + 4)|0;
 $1277 = $1276;
 HEAP32[$1277>>2] = $1273;
 $1278 = $14;
 $1279 = ($1278|0)<(0);
 $1280 = $1279 << 31 >> 31;
 $1281 = $31;
 $1282 = ($1281|0)<(0);
 $1283 = $1282 << 31 >> 31;
 $1284 = (___muldi3(($1278|0),($1280|0),($1281|0),($1283|0))|0);
 $1285 = tempRet0;
 $1286 = $126;
 $1287 = $1286;
 HEAP32[$1287>>2] = $1284;
 $1288 = (($1286) + 4)|0;
 $1289 = $1288;
 HEAP32[$1289>>2] = $1285;
 $1290 = $14;
 $1291 = ($1290|0)<(0);
 $1292 = $1291 << 31 >> 31;
 $1293 = $32;
 $1294 = ($1293|0)<(0);
 $1295 = $1294 << 31 >> 31;
 $1296 = (___muldi3(($1290|0),($1292|0),($1293|0),($1295|0))|0);
 $1297 = tempRet0;
 $1298 = $127;
 $1299 = $1298;
 HEAP32[$1299>>2] = $1296;
 $1300 = (($1298) + 4)|0;
 $1301 = $1300;
 HEAP32[$1301>>2] = $1297;
 $1302 = $14;
 $1303 = ($1302|0)<(0);
 $1304 = $1303 << 31 >> 31;
 $1305 = $33;
 $1306 = ($1305|0)<(0);
 $1307 = $1306 << 31 >> 31;
 $1308 = (___muldi3(($1302|0),($1304|0),($1305|0),($1307|0))|0);
 $1309 = tempRet0;
 $1310 = $128;
 $1311 = $1310;
 HEAP32[$1311>>2] = $1308;
 $1312 = (($1310) + 4)|0;
 $1313 = $1312;
 HEAP32[$1313>>2] = $1309;
 $1314 = $14;
 $1315 = ($1314|0)<(0);
 $1316 = $1315 << 31 >> 31;
 $1317 = $34;
 $1318 = ($1317|0)<(0);
 $1319 = $1318 << 31 >> 31;
 $1320 = (___muldi3(($1314|0),($1316|0),($1317|0),($1319|0))|0);
 $1321 = tempRet0;
 $1322 = $129;
 $1323 = $1322;
 HEAP32[$1323>>2] = $1320;
 $1324 = (($1322) + 4)|0;
 $1325 = $1324;
 HEAP32[$1325>>2] = $1321;
 $1326 = $15;
 $1327 = ($1326|0)<(0);
 $1328 = $1327 << 31 >> 31;
 $1329 = $16;
 $1330 = ($1329|0)<(0);
 $1331 = $1330 << 31 >> 31;
 $1332 = (___muldi3(($1326|0),($1328|0),($1329|0),($1331|0))|0);
 $1333 = tempRet0;
 $1334 = $130;
 $1335 = $1334;
 HEAP32[$1335>>2] = $1332;
 $1336 = (($1334) + 4)|0;
 $1337 = $1336;
 HEAP32[$1337>>2] = $1333;
 $1338 = $39;
 $1339 = ($1338|0)<(0);
 $1340 = $1339 << 31 >> 31;
 $1341 = $26;
 $1342 = ($1341|0)<(0);
 $1343 = $1342 << 31 >> 31;
 $1344 = (___muldi3(($1338|0),($1340|0),($1341|0),($1343|0))|0);
 $1345 = tempRet0;
 $1346 = $131;
 $1347 = $1346;
 HEAP32[$1347>>2] = $1344;
 $1348 = (($1346) + 4)|0;
 $1349 = $1348;
 HEAP32[$1349>>2] = $1345;
 $1350 = $15;
 $1351 = ($1350|0)<(0);
 $1352 = $1351 << 31 >> 31;
 $1353 = $27;
 $1354 = ($1353|0)<(0);
 $1355 = $1354 << 31 >> 31;
 $1356 = (___muldi3(($1350|0),($1352|0),($1353|0),($1355|0))|0);
 $1357 = tempRet0;
 $1358 = $132;
 $1359 = $1358;
 HEAP32[$1359>>2] = $1356;
 $1360 = (($1358) + 4)|0;
 $1361 = $1360;
 HEAP32[$1361>>2] = $1357;
 $1362 = $39;
 $1363 = ($1362|0)<(0);
 $1364 = $1363 << 31 >> 31;
 $1365 = $28;
 $1366 = ($1365|0)<(0);
 $1367 = $1366 << 31 >> 31;
 $1368 = (___muldi3(($1362|0),($1364|0),($1365|0),($1367|0))|0);
 $1369 = tempRet0;
 $1370 = $133;
 $1371 = $1370;
 HEAP32[$1371>>2] = $1368;
 $1372 = (($1370) + 4)|0;
 $1373 = $1372;
 HEAP32[$1373>>2] = $1369;
 $1374 = $15;
 $1375 = ($1374|0)<(0);
 $1376 = $1375 << 31 >> 31;
 $1377 = $29;
 $1378 = ($1377|0)<(0);
 $1379 = $1378 << 31 >> 31;
 $1380 = (___muldi3(($1374|0),($1376|0),($1377|0),($1379|0))|0);
 $1381 = tempRet0;
 $1382 = $134;
 $1383 = $1382;
 HEAP32[$1383>>2] = $1380;
 $1384 = (($1382) + 4)|0;
 $1385 = $1384;
 HEAP32[$1385>>2] = $1381;
 $1386 = $39;
 $1387 = ($1386|0)<(0);
 $1388 = $1387 << 31 >> 31;
 $1389 = $30;
 $1390 = ($1389|0)<(0);
 $1391 = $1390 << 31 >> 31;
 $1392 = (___muldi3(($1386|0),($1388|0),($1389|0),($1391|0))|0);
 $1393 = tempRet0;
 $1394 = $135;
 $1395 = $1394;
 HEAP32[$1395>>2] = $1392;
 $1396 = (($1394) + 4)|0;
 $1397 = $1396;
 HEAP32[$1397>>2] = $1393;
 $1398 = $15;
 $1399 = ($1398|0)<(0);
 $1400 = $1399 << 31 >> 31;
 $1401 = $31;
 $1402 = ($1401|0)<(0);
 $1403 = $1402 << 31 >> 31;
 $1404 = (___muldi3(($1398|0),($1400|0),($1401|0),($1403|0))|0);
 $1405 = tempRet0;
 $1406 = $136;
 $1407 = $1406;
 HEAP32[$1407>>2] = $1404;
 $1408 = (($1406) + 4)|0;
 $1409 = $1408;
 HEAP32[$1409>>2] = $1405;
 $1410 = $39;
 $1411 = ($1410|0)<(0);
 $1412 = $1411 << 31 >> 31;
 $1413 = $32;
 $1414 = ($1413|0)<(0);
 $1415 = $1414 << 31 >> 31;
 $1416 = (___muldi3(($1410|0),($1412|0),($1413|0),($1415|0))|0);
 $1417 = tempRet0;
 $1418 = $137;
 $1419 = $1418;
 HEAP32[$1419>>2] = $1416;
 $1420 = (($1418) + 4)|0;
 $1421 = $1420;
 HEAP32[$1421>>2] = $1417;
 $1422 = $15;
 $1423 = ($1422|0)<(0);
 $1424 = $1423 << 31 >> 31;
 $1425 = $33;
 $1426 = ($1425|0)<(0);
 $1427 = $1426 << 31 >> 31;
 $1428 = (___muldi3(($1422|0),($1424|0),($1425|0),($1427|0))|0);
 $1429 = tempRet0;
 $1430 = $138;
 $1431 = $1430;
 HEAP32[$1431>>2] = $1428;
 $1432 = (($1430) + 4)|0;
 $1433 = $1432;
 HEAP32[$1433>>2] = $1429;
 $1434 = $39;
 $1435 = ($1434|0)<(0);
 $1436 = $1435 << 31 >> 31;
 $1437 = $34;
 $1438 = ($1437|0)<(0);
 $1439 = $1438 << 31 >> 31;
 $1440 = (___muldi3(($1434|0),($1436|0),($1437|0),($1439|0))|0);
 $1441 = tempRet0;
 $1442 = $139;
 $1443 = $1442;
 HEAP32[$1443>>2] = $1440;
 $1444 = (($1442) + 4)|0;
 $1445 = $1444;
 HEAP32[$1445>>2] = $1441;
 $1446 = $40;
 $1447 = $1446;
 $1448 = HEAP32[$1447>>2]|0;
 $1449 = (($1446) + 4)|0;
 $1450 = $1449;
 $1451 = HEAP32[$1450>>2]|0;
 $1452 = $59;
 $1453 = $1452;
 $1454 = HEAP32[$1453>>2]|0;
 $1455 = (($1452) + 4)|0;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (_i64Add(($1448|0),($1451|0),($1454|0),($1457|0))|0);
 $1459 = tempRet0;
 $1460 = $68;
 $1461 = $1460;
 $1462 = HEAP32[$1461>>2]|0;
 $1463 = (($1460) + 4)|0;
 $1464 = $1463;
 $1465 = HEAP32[$1464>>2]|0;
 $1466 = (_i64Add(($1458|0),($1459|0),($1462|0),($1465|0))|0);
 $1467 = tempRet0;
 $1468 = $77;
 $1469 = $1468;
 $1470 = HEAP32[$1469>>2]|0;
 $1471 = (($1468) + 4)|0;
 $1472 = $1471;
 $1473 = HEAP32[$1472>>2]|0;
 $1474 = (_i64Add(($1466|0),($1467|0),($1470|0),($1473|0))|0);
 $1475 = tempRet0;
 $1476 = $86;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = (($1476) + 4)|0;
 $1480 = $1479;
 $1481 = HEAP32[$1480>>2]|0;
 $1482 = (_i64Add(($1474|0),($1475|0),($1478|0),($1481|0))|0);
 $1483 = tempRet0;
 $1484 = $95;
 $1485 = $1484;
 $1486 = HEAP32[$1485>>2]|0;
 $1487 = (($1484) + 4)|0;
 $1488 = $1487;
 $1489 = HEAP32[$1488>>2]|0;
 $1490 = (_i64Add(($1482|0),($1483|0),($1486|0),($1489|0))|0);
 $1491 = tempRet0;
 $1492 = $104;
 $1493 = $1492;
 $1494 = HEAP32[$1493>>2]|0;
 $1495 = (($1492) + 4)|0;
 $1496 = $1495;
 $1497 = HEAP32[$1496>>2]|0;
 $1498 = (_i64Add(($1490|0),($1491|0),($1494|0),($1497|0))|0);
 $1499 = tempRet0;
 $1500 = $113;
 $1501 = $1500;
 $1502 = HEAP32[$1501>>2]|0;
 $1503 = (($1500) + 4)|0;
 $1504 = $1503;
 $1505 = HEAP32[$1504>>2]|0;
 $1506 = (_i64Add(($1498|0),($1499|0),($1502|0),($1505|0))|0);
 $1507 = tempRet0;
 $1508 = $122;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (($1508) + 4)|0;
 $1512 = $1511;
 $1513 = HEAP32[$1512>>2]|0;
 $1514 = (_i64Add(($1506|0),($1507|0),($1510|0),($1513|0))|0);
 $1515 = tempRet0;
 $1516 = $131;
 $1517 = $1516;
 $1518 = HEAP32[$1517>>2]|0;
 $1519 = (($1516) + 4)|0;
 $1520 = $1519;
 $1521 = HEAP32[$1520>>2]|0;
 $1522 = (_i64Add(($1514|0),($1515|0),($1518|0),($1521|0))|0);
 $1523 = tempRet0;
 $1524 = $140;
 $1525 = $1524;
 HEAP32[$1525>>2] = $1522;
 $1526 = (($1524) + 4)|0;
 $1527 = $1526;
 HEAP32[$1527>>2] = $1523;
 $1528 = $41;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (($1528) + 4)|0;
 $1532 = $1531;
 $1533 = HEAP32[$1532>>2]|0;
 $1534 = $50;
 $1535 = $1534;
 $1536 = HEAP32[$1535>>2]|0;
 $1537 = (($1534) + 4)|0;
 $1538 = $1537;
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = (_i64Add(($1530|0),($1533|0),($1536|0),($1539|0))|0);
 $1541 = tempRet0;
 $1542 = $69;
 $1543 = $1542;
 $1544 = HEAP32[$1543>>2]|0;
 $1545 = (($1542) + 4)|0;
 $1546 = $1545;
 $1547 = HEAP32[$1546>>2]|0;
 $1548 = (_i64Add(($1540|0),($1541|0),($1544|0),($1547|0))|0);
 $1549 = tempRet0;
 $1550 = $78;
 $1551 = $1550;
 $1552 = HEAP32[$1551>>2]|0;
 $1553 = (($1550) + 4)|0;
 $1554 = $1553;
 $1555 = HEAP32[$1554>>2]|0;
 $1556 = (_i64Add(($1548|0),($1549|0),($1552|0),($1555|0))|0);
 $1557 = tempRet0;
 $1558 = $87;
 $1559 = $1558;
 $1560 = HEAP32[$1559>>2]|0;
 $1561 = (($1558) + 4)|0;
 $1562 = $1561;
 $1563 = HEAP32[$1562>>2]|0;
 $1564 = (_i64Add(($1556|0),($1557|0),($1560|0),($1563|0))|0);
 $1565 = tempRet0;
 $1566 = $96;
 $1567 = $1566;
 $1568 = HEAP32[$1567>>2]|0;
 $1569 = (($1566) + 4)|0;
 $1570 = $1569;
 $1571 = HEAP32[$1570>>2]|0;
 $1572 = (_i64Add(($1564|0),($1565|0),($1568|0),($1571|0))|0);
 $1573 = tempRet0;
 $1574 = $105;
 $1575 = $1574;
 $1576 = HEAP32[$1575>>2]|0;
 $1577 = (($1574) + 4)|0;
 $1578 = $1577;
 $1579 = HEAP32[$1578>>2]|0;
 $1580 = (_i64Add(($1572|0),($1573|0),($1576|0),($1579|0))|0);
 $1581 = tempRet0;
 $1582 = $114;
 $1583 = $1582;
 $1584 = HEAP32[$1583>>2]|0;
 $1585 = (($1582) + 4)|0;
 $1586 = $1585;
 $1587 = HEAP32[$1586>>2]|0;
 $1588 = (_i64Add(($1580|0),($1581|0),($1584|0),($1587|0))|0);
 $1589 = tempRet0;
 $1590 = $123;
 $1591 = $1590;
 $1592 = HEAP32[$1591>>2]|0;
 $1593 = (($1590) + 4)|0;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (_i64Add(($1588|0),($1589|0),($1592|0),($1595|0))|0);
 $1597 = tempRet0;
 $1598 = $132;
 $1599 = $1598;
 $1600 = HEAP32[$1599>>2]|0;
 $1601 = (($1598) + 4)|0;
 $1602 = $1601;
 $1603 = HEAP32[$1602>>2]|0;
 $1604 = (_i64Add(($1596|0),($1597|0),($1600|0),($1603|0))|0);
 $1605 = tempRet0;
 $1606 = $141;
 $1607 = $1606;
 HEAP32[$1607>>2] = $1604;
 $1608 = (($1606) + 4)|0;
 $1609 = $1608;
 HEAP32[$1609>>2] = $1605;
 $1610 = $42;
 $1611 = $1610;
 $1612 = HEAP32[$1611>>2]|0;
 $1613 = (($1610) + 4)|0;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = $51;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (($1616) + 4)|0;
 $1620 = $1619;
 $1621 = HEAP32[$1620>>2]|0;
 $1622 = (_i64Add(($1612|0),($1615|0),($1618|0),($1621|0))|0);
 $1623 = tempRet0;
 $1624 = $60;
 $1625 = $1624;
 $1626 = HEAP32[$1625>>2]|0;
 $1627 = (($1624) + 4)|0;
 $1628 = $1627;
 $1629 = HEAP32[$1628>>2]|0;
 $1630 = (_i64Add(($1622|0),($1623|0),($1626|0),($1629|0))|0);
 $1631 = tempRet0;
 $1632 = $79;
 $1633 = $1632;
 $1634 = HEAP32[$1633>>2]|0;
 $1635 = (($1632) + 4)|0;
 $1636 = $1635;
 $1637 = HEAP32[$1636>>2]|0;
 $1638 = (_i64Add(($1630|0),($1631|0),($1634|0),($1637|0))|0);
 $1639 = tempRet0;
 $1640 = $88;
 $1641 = $1640;
 $1642 = HEAP32[$1641>>2]|0;
 $1643 = (($1640) + 4)|0;
 $1644 = $1643;
 $1645 = HEAP32[$1644>>2]|0;
 $1646 = (_i64Add(($1638|0),($1639|0),($1642|0),($1645|0))|0);
 $1647 = tempRet0;
 $1648 = $97;
 $1649 = $1648;
 $1650 = HEAP32[$1649>>2]|0;
 $1651 = (($1648) + 4)|0;
 $1652 = $1651;
 $1653 = HEAP32[$1652>>2]|0;
 $1654 = (_i64Add(($1646|0),($1647|0),($1650|0),($1653|0))|0);
 $1655 = tempRet0;
 $1656 = $106;
 $1657 = $1656;
 $1658 = HEAP32[$1657>>2]|0;
 $1659 = (($1656) + 4)|0;
 $1660 = $1659;
 $1661 = HEAP32[$1660>>2]|0;
 $1662 = (_i64Add(($1654|0),($1655|0),($1658|0),($1661|0))|0);
 $1663 = tempRet0;
 $1664 = $115;
 $1665 = $1664;
 $1666 = HEAP32[$1665>>2]|0;
 $1667 = (($1664) + 4)|0;
 $1668 = $1667;
 $1669 = HEAP32[$1668>>2]|0;
 $1670 = (_i64Add(($1662|0),($1663|0),($1666|0),($1669|0))|0);
 $1671 = tempRet0;
 $1672 = $124;
 $1673 = $1672;
 $1674 = HEAP32[$1673>>2]|0;
 $1675 = (($1672) + 4)|0;
 $1676 = $1675;
 $1677 = HEAP32[$1676>>2]|0;
 $1678 = (_i64Add(($1670|0),($1671|0),($1674|0),($1677|0))|0);
 $1679 = tempRet0;
 $1680 = $133;
 $1681 = $1680;
 $1682 = HEAP32[$1681>>2]|0;
 $1683 = (($1680) + 4)|0;
 $1684 = $1683;
 $1685 = HEAP32[$1684>>2]|0;
 $1686 = (_i64Add(($1678|0),($1679|0),($1682|0),($1685|0))|0);
 $1687 = tempRet0;
 $1688 = $142;
 $1689 = $1688;
 HEAP32[$1689>>2] = $1686;
 $1690 = (($1688) + 4)|0;
 $1691 = $1690;
 HEAP32[$1691>>2] = $1687;
 $1692 = $43;
 $1693 = $1692;
 $1694 = HEAP32[$1693>>2]|0;
 $1695 = (($1692) + 4)|0;
 $1696 = $1695;
 $1697 = HEAP32[$1696>>2]|0;
 $1698 = $52;
 $1699 = $1698;
 $1700 = HEAP32[$1699>>2]|0;
 $1701 = (($1698) + 4)|0;
 $1702 = $1701;
 $1703 = HEAP32[$1702>>2]|0;
 $1704 = (_i64Add(($1694|0),($1697|0),($1700|0),($1703|0))|0);
 $1705 = tempRet0;
 $1706 = $61;
 $1707 = $1706;
 $1708 = HEAP32[$1707>>2]|0;
 $1709 = (($1706) + 4)|0;
 $1710 = $1709;
 $1711 = HEAP32[$1710>>2]|0;
 $1712 = (_i64Add(($1704|0),($1705|0),($1708|0),($1711|0))|0);
 $1713 = tempRet0;
 $1714 = $70;
 $1715 = $1714;
 $1716 = HEAP32[$1715>>2]|0;
 $1717 = (($1714) + 4)|0;
 $1718 = $1717;
 $1719 = HEAP32[$1718>>2]|0;
 $1720 = (_i64Add(($1712|0),($1713|0),($1716|0),($1719|0))|0);
 $1721 = tempRet0;
 $1722 = $89;
 $1723 = $1722;
 $1724 = HEAP32[$1723>>2]|0;
 $1725 = (($1722) + 4)|0;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (_i64Add(($1720|0),($1721|0),($1724|0),($1727|0))|0);
 $1729 = tempRet0;
 $1730 = $98;
 $1731 = $1730;
 $1732 = HEAP32[$1731>>2]|0;
 $1733 = (($1730) + 4)|0;
 $1734 = $1733;
 $1735 = HEAP32[$1734>>2]|0;
 $1736 = (_i64Add(($1728|0),($1729|0),($1732|0),($1735|0))|0);
 $1737 = tempRet0;
 $1738 = $107;
 $1739 = $1738;
 $1740 = HEAP32[$1739>>2]|0;
 $1741 = (($1738) + 4)|0;
 $1742 = $1741;
 $1743 = HEAP32[$1742>>2]|0;
 $1744 = (_i64Add(($1736|0),($1737|0),($1740|0),($1743|0))|0);
 $1745 = tempRet0;
 $1746 = $116;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = (($1746) + 4)|0;
 $1750 = $1749;
 $1751 = HEAP32[$1750>>2]|0;
 $1752 = (_i64Add(($1744|0),($1745|0),($1748|0),($1751|0))|0);
 $1753 = tempRet0;
 $1754 = $125;
 $1755 = $1754;
 $1756 = HEAP32[$1755>>2]|0;
 $1757 = (($1754) + 4)|0;
 $1758 = $1757;
 $1759 = HEAP32[$1758>>2]|0;
 $1760 = (_i64Add(($1752|0),($1753|0),($1756|0),($1759|0))|0);
 $1761 = tempRet0;
 $1762 = $134;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = (($1762) + 4)|0;
 $1766 = $1765;
 $1767 = HEAP32[$1766>>2]|0;
 $1768 = (_i64Add(($1760|0),($1761|0),($1764|0),($1767|0))|0);
 $1769 = tempRet0;
 $1770 = $143;
 $1771 = $1770;
 HEAP32[$1771>>2] = $1768;
 $1772 = (($1770) + 4)|0;
 $1773 = $1772;
 HEAP32[$1773>>2] = $1769;
 $1774 = $44;
 $1775 = $1774;
 $1776 = HEAP32[$1775>>2]|0;
 $1777 = (($1774) + 4)|0;
 $1778 = $1777;
 $1779 = HEAP32[$1778>>2]|0;
 $1780 = $53;
 $1781 = $1780;
 $1782 = HEAP32[$1781>>2]|0;
 $1783 = (($1780) + 4)|0;
 $1784 = $1783;
 $1785 = HEAP32[$1784>>2]|0;
 $1786 = (_i64Add(($1776|0),($1779|0),($1782|0),($1785|0))|0);
 $1787 = tempRet0;
 $1788 = $62;
 $1789 = $1788;
 $1790 = HEAP32[$1789>>2]|0;
 $1791 = (($1788) + 4)|0;
 $1792 = $1791;
 $1793 = HEAP32[$1792>>2]|0;
 $1794 = (_i64Add(($1786|0),($1787|0),($1790|0),($1793|0))|0);
 $1795 = tempRet0;
 $1796 = $71;
 $1797 = $1796;
 $1798 = HEAP32[$1797>>2]|0;
 $1799 = (($1796) + 4)|0;
 $1800 = $1799;
 $1801 = HEAP32[$1800>>2]|0;
 $1802 = (_i64Add(($1794|0),($1795|0),($1798|0),($1801|0))|0);
 $1803 = tempRet0;
 $1804 = $80;
 $1805 = $1804;
 $1806 = HEAP32[$1805>>2]|0;
 $1807 = (($1804) + 4)|0;
 $1808 = $1807;
 $1809 = HEAP32[$1808>>2]|0;
 $1810 = (_i64Add(($1802|0),($1803|0),($1806|0),($1809|0))|0);
 $1811 = tempRet0;
 $1812 = $99;
 $1813 = $1812;
 $1814 = HEAP32[$1813>>2]|0;
 $1815 = (($1812) + 4)|0;
 $1816 = $1815;
 $1817 = HEAP32[$1816>>2]|0;
 $1818 = (_i64Add(($1810|0),($1811|0),($1814|0),($1817|0))|0);
 $1819 = tempRet0;
 $1820 = $108;
 $1821 = $1820;
 $1822 = HEAP32[$1821>>2]|0;
 $1823 = (($1820) + 4)|0;
 $1824 = $1823;
 $1825 = HEAP32[$1824>>2]|0;
 $1826 = (_i64Add(($1818|0),($1819|0),($1822|0),($1825|0))|0);
 $1827 = tempRet0;
 $1828 = $117;
 $1829 = $1828;
 $1830 = HEAP32[$1829>>2]|0;
 $1831 = (($1828) + 4)|0;
 $1832 = $1831;
 $1833 = HEAP32[$1832>>2]|0;
 $1834 = (_i64Add(($1826|0),($1827|0),($1830|0),($1833|0))|0);
 $1835 = tempRet0;
 $1836 = $126;
 $1837 = $1836;
 $1838 = HEAP32[$1837>>2]|0;
 $1839 = (($1836) + 4)|0;
 $1840 = $1839;
 $1841 = HEAP32[$1840>>2]|0;
 $1842 = (_i64Add(($1834|0),($1835|0),($1838|0),($1841|0))|0);
 $1843 = tempRet0;
 $1844 = $135;
 $1845 = $1844;
 $1846 = HEAP32[$1845>>2]|0;
 $1847 = (($1844) + 4)|0;
 $1848 = $1847;
 $1849 = HEAP32[$1848>>2]|0;
 $1850 = (_i64Add(($1842|0),($1843|0),($1846|0),($1849|0))|0);
 $1851 = tempRet0;
 $1852 = $144;
 $1853 = $1852;
 HEAP32[$1853>>2] = $1850;
 $1854 = (($1852) + 4)|0;
 $1855 = $1854;
 HEAP32[$1855>>2] = $1851;
 $1856 = $45;
 $1857 = $1856;
 $1858 = HEAP32[$1857>>2]|0;
 $1859 = (($1856) + 4)|0;
 $1860 = $1859;
 $1861 = HEAP32[$1860>>2]|0;
 $1862 = $54;
 $1863 = $1862;
 $1864 = HEAP32[$1863>>2]|0;
 $1865 = (($1862) + 4)|0;
 $1866 = $1865;
 $1867 = HEAP32[$1866>>2]|0;
 $1868 = (_i64Add(($1858|0),($1861|0),($1864|0),($1867|0))|0);
 $1869 = tempRet0;
 $1870 = $63;
 $1871 = $1870;
 $1872 = HEAP32[$1871>>2]|0;
 $1873 = (($1870) + 4)|0;
 $1874 = $1873;
 $1875 = HEAP32[$1874>>2]|0;
 $1876 = (_i64Add(($1868|0),($1869|0),($1872|0),($1875|0))|0);
 $1877 = tempRet0;
 $1878 = $72;
 $1879 = $1878;
 $1880 = HEAP32[$1879>>2]|0;
 $1881 = (($1878) + 4)|0;
 $1882 = $1881;
 $1883 = HEAP32[$1882>>2]|0;
 $1884 = (_i64Add(($1876|0),($1877|0),($1880|0),($1883|0))|0);
 $1885 = tempRet0;
 $1886 = $81;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (($1886) + 4)|0;
 $1890 = $1889;
 $1891 = HEAP32[$1890>>2]|0;
 $1892 = (_i64Add(($1884|0),($1885|0),($1888|0),($1891|0))|0);
 $1893 = tempRet0;
 $1894 = $90;
 $1895 = $1894;
 $1896 = HEAP32[$1895>>2]|0;
 $1897 = (($1894) + 4)|0;
 $1898 = $1897;
 $1899 = HEAP32[$1898>>2]|0;
 $1900 = (_i64Add(($1892|0),($1893|0),($1896|0),($1899|0))|0);
 $1901 = tempRet0;
 $1902 = $109;
 $1903 = $1902;
 $1904 = HEAP32[$1903>>2]|0;
 $1905 = (($1902) + 4)|0;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (_i64Add(($1900|0),($1901|0),($1904|0),($1907|0))|0);
 $1909 = tempRet0;
 $1910 = $118;
 $1911 = $1910;
 $1912 = HEAP32[$1911>>2]|0;
 $1913 = (($1910) + 4)|0;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = (_i64Add(($1908|0),($1909|0),($1912|0),($1915|0))|0);
 $1917 = tempRet0;
 $1918 = $127;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = (($1918) + 4)|0;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = (_i64Add(($1916|0),($1917|0),($1920|0),($1923|0))|0);
 $1925 = tempRet0;
 $1926 = $136;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (($1926) + 4)|0;
 $1930 = $1929;
 $1931 = HEAP32[$1930>>2]|0;
 $1932 = (_i64Add(($1924|0),($1925|0),($1928|0),($1931|0))|0);
 $1933 = tempRet0;
 $1934 = $145;
 $1935 = $1934;
 HEAP32[$1935>>2] = $1932;
 $1936 = (($1934) + 4)|0;
 $1937 = $1936;
 HEAP32[$1937>>2] = $1933;
 $1938 = $46;
 $1939 = $1938;
 $1940 = HEAP32[$1939>>2]|0;
 $1941 = (($1938) + 4)|0;
 $1942 = $1941;
 $1943 = HEAP32[$1942>>2]|0;
 $1944 = $55;
 $1945 = $1944;
 $1946 = HEAP32[$1945>>2]|0;
 $1947 = (($1944) + 4)|0;
 $1948 = $1947;
 $1949 = HEAP32[$1948>>2]|0;
 $1950 = (_i64Add(($1940|0),($1943|0),($1946|0),($1949|0))|0);
 $1951 = tempRet0;
 $1952 = $64;
 $1953 = $1952;
 $1954 = HEAP32[$1953>>2]|0;
 $1955 = (($1952) + 4)|0;
 $1956 = $1955;
 $1957 = HEAP32[$1956>>2]|0;
 $1958 = (_i64Add(($1950|0),($1951|0),($1954|0),($1957|0))|0);
 $1959 = tempRet0;
 $1960 = $73;
 $1961 = $1960;
 $1962 = HEAP32[$1961>>2]|0;
 $1963 = (($1960) + 4)|0;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (_i64Add(($1958|0),($1959|0),($1962|0),($1965|0))|0);
 $1967 = tempRet0;
 $1968 = $82;
 $1969 = $1968;
 $1970 = HEAP32[$1969>>2]|0;
 $1971 = (($1968) + 4)|0;
 $1972 = $1971;
 $1973 = HEAP32[$1972>>2]|0;
 $1974 = (_i64Add(($1966|0),($1967|0),($1970|0),($1973|0))|0);
 $1975 = tempRet0;
 $1976 = $91;
 $1977 = $1976;
 $1978 = HEAP32[$1977>>2]|0;
 $1979 = (($1976) + 4)|0;
 $1980 = $1979;
 $1981 = HEAP32[$1980>>2]|0;
 $1982 = (_i64Add(($1974|0),($1975|0),($1978|0),($1981|0))|0);
 $1983 = tempRet0;
 $1984 = $100;
 $1985 = $1984;
 $1986 = HEAP32[$1985>>2]|0;
 $1987 = (($1984) + 4)|0;
 $1988 = $1987;
 $1989 = HEAP32[$1988>>2]|0;
 $1990 = (_i64Add(($1982|0),($1983|0),($1986|0),($1989|0))|0);
 $1991 = tempRet0;
 $1992 = $119;
 $1993 = $1992;
 $1994 = HEAP32[$1993>>2]|0;
 $1995 = (($1992) + 4)|0;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (_i64Add(($1990|0),($1991|0),($1994|0),($1997|0))|0);
 $1999 = tempRet0;
 $2000 = $128;
 $2001 = $2000;
 $2002 = HEAP32[$2001>>2]|0;
 $2003 = (($2000) + 4)|0;
 $2004 = $2003;
 $2005 = HEAP32[$2004>>2]|0;
 $2006 = (_i64Add(($1998|0),($1999|0),($2002|0),($2005|0))|0);
 $2007 = tempRet0;
 $2008 = $137;
 $2009 = $2008;
 $2010 = HEAP32[$2009>>2]|0;
 $2011 = (($2008) + 4)|0;
 $2012 = $2011;
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = (_i64Add(($2006|0),($2007|0),($2010|0),($2013|0))|0);
 $2015 = tempRet0;
 $2016 = $146;
 $2017 = $2016;
 HEAP32[$2017>>2] = $2014;
 $2018 = (($2016) + 4)|0;
 $2019 = $2018;
 HEAP32[$2019>>2] = $2015;
 $2020 = $47;
 $2021 = $2020;
 $2022 = HEAP32[$2021>>2]|0;
 $2023 = (($2020) + 4)|0;
 $2024 = $2023;
 $2025 = HEAP32[$2024>>2]|0;
 $2026 = $56;
 $2027 = $2026;
 $2028 = HEAP32[$2027>>2]|0;
 $2029 = (($2026) + 4)|0;
 $2030 = $2029;
 $2031 = HEAP32[$2030>>2]|0;
 $2032 = (_i64Add(($2022|0),($2025|0),($2028|0),($2031|0))|0);
 $2033 = tempRet0;
 $2034 = $65;
 $2035 = $2034;
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = (($2034) + 4)|0;
 $2038 = $2037;
 $2039 = HEAP32[$2038>>2]|0;
 $2040 = (_i64Add(($2032|0),($2033|0),($2036|0),($2039|0))|0);
 $2041 = tempRet0;
 $2042 = $74;
 $2043 = $2042;
 $2044 = HEAP32[$2043>>2]|0;
 $2045 = (($2042) + 4)|0;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (_i64Add(($2040|0),($2041|0),($2044|0),($2047|0))|0);
 $2049 = tempRet0;
 $2050 = $83;
 $2051 = $2050;
 $2052 = HEAP32[$2051>>2]|0;
 $2053 = (($2050) + 4)|0;
 $2054 = $2053;
 $2055 = HEAP32[$2054>>2]|0;
 $2056 = (_i64Add(($2048|0),($2049|0),($2052|0),($2055|0))|0);
 $2057 = tempRet0;
 $2058 = $92;
 $2059 = $2058;
 $2060 = HEAP32[$2059>>2]|0;
 $2061 = (($2058) + 4)|0;
 $2062 = $2061;
 $2063 = HEAP32[$2062>>2]|0;
 $2064 = (_i64Add(($2056|0),($2057|0),($2060|0),($2063|0))|0);
 $2065 = tempRet0;
 $2066 = $101;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (($2066) + 4)|0;
 $2070 = $2069;
 $2071 = HEAP32[$2070>>2]|0;
 $2072 = (_i64Add(($2064|0),($2065|0),($2068|0),($2071|0))|0);
 $2073 = tempRet0;
 $2074 = $110;
 $2075 = $2074;
 $2076 = HEAP32[$2075>>2]|0;
 $2077 = (($2074) + 4)|0;
 $2078 = $2077;
 $2079 = HEAP32[$2078>>2]|0;
 $2080 = (_i64Add(($2072|0),($2073|0),($2076|0),($2079|0))|0);
 $2081 = tempRet0;
 $2082 = $129;
 $2083 = $2082;
 $2084 = HEAP32[$2083>>2]|0;
 $2085 = (($2082) + 4)|0;
 $2086 = $2085;
 $2087 = HEAP32[$2086>>2]|0;
 $2088 = (_i64Add(($2080|0),($2081|0),($2084|0),($2087|0))|0);
 $2089 = tempRet0;
 $2090 = $138;
 $2091 = $2090;
 $2092 = HEAP32[$2091>>2]|0;
 $2093 = (($2090) + 4)|0;
 $2094 = $2093;
 $2095 = HEAP32[$2094>>2]|0;
 $2096 = (_i64Add(($2088|0),($2089|0),($2092|0),($2095|0))|0);
 $2097 = tempRet0;
 $2098 = $147;
 $2099 = $2098;
 HEAP32[$2099>>2] = $2096;
 $2100 = (($2098) + 4)|0;
 $2101 = $2100;
 HEAP32[$2101>>2] = $2097;
 $2102 = $48;
 $2103 = $2102;
 $2104 = HEAP32[$2103>>2]|0;
 $2105 = (($2102) + 4)|0;
 $2106 = $2105;
 $2107 = HEAP32[$2106>>2]|0;
 $2108 = $57;
 $2109 = $2108;
 $2110 = HEAP32[$2109>>2]|0;
 $2111 = (($2108) + 4)|0;
 $2112 = $2111;
 $2113 = HEAP32[$2112>>2]|0;
 $2114 = (_i64Add(($2104|0),($2107|0),($2110|0),($2113|0))|0);
 $2115 = tempRet0;
 $2116 = $66;
 $2117 = $2116;
 $2118 = HEAP32[$2117>>2]|0;
 $2119 = (($2116) + 4)|0;
 $2120 = $2119;
 $2121 = HEAP32[$2120>>2]|0;
 $2122 = (_i64Add(($2114|0),($2115|0),($2118|0),($2121|0))|0);
 $2123 = tempRet0;
 $2124 = $75;
 $2125 = $2124;
 $2126 = HEAP32[$2125>>2]|0;
 $2127 = (($2124) + 4)|0;
 $2128 = $2127;
 $2129 = HEAP32[$2128>>2]|0;
 $2130 = (_i64Add(($2122|0),($2123|0),($2126|0),($2129|0))|0);
 $2131 = tempRet0;
 $2132 = $84;
 $2133 = $2132;
 $2134 = HEAP32[$2133>>2]|0;
 $2135 = (($2132) + 4)|0;
 $2136 = $2135;
 $2137 = HEAP32[$2136>>2]|0;
 $2138 = (_i64Add(($2130|0),($2131|0),($2134|0),($2137|0))|0);
 $2139 = tempRet0;
 $2140 = $93;
 $2141 = $2140;
 $2142 = HEAP32[$2141>>2]|0;
 $2143 = (($2140) + 4)|0;
 $2144 = $2143;
 $2145 = HEAP32[$2144>>2]|0;
 $2146 = (_i64Add(($2138|0),($2139|0),($2142|0),($2145|0))|0);
 $2147 = tempRet0;
 $2148 = $102;
 $2149 = $2148;
 $2150 = HEAP32[$2149>>2]|0;
 $2151 = (($2148) + 4)|0;
 $2152 = $2151;
 $2153 = HEAP32[$2152>>2]|0;
 $2154 = (_i64Add(($2146|0),($2147|0),($2150|0),($2153|0))|0);
 $2155 = tempRet0;
 $2156 = $111;
 $2157 = $2156;
 $2158 = HEAP32[$2157>>2]|0;
 $2159 = (($2156) + 4)|0;
 $2160 = $2159;
 $2161 = HEAP32[$2160>>2]|0;
 $2162 = (_i64Add(($2154|0),($2155|0),($2158|0),($2161|0))|0);
 $2163 = tempRet0;
 $2164 = $120;
 $2165 = $2164;
 $2166 = HEAP32[$2165>>2]|0;
 $2167 = (($2164) + 4)|0;
 $2168 = $2167;
 $2169 = HEAP32[$2168>>2]|0;
 $2170 = (_i64Add(($2162|0),($2163|0),($2166|0),($2169|0))|0);
 $2171 = tempRet0;
 $2172 = $139;
 $2173 = $2172;
 $2174 = HEAP32[$2173>>2]|0;
 $2175 = (($2172) + 4)|0;
 $2176 = $2175;
 $2177 = HEAP32[$2176>>2]|0;
 $2178 = (_i64Add(($2170|0),($2171|0),($2174|0),($2177|0))|0);
 $2179 = tempRet0;
 $2180 = $148;
 $2181 = $2180;
 HEAP32[$2181>>2] = $2178;
 $2182 = (($2180) + 4)|0;
 $2183 = $2182;
 HEAP32[$2183>>2] = $2179;
 $2184 = $49;
 $2185 = $2184;
 $2186 = HEAP32[$2185>>2]|0;
 $2187 = (($2184) + 4)|0;
 $2188 = $2187;
 $2189 = HEAP32[$2188>>2]|0;
 $2190 = $58;
 $2191 = $2190;
 $2192 = HEAP32[$2191>>2]|0;
 $2193 = (($2190) + 4)|0;
 $2194 = $2193;
 $2195 = HEAP32[$2194>>2]|0;
 $2196 = (_i64Add(($2186|0),($2189|0),($2192|0),($2195|0))|0);
 $2197 = tempRet0;
 $2198 = $67;
 $2199 = $2198;
 $2200 = HEAP32[$2199>>2]|0;
 $2201 = (($2198) + 4)|0;
 $2202 = $2201;
 $2203 = HEAP32[$2202>>2]|0;
 $2204 = (_i64Add(($2196|0),($2197|0),($2200|0),($2203|0))|0);
 $2205 = tempRet0;
 $2206 = $76;
 $2207 = $2206;
 $2208 = HEAP32[$2207>>2]|0;
 $2209 = (($2206) + 4)|0;
 $2210 = $2209;
 $2211 = HEAP32[$2210>>2]|0;
 $2212 = (_i64Add(($2204|0),($2205|0),($2208|0),($2211|0))|0);
 $2213 = tempRet0;
 $2214 = $85;
 $2215 = $2214;
 $2216 = HEAP32[$2215>>2]|0;
 $2217 = (($2214) + 4)|0;
 $2218 = $2217;
 $2219 = HEAP32[$2218>>2]|0;
 $2220 = (_i64Add(($2212|0),($2213|0),($2216|0),($2219|0))|0);
 $2221 = tempRet0;
 $2222 = $94;
 $2223 = $2222;
 $2224 = HEAP32[$2223>>2]|0;
 $2225 = (($2222) + 4)|0;
 $2226 = $2225;
 $2227 = HEAP32[$2226>>2]|0;
 $2228 = (_i64Add(($2220|0),($2221|0),($2224|0),($2227|0))|0);
 $2229 = tempRet0;
 $2230 = $103;
 $2231 = $2230;
 $2232 = HEAP32[$2231>>2]|0;
 $2233 = (($2230) + 4)|0;
 $2234 = $2233;
 $2235 = HEAP32[$2234>>2]|0;
 $2236 = (_i64Add(($2228|0),($2229|0),($2232|0),($2235|0))|0);
 $2237 = tempRet0;
 $2238 = $112;
 $2239 = $2238;
 $2240 = HEAP32[$2239>>2]|0;
 $2241 = (($2238) + 4)|0;
 $2242 = $2241;
 $2243 = HEAP32[$2242>>2]|0;
 $2244 = (_i64Add(($2236|0),($2237|0),($2240|0),($2243|0))|0);
 $2245 = tempRet0;
 $2246 = $121;
 $2247 = $2246;
 $2248 = HEAP32[$2247>>2]|0;
 $2249 = (($2246) + 4)|0;
 $2250 = $2249;
 $2251 = HEAP32[$2250>>2]|0;
 $2252 = (_i64Add(($2244|0),($2245|0),($2248|0),($2251|0))|0);
 $2253 = tempRet0;
 $2254 = $130;
 $2255 = $2254;
 $2256 = HEAP32[$2255>>2]|0;
 $2257 = (($2254) + 4)|0;
 $2258 = $2257;
 $2259 = HEAP32[$2258>>2]|0;
 $2260 = (_i64Add(($2252|0),($2253|0),($2256|0),($2259|0))|0);
 $2261 = tempRet0;
 $2262 = $149;
 $2263 = $2262;
 HEAP32[$2263>>2] = $2260;
 $2264 = (($2262) + 4)|0;
 $2265 = $2264;
 HEAP32[$2265>>2] = $2261;
 $2266 = $140;
 $2267 = $2266;
 $2268 = HEAP32[$2267>>2]|0;
 $2269 = (($2266) + 4)|0;
 $2270 = $2269;
 $2271 = HEAP32[$2270>>2]|0;
 $2272 = (_i64Add(($2268|0),($2271|0),33554432,0)|0);
 $2273 = tempRet0;
 $2274 = (_bitshift64Ashr(($2272|0),($2273|0),26)|0);
 $2275 = tempRet0;
 $2276 = $150;
 $2277 = $2276;
 HEAP32[$2277>>2] = $2274;
 $2278 = (($2276) + 4)|0;
 $2279 = $2278;
 HEAP32[$2279>>2] = $2275;
 $2280 = $150;
 $2281 = $2280;
 $2282 = HEAP32[$2281>>2]|0;
 $2283 = (($2280) + 4)|0;
 $2284 = $2283;
 $2285 = HEAP32[$2284>>2]|0;
 $2286 = $141;
 $2287 = $2286;
 $2288 = HEAP32[$2287>>2]|0;
 $2289 = (($2286) + 4)|0;
 $2290 = $2289;
 $2291 = HEAP32[$2290>>2]|0;
 $2292 = (_i64Add(($2288|0),($2291|0),($2282|0),($2285|0))|0);
 $2293 = tempRet0;
 $2294 = $141;
 $2295 = $2294;
 HEAP32[$2295>>2] = $2292;
 $2296 = (($2294) + 4)|0;
 $2297 = $2296;
 HEAP32[$2297>>2] = $2293;
 $2298 = $150;
 $2299 = $2298;
 $2300 = HEAP32[$2299>>2]|0;
 $2301 = (($2298) + 4)|0;
 $2302 = $2301;
 $2303 = HEAP32[$2302>>2]|0;
 $2304 = (_bitshift64Shl(($2300|0),($2303|0),26)|0);
 $2305 = tempRet0;
 $2306 = $140;
 $2307 = $2306;
 $2308 = HEAP32[$2307>>2]|0;
 $2309 = (($2306) + 4)|0;
 $2310 = $2309;
 $2311 = HEAP32[$2310>>2]|0;
 $2312 = (_i64Subtract(($2308|0),($2311|0),($2304|0),($2305|0))|0);
 $2313 = tempRet0;
 $2314 = $140;
 $2315 = $2314;
 HEAP32[$2315>>2] = $2312;
 $2316 = (($2314) + 4)|0;
 $2317 = $2316;
 HEAP32[$2317>>2] = $2313;
 $2318 = $144;
 $2319 = $2318;
 $2320 = HEAP32[$2319>>2]|0;
 $2321 = (($2318) + 4)|0;
 $2322 = $2321;
 $2323 = HEAP32[$2322>>2]|0;
 $2324 = (_i64Add(($2320|0),($2323|0),33554432,0)|0);
 $2325 = tempRet0;
 $2326 = (_bitshift64Ashr(($2324|0),($2325|0),26)|0);
 $2327 = tempRet0;
 $2328 = $154;
 $2329 = $2328;
 HEAP32[$2329>>2] = $2326;
 $2330 = (($2328) + 4)|0;
 $2331 = $2330;
 HEAP32[$2331>>2] = $2327;
 $2332 = $154;
 $2333 = $2332;
 $2334 = HEAP32[$2333>>2]|0;
 $2335 = (($2332) + 4)|0;
 $2336 = $2335;
 $2337 = HEAP32[$2336>>2]|0;
 $2338 = $145;
 $2339 = $2338;
 $2340 = HEAP32[$2339>>2]|0;
 $2341 = (($2338) + 4)|0;
 $2342 = $2341;
 $2343 = HEAP32[$2342>>2]|0;
 $2344 = (_i64Add(($2340|0),($2343|0),($2334|0),($2337|0))|0);
 $2345 = tempRet0;
 $2346 = $145;
 $2347 = $2346;
 HEAP32[$2347>>2] = $2344;
 $2348 = (($2346) + 4)|0;
 $2349 = $2348;
 HEAP32[$2349>>2] = $2345;
 $2350 = $154;
 $2351 = $2350;
 $2352 = HEAP32[$2351>>2]|0;
 $2353 = (($2350) + 4)|0;
 $2354 = $2353;
 $2355 = HEAP32[$2354>>2]|0;
 $2356 = (_bitshift64Shl(($2352|0),($2355|0),26)|0);
 $2357 = tempRet0;
 $2358 = $144;
 $2359 = $2358;
 $2360 = HEAP32[$2359>>2]|0;
 $2361 = (($2358) + 4)|0;
 $2362 = $2361;
 $2363 = HEAP32[$2362>>2]|0;
 $2364 = (_i64Subtract(($2360|0),($2363|0),($2356|0),($2357|0))|0);
 $2365 = tempRet0;
 $2366 = $144;
 $2367 = $2366;
 HEAP32[$2367>>2] = $2364;
 $2368 = (($2366) + 4)|0;
 $2369 = $2368;
 HEAP32[$2369>>2] = $2365;
 $2370 = $141;
 $2371 = $2370;
 $2372 = HEAP32[$2371>>2]|0;
 $2373 = (($2370) + 4)|0;
 $2374 = $2373;
 $2375 = HEAP32[$2374>>2]|0;
 $2376 = (_i64Add(($2372|0),($2375|0),16777216,0)|0);
 $2377 = tempRet0;
 $2378 = (_bitshift64Ashr(($2376|0),($2377|0),25)|0);
 $2379 = tempRet0;
 $2380 = $151;
 $2381 = $2380;
 HEAP32[$2381>>2] = $2378;
 $2382 = (($2380) + 4)|0;
 $2383 = $2382;
 HEAP32[$2383>>2] = $2379;
 $2384 = $151;
 $2385 = $2384;
 $2386 = HEAP32[$2385>>2]|0;
 $2387 = (($2384) + 4)|0;
 $2388 = $2387;
 $2389 = HEAP32[$2388>>2]|0;
 $2390 = $142;
 $2391 = $2390;
 $2392 = HEAP32[$2391>>2]|0;
 $2393 = (($2390) + 4)|0;
 $2394 = $2393;
 $2395 = HEAP32[$2394>>2]|0;
 $2396 = (_i64Add(($2392|0),($2395|0),($2386|0),($2389|0))|0);
 $2397 = tempRet0;
 $2398 = $142;
 $2399 = $2398;
 HEAP32[$2399>>2] = $2396;
 $2400 = (($2398) + 4)|0;
 $2401 = $2400;
 HEAP32[$2401>>2] = $2397;
 $2402 = $151;
 $2403 = $2402;
 $2404 = HEAP32[$2403>>2]|0;
 $2405 = (($2402) + 4)|0;
 $2406 = $2405;
 $2407 = HEAP32[$2406>>2]|0;
 $2408 = (_bitshift64Shl(($2404|0),($2407|0),25)|0);
 $2409 = tempRet0;
 $2410 = $141;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = (($2410) + 4)|0;
 $2414 = $2413;
 $2415 = HEAP32[$2414>>2]|0;
 $2416 = (_i64Subtract(($2412|0),($2415|0),($2408|0),($2409|0))|0);
 $2417 = tempRet0;
 $2418 = $141;
 $2419 = $2418;
 HEAP32[$2419>>2] = $2416;
 $2420 = (($2418) + 4)|0;
 $2421 = $2420;
 HEAP32[$2421>>2] = $2417;
 $2422 = $145;
 $2423 = $2422;
 $2424 = HEAP32[$2423>>2]|0;
 $2425 = (($2422) + 4)|0;
 $2426 = $2425;
 $2427 = HEAP32[$2426>>2]|0;
 $2428 = (_i64Add(($2424|0),($2427|0),16777216,0)|0);
 $2429 = tempRet0;
 $2430 = (_bitshift64Ashr(($2428|0),($2429|0),25)|0);
 $2431 = tempRet0;
 $2432 = $155;
 $2433 = $2432;
 HEAP32[$2433>>2] = $2430;
 $2434 = (($2432) + 4)|0;
 $2435 = $2434;
 HEAP32[$2435>>2] = $2431;
 $2436 = $155;
 $2437 = $2436;
 $2438 = HEAP32[$2437>>2]|0;
 $2439 = (($2436) + 4)|0;
 $2440 = $2439;
 $2441 = HEAP32[$2440>>2]|0;
 $2442 = $146;
 $2443 = $2442;
 $2444 = HEAP32[$2443>>2]|0;
 $2445 = (($2442) + 4)|0;
 $2446 = $2445;
 $2447 = HEAP32[$2446>>2]|0;
 $2448 = (_i64Add(($2444|0),($2447|0),($2438|0),($2441|0))|0);
 $2449 = tempRet0;
 $2450 = $146;
 $2451 = $2450;
 HEAP32[$2451>>2] = $2448;
 $2452 = (($2450) + 4)|0;
 $2453 = $2452;
 HEAP32[$2453>>2] = $2449;
 $2454 = $155;
 $2455 = $2454;
 $2456 = HEAP32[$2455>>2]|0;
 $2457 = (($2454) + 4)|0;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = (_bitshift64Shl(($2456|0),($2459|0),25)|0);
 $2461 = tempRet0;
 $2462 = $145;
 $2463 = $2462;
 $2464 = HEAP32[$2463>>2]|0;
 $2465 = (($2462) + 4)|0;
 $2466 = $2465;
 $2467 = HEAP32[$2466>>2]|0;
 $2468 = (_i64Subtract(($2464|0),($2467|0),($2460|0),($2461|0))|0);
 $2469 = tempRet0;
 $2470 = $145;
 $2471 = $2470;
 HEAP32[$2471>>2] = $2468;
 $2472 = (($2470) + 4)|0;
 $2473 = $2472;
 HEAP32[$2473>>2] = $2469;
 $2474 = $142;
 $2475 = $2474;
 $2476 = HEAP32[$2475>>2]|0;
 $2477 = (($2474) + 4)|0;
 $2478 = $2477;
 $2479 = HEAP32[$2478>>2]|0;
 $2480 = (_i64Add(($2476|0),($2479|0),33554432,0)|0);
 $2481 = tempRet0;
 $2482 = (_bitshift64Ashr(($2480|0),($2481|0),26)|0);
 $2483 = tempRet0;
 $2484 = $152;
 $2485 = $2484;
 HEAP32[$2485>>2] = $2482;
 $2486 = (($2484) + 4)|0;
 $2487 = $2486;
 HEAP32[$2487>>2] = $2483;
 $2488 = $152;
 $2489 = $2488;
 $2490 = HEAP32[$2489>>2]|0;
 $2491 = (($2488) + 4)|0;
 $2492 = $2491;
 $2493 = HEAP32[$2492>>2]|0;
 $2494 = $143;
 $2495 = $2494;
 $2496 = HEAP32[$2495>>2]|0;
 $2497 = (($2494) + 4)|0;
 $2498 = $2497;
 $2499 = HEAP32[$2498>>2]|0;
 $2500 = (_i64Add(($2496|0),($2499|0),($2490|0),($2493|0))|0);
 $2501 = tempRet0;
 $2502 = $143;
 $2503 = $2502;
 HEAP32[$2503>>2] = $2500;
 $2504 = (($2502) + 4)|0;
 $2505 = $2504;
 HEAP32[$2505>>2] = $2501;
 $2506 = $152;
 $2507 = $2506;
 $2508 = HEAP32[$2507>>2]|0;
 $2509 = (($2506) + 4)|0;
 $2510 = $2509;
 $2511 = HEAP32[$2510>>2]|0;
 $2512 = (_bitshift64Shl(($2508|0),($2511|0),26)|0);
 $2513 = tempRet0;
 $2514 = $142;
 $2515 = $2514;
 $2516 = HEAP32[$2515>>2]|0;
 $2517 = (($2514) + 4)|0;
 $2518 = $2517;
 $2519 = HEAP32[$2518>>2]|0;
 $2520 = (_i64Subtract(($2516|0),($2519|0),($2512|0),($2513|0))|0);
 $2521 = tempRet0;
 $2522 = $142;
 $2523 = $2522;
 HEAP32[$2523>>2] = $2520;
 $2524 = (($2522) + 4)|0;
 $2525 = $2524;
 HEAP32[$2525>>2] = $2521;
 $2526 = $146;
 $2527 = $2526;
 $2528 = HEAP32[$2527>>2]|0;
 $2529 = (($2526) + 4)|0;
 $2530 = $2529;
 $2531 = HEAP32[$2530>>2]|0;
 $2532 = (_i64Add(($2528|0),($2531|0),33554432,0)|0);
 $2533 = tempRet0;
 $2534 = (_bitshift64Ashr(($2532|0),($2533|0),26)|0);
 $2535 = tempRet0;
 $2536 = $156;
 $2537 = $2536;
 HEAP32[$2537>>2] = $2534;
 $2538 = (($2536) + 4)|0;
 $2539 = $2538;
 HEAP32[$2539>>2] = $2535;
 $2540 = $156;
 $2541 = $2540;
 $2542 = HEAP32[$2541>>2]|0;
 $2543 = (($2540) + 4)|0;
 $2544 = $2543;
 $2545 = HEAP32[$2544>>2]|0;
 $2546 = $147;
 $2547 = $2546;
 $2548 = HEAP32[$2547>>2]|0;
 $2549 = (($2546) + 4)|0;
 $2550 = $2549;
 $2551 = HEAP32[$2550>>2]|0;
 $2552 = (_i64Add(($2548|0),($2551|0),($2542|0),($2545|0))|0);
 $2553 = tempRet0;
 $2554 = $147;
 $2555 = $2554;
 HEAP32[$2555>>2] = $2552;
 $2556 = (($2554) + 4)|0;
 $2557 = $2556;
 HEAP32[$2557>>2] = $2553;
 $2558 = $156;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = (($2558) + 4)|0;
 $2562 = $2561;
 $2563 = HEAP32[$2562>>2]|0;
 $2564 = (_bitshift64Shl(($2560|0),($2563|0),26)|0);
 $2565 = tempRet0;
 $2566 = $146;
 $2567 = $2566;
 $2568 = HEAP32[$2567>>2]|0;
 $2569 = (($2566) + 4)|0;
 $2570 = $2569;
 $2571 = HEAP32[$2570>>2]|0;
 $2572 = (_i64Subtract(($2568|0),($2571|0),($2564|0),($2565|0))|0);
 $2573 = tempRet0;
 $2574 = $146;
 $2575 = $2574;
 HEAP32[$2575>>2] = $2572;
 $2576 = (($2574) + 4)|0;
 $2577 = $2576;
 HEAP32[$2577>>2] = $2573;
 $2578 = $143;
 $2579 = $2578;
 $2580 = HEAP32[$2579>>2]|0;
 $2581 = (($2578) + 4)|0;
 $2582 = $2581;
 $2583 = HEAP32[$2582>>2]|0;
 $2584 = (_i64Add(($2580|0),($2583|0),16777216,0)|0);
 $2585 = tempRet0;
 $2586 = (_bitshift64Ashr(($2584|0),($2585|0),25)|0);
 $2587 = tempRet0;
 $2588 = $153;
 $2589 = $2588;
 HEAP32[$2589>>2] = $2586;
 $2590 = (($2588) + 4)|0;
 $2591 = $2590;
 HEAP32[$2591>>2] = $2587;
 $2592 = $153;
 $2593 = $2592;
 $2594 = HEAP32[$2593>>2]|0;
 $2595 = (($2592) + 4)|0;
 $2596 = $2595;
 $2597 = HEAP32[$2596>>2]|0;
 $2598 = $144;
 $2599 = $2598;
 $2600 = HEAP32[$2599>>2]|0;
 $2601 = (($2598) + 4)|0;
 $2602 = $2601;
 $2603 = HEAP32[$2602>>2]|0;
 $2604 = (_i64Add(($2600|0),($2603|0),($2594|0),($2597|0))|0);
 $2605 = tempRet0;
 $2606 = $144;
 $2607 = $2606;
 HEAP32[$2607>>2] = $2604;
 $2608 = (($2606) + 4)|0;
 $2609 = $2608;
 HEAP32[$2609>>2] = $2605;
 $2610 = $153;
 $2611 = $2610;
 $2612 = HEAP32[$2611>>2]|0;
 $2613 = (($2610) + 4)|0;
 $2614 = $2613;
 $2615 = HEAP32[$2614>>2]|0;
 $2616 = (_bitshift64Shl(($2612|0),($2615|0),25)|0);
 $2617 = tempRet0;
 $2618 = $143;
 $2619 = $2618;
 $2620 = HEAP32[$2619>>2]|0;
 $2621 = (($2618) + 4)|0;
 $2622 = $2621;
 $2623 = HEAP32[$2622>>2]|0;
 $2624 = (_i64Subtract(($2620|0),($2623|0),($2616|0),($2617|0))|0);
 $2625 = tempRet0;
 $2626 = $143;
 $2627 = $2626;
 HEAP32[$2627>>2] = $2624;
 $2628 = (($2626) + 4)|0;
 $2629 = $2628;
 HEAP32[$2629>>2] = $2625;
 $2630 = $147;
 $2631 = $2630;
 $2632 = HEAP32[$2631>>2]|0;
 $2633 = (($2630) + 4)|0;
 $2634 = $2633;
 $2635 = HEAP32[$2634>>2]|0;
 $2636 = (_i64Add(($2632|0),($2635|0),16777216,0)|0);
 $2637 = tempRet0;
 $2638 = (_bitshift64Ashr(($2636|0),($2637|0),25)|0);
 $2639 = tempRet0;
 $2640 = $157;
 $2641 = $2640;
 HEAP32[$2641>>2] = $2638;
 $2642 = (($2640) + 4)|0;
 $2643 = $2642;
 HEAP32[$2643>>2] = $2639;
 $2644 = $157;
 $2645 = $2644;
 $2646 = HEAP32[$2645>>2]|0;
 $2647 = (($2644) + 4)|0;
 $2648 = $2647;
 $2649 = HEAP32[$2648>>2]|0;
 $2650 = $148;
 $2651 = $2650;
 $2652 = HEAP32[$2651>>2]|0;
 $2653 = (($2650) + 4)|0;
 $2654 = $2653;
 $2655 = HEAP32[$2654>>2]|0;
 $2656 = (_i64Add(($2652|0),($2655|0),($2646|0),($2649|0))|0);
 $2657 = tempRet0;
 $2658 = $148;
 $2659 = $2658;
 HEAP32[$2659>>2] = $2656;
 $2660 = (($2658) + 4)|0;
 $2661 = $2660;
 HEAP32[$2661>>2] = $2657;
 $2662 = $157;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (($2662) + 4)|0;
 $2666 = $2665;
 $2667 = HEAP32[$2666>>2]|0;
 $2668 = (_bitshift64Shl(($2664|0),($2667|0),25)|0);
 $2669 = tempRet0;
 $2670 = $147;
 $2671 = $2670;
 $2672 = HEAP32[$2671>>2]|0;
 $2673 = (($2670) + 4)|0;
 $2674 = $2673;
 $2675 = HEAP32[$2674>>2]|0;
 $2676 = (_i64Subtract(($2672|0),($2675|0),($2668|0),($2669|0))|0);
 $2677 = tempRet0;
 $2678 = $147;
 $2679 = $2678;
 HEAP32[$2679>>2] = $2676;
 $2680 = (($2678) + 4)|0;
 $2681 = $2680;
 HEAP32[$2681>>2] = $2677;
 $2682 = $144;
 $2683 = $2682;
 $2684 = HEAP32[$2683>>2]|0;
 $2685 = (($2682) + 4)|0;
 $2686 = $2685;
 $2687 = HEAP32[$2686>>2]|0;
 $2688 = (_i64Add(($2684|0),($2687|0),33554432,0)|0);
 $2689 = tempRet0;
 $2690 = (_bitshift64Ashr(($2688|0),($2689|0),26)|0);
 $2691 = tempRet0;
 $2692 = $154;
 $2693 = $2692;
 HEAP32[$2693>>2] = $2690;
 $2694 = (($2692) + 4)|0;
 $2695 = $2694;
 HEAP32[$2695>>2] = $2691;
 $2696 = $154;
 $2697 = $2696;
 $2698 = HEAP32[$2697>>2]|0;
 $2699 = (($2696) + 4)|0;
 $2700 = $2699;
 $2701 = HEAP32[$2700>>2]|0;
 $2702 = $145;
 $2703 = $2702;
 $2704 = HEAP32[$2703>>2]|0;
 $2705 = (($2702) + 4)|0;
 $2706 = $2705;
 $2707 = HEAP32[$2706>>2]|0;
 $2708 = (_i64Add(($2704|0),($2707|0),($2698|0),($2701|0))|0);
 $2709 = tempRet0;
 $2710 = $145;
 $2711 = $2710;
 HEAP32[$2711>>2] = $2708;
 $2712 = (($2710) + 4)|0;
 $2713 = $2712;
 HEAP32[$2713>>2] = $2709;
 $2714 = $154;
 $2715 = $2714;
 $2716 = HEAP32[$2715>>2]|0;
 $2717 = (($2714) + 4)|0;
 $2718 = $2717;
 $2719 = HEAP32[$2718>>2]|0;
 $2720 = (_bitshift64Shl(($2716|0),($2719|0),26)|0);
 $2721 = tempRet0;
 $2722 = $144;
 $2723 = $2722;
 $2724 = HEAP32[$2723>>2]|0;
 $2725 = (($2722) + 4)|0;
 $2726 = $2725;
 $2727 = HEAP32[$2726>>2]|0;
 $2728 = (_i64Subtract(($2724|0),($2727|0),($2720|0),($2721|0))|0);
 $2729 = tempRet0;
 $2730 = $144;
 $2731 = $2730;
 HEAP32[$2731>>2] = $2728;
 $2732 = (($2730) + 4)|0;
 $2733 = $2732;
 HEAP32[$2733>>2] = $2729;
 $2734 = $148;
 $2735 = $2734;
 $2736 = HEAP32[$2735>>2]|0;
 $2737 = (($2734) + 4)|0;
 $2738 = $2737;
 $2739 = HEAP32[$2738>>2]|0;
 $2740 = (_i64Add(($2736|0),($2739|0),33554432,0)|0);
 $2741 = tempRet0;
 $2742 = (_bitshift64Ashr(($2740|0),($2741|0),26)|0);
 $2743 = tempRet0;
 $2744 = $158;
 $2745 = $2744;
 HEAP32[$2745>>2] = $2742;
 $2746 = (($2744) + 4)|0;
 $2747 = $2746;
 HEAP32[$2747>>2] = $2743;
 $2748 = $158;
 $2749 = $2748;
 $2750 = HEAP32[$2749>>2]|0;
 $2751 = (($2748) + 4)|0;
 $2752 = $2751;
 $2753 = HEAP32[$2752>>2]|0;
 $2754 = $149;
 $2755 = $2754;
 $2756 = HEAP32[$2755>>2]|0;
 $2757 = (($2754) + 4)|0;
 $2758 = $2757;
 $2759 = HEAP32[$2758>>2]|0;
 $2760 = (_i64Add(($2756|0),($2759|0),($2750|0),($2753|0))|0);
 $2761 = tempRet0;
 $2762 = $149;
 $2763 = $2762;
 HEAP32[$2763>>2] = $2760;
 $2764 = (($2762) + 4)|0;
 $2765 = $2764;
 HEAP32[$2765>>2] = $2761;
 $2766 = $158;
 $2767 = $2766;
 $2768 = HEAP32[$2767>>2]|0;
 $2769 = (($2766) + 4)|0;
 $2770 = $2769;
 $2771 = HEAP32[$2770>>2]|0;
 $2772 = (_bitshift64Shl(($2768|0),($2771|0),26)|0);
 $2773 = tempRet0;
 $2774 = $148;
 $2775 = $2774;
 $2776 = HEAP32[$2775>>2]|0;
 $2777 = (($2774) + 4)|0;
 $2778 = $2777;
 $2779 = HEAP32[$2778>>2]|0;
 $2780 = (_i64Subtract(($2776|0),($2779|0),($2772|0),($2773|0))|0);
 $2781 = tempRet0;
 $2782 = $148;
 $2783 = $2782;
 HEAP32[$2783>>2] = $2780;
 $2784 = (($2782) + 4)|0;
 $2785 = $2784;
 HEAP32[$2785>>2] = $2781;
 $2786 = $149;
 $2787 = $2786;
 $2788 = HEAP32[$2787>>2]|0;
 $2789 = (($2786) + 4)|0;
 $2790 = $2789;
 $2791 = HEAP32[$2790>>2]|0;
 $2792 = (_i64Add(($2788|0),($2791|0),16777216,0)|0);
 $2793 = tempRet0;
 $2794 = (_bitshift64Ashr(($2792|0),($2793|0),25)|0);
 $2795 = tempRet0;
 $2796 = $159;
 $2797 = $2796;
 HEAP32[$2797>>2] = $2794;
 $2798 = (($2796) + 4)|0;
 $2799 = $2798;
 HEAP32[$2799>>2] = $2795;
 $2800 = $159;
 $2801 = $2800;
 $2802 = HEAP32[$2801>>2]|0;
 $2803 = (($2800) + 4)|0;
 $2804 = $2803;
 $2805 = HEAP32[$2804>>2]|0;
 $2806 = (___muldi3(($2802|0),($2805|0),19,0)|0);
 $2807 = tempRet0;
 $2808 = $140;
 $2809 = $2808;
 $2810 = HEAP32[$2809>>2]|0;
 $2811 = (($2808) + 4)|0;
 $2812 = $2811;
 $2813 = HEAP32[$2812>>2]|0;
 $2814 = (_i64Add(($2810|0),($2813|0),($2806|0),($2807|0))|0);
 $2815 = tempRet0;
 $2816 = $140;
 $2817 = $2816;
 HEAP32[$2817>>2] = $2814;
 $2818 = (($2816) + 4)|0;
 $2819 = $2818;
 HEAP32[$2819>>2] = $2815;
 $2820 = $159;
 $2821 = $2820;
 $2822 = HEAP32[$2821>>2]|0;
 $2823 = (($2820) + 4)|0;
 $2824 = $2823;
 $2825 = HEAP32[$2824>>2]|0;
 $2826 = (_bitshift64Shl(($2822|0),($2825|0),25)|0);
 $2827 = tempRet0;
 $2828 = $149;
 $2829 = $2828;
 $2830 = HEAP32[$2829>>2]|0;
 $2831 = (($2828) + 4)|0;
 $2832 = $2831;
 $2833 = HEAP32[$2832>>2]|0;
 $2834 = (_i64Subtract(($2830|0),($2833|0),($2826|0),($2827|0))|0);
 $2835 = tempRet0;
 $2836 = $149;
 $2837 = $2836;
 HEAP32[$2837>>2] = $2834;
 $2838 = (($2836) + 4)|0;
 $2839 = $2838;
 HEAP32[$2839>>2] = $2835;
 $2840 = $140;
 $2841 = $2840;
 $2842 = HEAP32[$2841>>2]|0;
 $2843 = (($2840) + 4)|0;
 $2844 = $2843;
 $2845 = HEAP32[$2844>>2]|0;
 $2846 = (_i64Add(($2842|0),($2845|0),33554432,0)|0);
 $2847 = tempRet0;
 $2848 = (_bitshift64Ashr(($2846|0),($2847|0),26)|0);
 $2849 = tempRet0;
 $2850 = $150;
 $2851 = $2850;
 HEAP32[$2851>>2] = $2848;
 $2852 = (($2850) + 4)|0;
 $2853 = $2852;
 HEAP32[$2853>>2] = $2849;
 $2854 = $150;
 $2855 = $2854;
 $2856 = HEAP32[$2855>>2]|0;
 $2857 = (($2854) + 4)|0;
 $2858 = $2857;
 $2859 = HEAP32[$2858>>2]|0;
 $2860 = $141;
 $2861 = $2860;
 $2862 = HEAP32[$2861>>2]|0;
 $2863 = (($2860) + 4)|0;
 $2864 = $2863;
 $2865 = HEAP32[$2864>>2]|0;
 $2866 = (_i64Add(($2862|0),($2865|0),($2856|0),($2859|0))|0);
 $2867 = tempRet0;
 $2868 = $141;
 $2869 = $2868;
 HEAP32[$2869>>2] = $2866;
 $2870 = (($2868) + 4)|0;
 $2871 = $2870;
 HEAP32[$2871>>2] = $2867;
 $2872 = $150;
 $2873 = $2872;
 $2874 = HEAP32[$2873>>2]|0;
 $2875 = (($2872) + 4)|0;
 $2876 = $2875;
 $2877 = HEAP32[$2876>>2]|0;
 $2878 = (_bitshift64Shl(($2874|0),($2877|0),26)|0);
 $2879 = tempRet0;
 $2880 = $140;
 $2881 = $2880;
 $2882 = HEAP32[$2881>>2]|0;
 $2883 = (($2880) + 4)|0;
 $2884 = $2883;
 $2885 = HEAP32[$2884>>2]|0;
 $2886 = (_i64Subtract(($2882|0),($2885|0),($2878|0),($2879|0))|0);
 $2887 = tempRet0;
 $2888 = $140;
 $2889 = $2888;
 HEAP32[$2889>>2] = $2886;
 $2890 = (($2888) + 4)|0;
 $2891 = $2890;
 HEAP32[$2891>>2] = $2887;
 $2892 = $140;
 $2893 = $2892;
 $2894 = HEAP32[$2893>>2]|0;
 $2895 = (($2892) + 4)|0;
 $2896 = $2895;
 $2897 = HEAP32[$2896>>2]|0;
 $2898 = $3;
 HEAP32[$2898>>2] = $2894;
 $2899 = $141;
 $2900 = $2899;
 $2901 = HEAP32[$2900>>2]|0;
 $2902 = (($2899) + 4)|0;
 $2903 = $2902;
 $2904 = HEAP32[$2903>>2]|0;
 $2905 = $3;
 $2906 = ((($2905)) + 4|0);
 HEAP32[$2906>>2] = $2901;
 $2907 = $142;
 $2908 = $2907;
 $2909 = HEAP32[$2908>>2]|0;
 $2910 = (($2907) + 4)|0;
 $2911 = $2910;
 $2912 = HEAP32[$2911>>2]|0;
 $2913 = $3;
 $2914 = ((($2913)) + 8|0);
 HEAP32[$2914>>2] = $2909;
 $2915 = $143;
 $2916 = $2915;
 $2917 = HEAP32[$2916>>2]|0;
 $2918 = (($2915) + 4)|0;
 $2919 = $2918;
 $2920 = HEAP32[$2919>>2]|0;
 $2921 = $3;
 $2922 = ((($2921)) + 12|0);
 HEAP32[$2922>>2] = $2917;
 $2923 = $144;
 $2924 = $2923;
 $2925 = HEAP32[$2924>>2]|0;
 $2926 = (($2923) + 4)|0;
 $2927 = $2926;
 $2928 = HEAP32[$2927>>2]|0;
 $2929 = $3;
 $2930 = ((($2929)) + 16|0);
 HEAP32[$2930>>2] = $2925;
 $2931 = $145;
 $2932 = $2931;
 $2933 = HEAP32[$2932>>2]|0;
 $2934 = (($2931) + 4)|0;
 $2935 = $2934;
 $2936 = HEAP32[$2935>>2]|0;
 $2937 = $3;
 $2938 = ((($2937)) + 20|0);
 HEAP32[$2938>>2] = $2933;
 $2939 = $146;
 $2940 = $2939;
 $2941 = HEAP32[$2940>>2]|0;
 $2942 = (($2939) + 4)|0;
 $2943 = $2942;
 $2944 = HEAP32[$2943>>2]|0;
 $2945 = $3;
 $2946 = ((($2945)) + 24|0);
 HEAP32[$2946>>2] = $2941;
 $2947 = $147;
 $2948 = $2947;
 $2949 = HEAP32[$2948>>2]|0;
 $2950 = (($2947) + 4)|0;
 $2951 = $2950;
 $2952 = HEAP32[$2951>>2]|0;
 $2953 = $3;
 $2954 = ((($2953)) + 28|0);
 HEAP32[$2954>>2] = $2949;
 $2955 = $148;
 $2956 = $2955;
 $2957 = HEAP32[$2956>>2]|0;
 $2958 = (($2955) + 4)|0;
 $2959 = $2958;
 $2960 = HEAP32[$2959>>2]|0;
 $2961 = $3;
 $2962 = ((($2961)) + 32|0);
 HEAP32[$2962>>2] = $2957;
 $2963 = $149;
 $2964 = $2963;
 $2965 = HEAP32[$2964>>2]|0;
 $2966 = (($2963) + 4)|0;
 $2967 = $2966;
 $2968 = HEAP32[$2967>>2]|0;
 $2969 = $3;
 $2970 = ((($2969)) + 36|0);
 HEAP32[$2970>>2] = $2965;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_neg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = $0;
 $3 = $1;
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 $4 = $25;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $5 = $28;
 $29 = $3;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $6 = $31;
 $32 = $3;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $34;
 $35 = $3;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $8 = $37;
 $38 = $3;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $9 = $40;
 $41 = $3;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $10 = $43;
 $44 = $3;
 $45 = ((($44)) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $11 = $46;
 $47 = $3;
 $48 = ((($47)) + 32|0);
 $49 = HEAP32[$48>>2]|0;
 $12 = $49;
 $50 = $3;
 $51 = ((($50)) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $13 = $52;
 $53 = $4;
 $54 = (0 - ($53))|0;
 $14 = $54;
 $55 = $5;
 $56 = (0 - ($55))|0;
 $15 = $56;
 $57 = $6;
 $58 = (0 - ($57))|0;
 $16 = $58;
 $59 = $7;
 $60 = (0 - ($59))|0;
 $17 = $60;
 $61 = $8;
 $62 = (0 - ($61))|0;
 $18 = $62;
 $63 = $9;
 $64 = (0 - ($63))|0;
 $19 = $64;
 $65 = $10;
 $66 = (0 - ($65))|0;
 $20 = $66;
 $67 = $11;
 $68 = (0 - ($67))|0;
 $21 = $68;
 $69 = $12;
 $70 = (0 - ($69))|0;
 $22 = $70;
 $71 = $13;
 $72 = (0 - ($71))|0;
 $23 = $72;
 $73 = $14;
 $74 = $2;
 HEAP32[$74>>2] = $73;
 $75 = $15;
 $76 = $2;
 $77 = ((($76)) + 4|0);
 HEAP32[$77>>2] = $75;
 $78 = $16;
 $79 = $2;
 $80 = ((($79)) + 8|0);
 HEAP32[$80>>2] = $78;
 $81 = $17;
 $82 = $2;
 $83 = ((($82)) + 12|0);
 HEAP32[$83>>2] = $81;
 $84 = $18;
 $85 = $2;
 $86 = ((($85)) + 16|0);
 HEAP32[$86>>2] = $84;
 $87 = $19;
 $88 = $2;
 $89 = ((($88)) + 20|0);
 HEAP32[$89>>2] = $87;
 $90 = $20;
 $91 = $2;
 $92 = ((($91)) + 24|0);
 HEAP32[$92>>2] = $90;
 $93 = $21;
 $94 = $2;
 $95 = ((($94)) + 28|0);
 HEAP32[$95>>2] = $93;
 $96 = $22;
 $97 = $2;
 $98 = ((($97)) + 32|0);
 HEAP32[$98>>2] = $96;
 $99 = $23;
 $100 = $2;
 $101 = ((($100)) + 36|0);
 HEAP32[$101>>2] = $99;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_pow22523($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 88|0;
 $5 = sp + 48|0;
 $6 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $8 = $3;
 _crypto_sign_ed25519_ref10_fe_sq($4,$8);
 $7 = 1;
 while(1) {
  $9 = $7;
  $10 = ($9|0)<(1);
  if (!($10)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($4,$4);
  $11 = $7;
  $12 = (($11) + 1)|0;
  $7 = $12;
 }
 _crypto_sign_ed25519_ref10_fe_sq($5,$4);
 $7 = 1;
 while(1) {
  $13 = $7;
  $14 = ($13|0)<(2);
  if (!($14)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $15 = $7;
  $16 = (($15) + 1)|0;
  $7 = $16;
 }
 $17 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($5,$17,$5);
 _crypto_sign_ed25519_ref10_fe_mul($4,$4,$5);
 _crypto_sign_ed25519_ref10_fe_sq($4,$4);
 $7 = 1;
 while(1) {
  $18 = $7;
  $19 = ($18|0)<(1);
  if (!($19)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($4,$4);
  $20 = $7;
  $21 = (($20) + 1)|0;
  $7 = $21;
 }
 _crypto_sign_ed25519_ref10_fe_mul($4,$5,$4);
 _crypto_sign_ed25519_ref10_fe_sq($5,$4);
 $7 = 1;
 while(1) {
  $22 = $7;
  $23 = ($22|0)<(5);
  if (!($23)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 _crypto_sign_ed25519_ref10_fe_mul($4,$5,$4);
 _crypto_sign_ed25519_ref10_fe_sq($5,$4);
 $7 = 1;
 while(1) {
  $26 = $7;
  $27 = ($26|0)<(10);
  if (!($27)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $28 = $7;
  $29 = (($28) + 1)|0;
  $7 = $29;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$5,$4);
 _crypto_sign_ed25519_ref10_fe_sq($6,$5);
 $7 = 1;
 while(1) {
  $30 = $7;
  $31 = ($30|0)<(20);
  if (!($31)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $32 = $7;
  $33 = (($32) + 1)|0;
  $7 = $33;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($5,$5);
 $7 = 1;
 while(1) {
  $34 = $7;
  $35 = ($34|0)<(10);
  if (!($35)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $36 = $7;
  $37 = (($36) + 1)|0;
  $7 = $37;
 }
 _crypto_sign_ed25519_ref10_fe_mul($4,$5,$4);
 _crypto_sign_ed25519_ref10_fe_sq($5,$4);
 $7 = 1;
 while(1) {
  $38 = $7;
  $39 = ($38|0)<(50);
  if (!($39)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $40 = $7;
  $41 = (($40) + 1)|0;
  $7 = $41;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$5,$4);
 _crypto_sign_ed25519_ref10_fe_sq($6,$5);
 $7 = 1;
 while(1) {
  $42 = $7;
  $43 = ($42|0)<(100);
  if (!($43)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($6,$6);
  $44 = $7;
  $45 = (($44) + 1)|0;
  $7 = $45;
 }
 _crypto_sign_ed25519_ref10_fe_mul($5,$6,$5);
 _crypto_sign_ed25519_ref10_fe_sq($5,$5);
 $7 = 1;
 while(1) {
  $46 = $7;
  $47 = ($46|0)<(50);
  if (!($47)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($5,$5);
  $48 = $7;
  $49 = (($48) + 1)|0;
  $7 = $49;
 }
 _crypto_sign_ed25519_ref10_fe_mul($4,$5,$4);
 _crypto_sign_ed25519_ref10_fe_sq($4,$4);
 $7 = 1;
 while(1) {
  $50 = $7;
  $51 = ($50|0)<(2);
  if (!($51)) {
   break;
  }
  _crypto_sign_ed25519_ref10_fe_sq($4,$4);
  $52 = $7;
  $53 = (($52) + 1)|0;
  $7 = $53;
 }
 $54 = $2;
 $55 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($54,$4,$55);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_sq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $27 = sp + 592|0;
 $28 = sp + 584|0;
 $29 = sp + 576|0;
 $30 = sp + 568|0;
 $31 = sp + 560|0;
 $32 = sp + 552|0;
 $33 = sp + 544|0;
 $34 = sp + 536|0;
 $35 = sp + 528|0;
 $36 = sp + 520|0;
 $37 = sp + 512|0;
 $38 = sp + 504|0;
 $39 = sp + 496|0;
 $40 = sp + 488|0;
 $41 = sp + 480|0;
 $42 = sp + 472|0;
 $43 = sp + 464|0;
 $44 = sp + 456|0;
 $45 = sp + 448|0;
 $46 = sp + 440|0;
 $47 = sp + 432|0;
 $48 = sp + 424|0;
 $49 = sp + 416|0;
 $50 = sp + 408|0;
 $51 = sp + 400|0;
 $52 = sp + 392|0;
 $53 = sp + 384|0;
 $54 = sp + 376|0;
 $55 = sp + 368|0;
 $56 = sp + 360|0;
 $57 = sp + 352|0;
 $58 = sp + 344|0;
 $59 = sp + 336|0;
 $60 = sp + 328|0;
 $61 = sp + 320|0;
 $62 = sp + 312|0;
 $63 = sp + 304|0;
 $64 = sp + 296|0;
 $65 = sp + 288|0;
 $66 = sp + 280|0;
 $67 = sp + 272|0;
 $68 = sp + 264|0;
 $69 = sp + 256|0;
 $70 = sp + 248|0;
 $71 = sp + 240|0;
 $72 = sp + 232|0;
 $73 = sp + 224|0;
 $74 = sp + 216|0;
 $75 = sp + 208|0;
 $76 = sp + 200|0;
 $77 = sp + 192|0;
 $78 = sp + 184|0;
 $79 = sp + 176|0;
 $80 = sp + 168|0;
 $81 = sp + 160|0;
 $82 = sp + 152|0;
 $83 = sp + 144|0;
 $84 = sp + 136|0;
 $85 = sp + 128|0;
 $86 = sp + 120|0;
 $87 = sp + 112|0;
 $88 = sp + 104|0;
 $89 = sp + 96|0;
 $90 = sp + 88|0;
 $91 = sp + 80|0;
 $92 = sp + 72|0;
 $93 = sp + 64|0;
 $94 = sp + 56|0;
 $95 = sp + 48|0;
 $96 = sp + 40|0;
 $97 = sp + 32|0;
 $98 = sp + 24|0;
 $99 = sp + 16|0;
 $100 = sp + 8|0;
 $101 = sp;
 $2 = $0;
 $3 = $1;
 $102 = $3;
 $103 = HEAP32[$102>>2]|0;
 $4 = $103;
 $104 = $3;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $5 = $106;
 $107 = $3;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $6 = $109;
 $110 = $3;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $7 = $112;
 $113 = $3;
 $114 = ((($113)) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 $8 = $115;
 $116 = $3;
 $117 = ((($116)) + 20|0);
 $118 = HEAP32[$117>>2]|0;
 $9 = $118;
 $119 = $3;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $10 = $121;
 $122 = $3;
 $123 = ((($122)) + 28|0);
 $124 = HEAP32[$123>>2]|0;
 $11 = $124;
 $125 = $3;
 $126 = ((($125)) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 $12 = $127;
 $128 = $3;
 $129 = ((($128)) + 36|0);
 $130 = HEAP32[$129>>2]|0;
 $13 = $130;
 $131 = $4;
 $132 = $131<<1;
 $14 = $132;
 $133 = $5;
 $134 = $133<<1;
 $15 = $134;
 $135 = $6;
 $136 = $135<<1;
 $16 = $136;
 $137 = $7;
 $138 = $137<<1;
 $17 = $138;
 $139 = $8;
 $140 = $139<<1;
 $18 = $140;
 $141 = $9;
 $142 = $141<<1;
 $19 = $142;
 $143 = $10;
 $144 = $143<<1;
 $20 = $144;
 $145 = $11;
 $146 = $145<<1;
 $21 = $146;
 $147 = $9;
 $148 = ($147*38)|0;
 $22 = $148;
 $149 = $10;
 $150 = ($149*19)|0;
 $23 = $150;
 $151 = $11;
 $152 = ($151*38)|0;
 $24 = $152;
 $153 = $12;
 $154 = ($153*19)|0;
 $25 = $154;
 $155 = $13;
 $156 = ($155*38)|0;
 $26 = $156;
 $157 = $4;
 $158 = ($157|0)<(0);
 $159 = $158 << 31 >> 31;
 $160 = $4;
 $161 = ($160|0)<(0);
 $162 = $161 << 31 >> 31;
 $163 = (___muldi3(($157|0),($159|0),($160|0),($162|0))|0);
 $164 = tempRet0;
 $165 = $27;
 $166 = $165;
 HEAP32[$166>>2] = $163;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $164;
 $169 = $14;
 $170 = ($169|0)<(0);
 $171 = $170 << 31 >> 31;
 $172 = $5;
 $173 = ($172|0)<(0);
 $174 = $173 << 31 >> 31;
 $175 = (___muldi3(($169|0),($171|0),($172|0),($174|0))|0);
 $176 = tempRet0;
 $177 = $28;
 $178 = $177;
 HEAP32[$178>>2] = $175;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = $176;
 $181 = $14;
 $182 = ($181|0)<(0);
 $183 = $182 << 31 >> 31;
 $184 = $6;
 $185 = ($184|0)<(0);
 $186 = $185 << 31 >> 31;
 $187 = (___muldi3(($181|0),($183|0),($184|0),($186|0))|0);
 $188 = tempRet0;
 $189 = $29;
 $190 = $189;
 HEAP32[$190>>2] = $187;
 $191 = (($189) + 4)|0;
 $192 = $191;
 HEAP32[$192>>2] = $188;
 $193 = $14;
 $194 = ($193|0)<(0);
 $195 = $194 << 31 >> 31;
 $196 = $7;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($193|0),($195|0),($196|0),($198|0))|0);
 $200 = tempRet0;
 $201 = $30;
 $202 = $201;
 HEAP32[$202>>2] = $199;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $205 = $14;
 $206 = ($205|0)<(0);
 $207 = $206 << 31 >> 31;
 $208 = $8;
 $209 = ($208|0)<(0);
 $210 = $209 << 31 >> 31;
 $211 = (___muldi3(($205|0),($207|0),($208|0),($210|0))|0);
 $212 = tempRet0;
 $213 = $31;
 $214 = $213;
 HEAP32[$214>>2] = $211;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = $14;
 $218 = ($217|0)<(0);
 $219 = $218 << 31 >> 31;
 $220 = $9;
 $221 = ($220|0)<(0);
 $222 = $221 << 31 >> 31;
 $223 = (___muldi3(($217|0),($219|0),($220|0),($222|0))|0);
 $224 = tempRet0;
 $225 = $32;
 $226 = $225;
 HEAP32[$226>>2] = $223;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $224;
 $229 = $14;
 $230 = ($229|0)<(0);
 $231 = $230 << 31 >> 31;
 $232 = $10;
 $233 = ($232|0)<(0);
 $234 = $233 << 31 >> 31;
 $235 = (___muldi3(($229|0),($231|0),($232|0),($234|0))|0);
 $236 = tempRet0;
 $237 = $33;
 $238 = $237;
 HEAP32[$238>>2] = $235;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $236;
 $241 = $14;
 $242 = ($241|0)<(0);
 $243 = $242 << 31 >> 31;
 $244 = $11;
 $245 = ($244|0)<(0);
 $246 = $245 << 31 >> 31;
 $247 = (___muldi3(($241|0),($243|0),($244|0),($246|0))|0);
 $248 = tempRet0;
 $249 = $34;
 $250 = $249;
 HEAP32[$250>>2] = $247;
 $251 = (($249) + 4)|0;
 $252 = $251;
 HEAP32[$252>>2] = $248;
 $253 = $14;
 $254 = ($253|0)<(0);
 $255 = $254 << 31 >> 31;
 $256 = $12;
 $257 = ($256|0)<(0);
 $258 = $257 << 31 >> 31;
 $259 = (___muldi3(($253|0),($255|0),($256|0),($258|0))|0);
 $260 = tempRet0;
 $261 = $35;
 $262 = $261;
 HEAP32[$262>>2] = $259;
 $263 = (($261) + 4)|0;
 $264 = $263;
 HEAP32[$264>>2] = $260;
 $265 = $14;
 $266 = ($265|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = $13;
 $269 = ($268|0)<(0);
 $270 = $269 << 31 >> 31;
 $271 = (___muldi3(($265|0),($267|0),($268|0),($270|0))|0);
 $272 = tempRet0;
 $273 = $36;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = $15;
 $278 = ($277|0)<(0);
 $279 = $278 << 31 >> 31;
 $280 = $5;
 $281 = ($280|0)<(0);
 $282 = $281 << 31 >> 31;
 $283 = (___muldi3(($277|0),($279|0),($280|0),($282|0))|0);
 $284 = tempRet0;
 $285 = $37;
 $286 = $285;
 HEAP32[$286>>2] = $283;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = $284;
 $289 = $15;
 $290 = ($289|0)<(0);
 $291 = $290 << 31 >> 31;
 $292 = $6;
 $293 = ($292|0)<(0);
 $294 = $293 << 31 >> 31;
 $295 = (___muldi3(($289|0),($291|0),($292|0),($294|0))|0);
 $296 = tempRet0;
 $297 = $38;
 $298 = $297;
 HEAP32[$298>>2] = $295;
 $299 = (($297) + 4)|0;
 $300 = $299;
 HEAP32[$300>>2] = $296;
 $301 = $15;
 $302 = ($301|0)<(0);
 $303 = $302 << 31 >> 31;
 $304 = $17;
 $305 = ($304|0)<(0);
 $306 = $305 << 31 >> 31;
 $307 = (___muldi3(($301|0),($303|0),($304|0),($306|0))|0);
 $308 = tempRet0;
 $309 = $39;
 $310 = $309;
 HEAP32[$310>>2] = $307;
 $311 = (($309) + 4)|0;
 $312 = $311;
 HEAP32[$312>>2] = $308;
 $313 = $15;
 $314 = ($313|0)<(0);
 $315 = $314 << 31 >> 31;
 $316 = $8;
 $317 = ($316|0)<(0);
 $318 = $317 << 31 >> 31;
 $319 = (___muldi3(($313|0),($315|0),($316|0),($318|0))|0);
 $320 = tempRet0;
 $321 = $40;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $325 = $15;
 $326 = ($325|0)<(0);
 $327 = $326 << 31 >> 31;
 $328 = $19;
 $329 = ($328|0)<(0);
 $330 = $329 << 31 >> 31;
 $331 = (___muldi3(($325|0),($327|0),($328|0),($330|0))|0);
 $332 = tempRet0;
 $333 = $41;
 $334 = $333;
 HEAP32[$334>>2] = $331;
 $335 = (($333) + 4)|0;
 $336 = $335;
 HEAP32[$336>>2] = $332;
 $337 = $15;
 $338 = ($337|0)<(0);
 $339 = $338 << 31 >> 31;
 $340 = $10;
 $341 = ($340|0)<(0);
 $342 = $341 << 31 >> 31;
 $343 = (___muldi3(($337|0),($339|0),($340|0),($342|0))|0);
 $344 = tempRet0;
 $345 = $42;
 $346 = $345;
 HEAP32[$346>>2] = $343;
 $347 = (($345) + 4)|0;
 $348 = $347;
 HEAP32[$348>>2] = $344;
 $349 = $15;
 $350 = ($349|0)<(0);
 $351 = $350 << 31 >> 31;
 $352 = $21;
 $353 = ($352|0)<(0);
 $354 = $353 << 31 >> 31;
 $355 = (___muldi3(($349|0),($351|0),($352|0),($354|0))|0);
 $356 = tempRet0;
 $357 = $43;
 $358 = $357;
 HEAP32[$358>>2] = $355;
 $359 = (($357) + 4)|0;
 $360 = $359;
 HEAP32[$360>>2] = $356;
 $361 = $15;
 $362 = ($361|0)<(0);
 $363 = $362 << 31 >> 31;
 $364 = $12;
 $365 = ($364|0)<(0);
 $366 = $365 << 31 >> 31;
 $367 = (___muldi3(($361|0),($363|0),($364|0),($366|0))|0);
 $368 = tempRet0;
 $369 = $44;
 $370 = $369;
 HEAP32[$370>>2] = $367;
 $371 = (($369) + 4)|0;
 $372 = $371;
 HEAP32[$372>>2] = $368;
 $373 = $15;
 $374 = ($373|0)<(0);
 $375 = $374 << 31 >> 31;
 $376 = $26;
 $377 = ($376|0)<(0);
 $378 = $377 << 31 >> 31;
 $379 = (___muldi3(($373|0),($375|0),($376|0),($378|0))|0);
 $380 = tempRet0;
 $381 = $45;
 $382 = $381;
 HEAP32[$382>>2] = $379;
 $383 = (($381) + 4)|0;
 $384 = $383;
 HEAP32[$384>>2] = $380;
 $385 = $6;
 $386 = ($385|0)<(0);
 $387 = $386 << 31 >> 31;
 $388 = $6;
 $389 = ($388|0)<(0);
 $390 = $389 << 31 >> 31;
 $391 = (___muldi3(($385|0),($387|0),($388|0),($390|0))|0);
 $392 = tempRet0;
 $393 = $46;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $16;
 $398 = ($397|0)<(0);
 $399 = $398 << 31 >> 31;
 $400 = $7;
 $401 = ($400|0)<(0);
 $402 = $401 << 31 >> 31;
 $403 = (___muldi3(($397|0),($399|0),($400|0),($402|0))|0);
 $404 = tempRet0;
 $405 = $47;
 $406 = $405;
 HEAP32[$406>>2] = $403;
 $407 = (($405) + 4)|0;
 $408 = $407;
 HEAP32[$408>>2] = $404;
 $409 = $16;
 $410 = ($409|0)<(0);
 $411 = $410 << 31 >> 31;
 $412 = $8;
 $413 = ($412|0)<(0);
 $414 = $413 << 31 >> 31;
 $415 = (___muldi3(($409|0),($411|0),($412|0),($414|0))|0);
 $416 = tempRet0;
 $417 = $48;
 $418 = $417;
 HEAP32[$418>>2] = $415;
 $419 = (($417) + 4)|0;
 $420 = $419;
 HEAP32[$420>>2] = $416;
 $421 = $16;
 $422 = ($421|0)<(0);
 $423 = $422 << 31 >> 31;
 $424 = $9;
 $425 = ($424|0)<(0);
 $426 = $425 << 31 >> 31;
 $427 = (___muldi3(($421|0),($423|0),($424|0),($426|0))|0);
 $428 = tempRet0;
 $429 = $49;
 $430 = $429;
 HEAP32[$430>>2] = $427;
 $431 = (($429) + 4)|0;
 $432 = $431;
 HEAP32[$432>>2] = $428;
 $433 = $16;
 $434 = ($433|0)<(0);
 $435 = $434 << 31 >> 31;
 $436 = $10;
 $437 = ($436|0)<(0);
 $438 = $437 << 31 >> 31;
 $439 = (___muldi3(($433|0),($435|0),($436|0),($438|0))|0);
 $440 = tempRet0;
 $441 = $50;
 $442 = $441;
 HEAP32[$442>>2] = $439;
 $443 = (($441) + 4)|0;
 $444 = $443;
 HEAP32[$444>>2] = $440;
 $445 = $16;
 $446 = ($445|0)<(0);
 $447 = $446 << 31 >> 31;
 $448 = $11;
 $449 = ($448|0)<(0);
 $450 = $449 << 31 >> 31;
 $451 = (___muldi3(($445|0),($447|0),($448|0),($450|0))|0);
 $452 = tempRet0;
 $453 = $51;
 $454 = $453;
 HEAP32[$454>>2] = $451;
 $455 = (($453) + 4)|0;
 $456 = $455;
 HEAP32[$456>>2] = $452;
 $457 = $16;
 $458 = ($457|0)<(0);
 $459 = $458 << 31 >> 31;
 $460 = $25;
 $461 = ($460|0)<(0);
 $462 = $461 << 31 >> 31;
 $463 = (___muldi3(($457|0),($459|0),($460|0),($462|0))|0);
 $464 = tempRet0;
 $465 = $52;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $6;
 $470 = ($469|0)<(0);
 $471 = $470 << 31 >> 31;
 $472 = $26;
 $473 = ($472|0)<(0);
 $474 = $473 << 31 >> 31;
 $475 = (___muldi3(($469|0),($471|0),($472|0),($474|0))|0);
 $476 = tempRet0;
 $477 = $53;
 $478 = $477;
 HEAP32[$478>>2] = $475;
 $479 = (($477) + 4)|0;
 $480 = $479;
 HEAP32[$480>>2] = $476;
 $481 = $17;
 $482 = ($481|0)<(0);
 $483 = $482 << 31 >> 31;
 $484 = $7;
 $485 = ($484|0)<(0);
 $486 = $485 << 31 >> 31;
 $487 = (___muldi3(($481|0),($483|0),($484|0),($486|0))|0);
 $488 = tempRet0;
 $489 = $54;
 $490 = $489;
 HEAP32[$490>>2] = $487;
 $491 = (($489) + 4)|0;
 $492 = $491;
 HEAP32[$492>>2] = $488;
 $493 = $17;
 $494 = ($493|0)<(0);
 $495 = $494 << 31 >> 31;
 $496 = $8;
 $497 = ($496|0)<(0);
 $498 = $497 << 31 >> 31;
 $499 = (___muldi3(($493|0),($495|0),($496|0),($498|0))|0);
 $500 = tempRet0;
 $501 = $55;
 $502 = $501;
 HEAP32[$502>>2] = $499;
 $503 = (($501) + 4)|0;
 $504 = $503;
 HEAP32[$504>>2] = $500;
 $505 = $17;
 $506 = ($505|0)<(0);
 $507 = $506 << 31 >> 31;
 $508 = $19;
 $509 = ($508|0)<(0);
 $510 = $509 << 31 >> 31;
 $511 = (___muldi3(($505|0),($507|0),($508|0),($510|0))|0);
 $512 = tempRet0;
 $513 = $56;
 $514 = $513;
 HEAP32[$514>>2] = $511;
 $515 = (($513) + 4)|0;
 $516 = $515;
 HEAP32[$516>>2] = $512;
 $517 = $17;
 $518 = ($517|0)<(0);
 $519 = $518 << 31 >> 31;
 $520 = $10;
 $521 = ($520|0)<(0);
 $522 = $521 << 31 >> 31;
 $523 = (___muldi3(($517|0),($519|0),($520|0),($522|0))|0);
 $524 = tempRet0;
 $525 = $57;
 $526 = $525;
 HEAP32[$526>>2] = $523;
 $527 = (($525) + 4)|0;
 $528 = $527;
 HEAP32[$528>>2] = $524;
 $529 = $17;
 $530 = ($529|0)<(0);
 $531 = $530 << 31 >> 31;
 $532 = $24;
 $533 = ($532|0)<(0);
 $534 = $533 << 31 >> 31;
 $535 = (___muldi3(($529|0),($531|0),($532|0),($534|0))|0);
 $536 = tempRet0;
 $537 = $58;
 $538 = $537;
 HEAP32[$538>>2] = $535;
 $539 = (($537) + 4)|0;
 $540 = $539;
 HEAP32[$540>>2] = $536;
 $541 = $17;
 $542 = ($541|0)<(0);
 $543 = $542 << 31 >> 31;
 $544 = $25;
 $545 = ($544|0)<(0);
 $546 = $545 << 31 >> 31;
 $547 = (___muldi3(($541|0),($543|0),($544|0),($546|0))|0);
 $548 = tempRet0;
 $549 = $59;
 $550 = $549;
 HEAP32[$550>>2] = $547;
 $551 = (($549) + 4)|0;
 $552 = $551;
 HEAP32[$552>>2] = $548;
 $553 = $17;
 $554 = ($553|0)<(0);
 $555 = $554 << 31 >> 31;
 $556 = $26;
 $557 = ($556|0)<(0);
 $558 = $557 << 31 >> 31;
 $559 = (___muldi3(($553|0),($555|0),($556|0),($558|0))|0);
 $560 = tempRet0;
 $561 = $60;
 $562 = $561;
 HEAP32[$562>>2] = $559;
 $563 = (($561) + 4)|0;
 $564 = $563;
 HEAP32[$564>>2] = $560;
 $565 = $8;
 $566 = ($565|0)<(0);
 $567 = $566 << 31 >> 31;
 $568 = $8;
 $569 = ($568|0)<(0);
 $570 = $569 << 31 >> 31;
 $571 = (___muldi3(($565|0),($567|0),($568|0),($570|0))|0);
 $572 = tempRet0;
 $573 = $61;
 $574 = $573;
 HEAP32[$574>>2] = $571;
 $575 = (($573) + 4)|0;
 $576 = $575;
 HEAP32[$576>>2] = $572;
 $577 = $18;
 $578 = ($577|0)<(0);
 $579 = $578 << 31 >> 31;
 $580 = $9;
 $581 = ($580|0)<(0);
 $582 = $581 << 31 >> 31;
 $583 = (___muldi3(($577|0),($579|0),($580|0),($582|0))|0);
 $584 = tempRet0;
 $585 = $62;
 $586 = $585;
 HEAP32[$586>>2] = $583;
 $587 = (($585) + 4)|0;
 $588 = $587;
 HEAP32[$588>>2] = $584;
 $589 = $18;
 $590 = ($589|0)<(0);
 $591 = $590 << 31 >> 31;
 $592 = $23;
 $593 = ($592|0)<(0);
 $594 = $593 << 31 >> 31;
 $595 = (___muldi3(($589|0),($591|0),($592|0),($594|0))|0);
 $596 = tempRet0;
 $597 = $63;
 $598 = $597;
 HEAP32[$598>>2] = $595;
 $599 = (($597) + 4)|0;
 $600 = $599;
 HEAP32[$600>>2] = $596;
 $601 = $8;
 $602 = ($601|0)<(0);
 $603 = $602 << 31 >> 31;
 $604 = $24;
 $605 = ($604|0)<(0);
 $606 = $605 << 31 >> 31;
 $607 = (___muldi3(($601|0),($603|0),($604|0),($606|0))|0);
 $608 = tempRet0;
 $609 = $64;
 $610 = $609;
 HEAP32[$610>>2] = $607;
 $611 = (($609) + 4)|0;
 $612 = $611;
 HEAP32[$612>>2] = $608;
 $613 = $18;
 $614 = ($613|0)<(0);
 $615 = $614 << 31 >> 31;
 $616 = $25;
 $617 = ($616|0)<(0);
 $618 = $617 << 31 >> 31;
 $619 = (___muldi3(($613|0),($615|0),($616|0),($618|0))|0);
 $620 = tempRet0;
 $621 = $65;
 $622 = $621;
 HEAP32[$622>>2] = $619;
 $623 = (($621) + 4)|0;
 $624 = $623;
 HEAP32[$624>>2] = $620;
 $625 = $8;
 $626 = ($625|0)<(0);
 $627 = $626 << 31 >> 31;
 $628 = $26;
 $629 = ($628|0)<(0);
 $630 = $629 << 31 >> 31;
 $631 = (___muldi3(($625|0),($627|0),($628|0),($630|0))|0);
 $632 = tempRet0;
 $633 = $66;
 $634 = $633;
 HEAP32[$634>>2] = $631;
 $635 = (($633) + 4)|0;
 $636 = $635;
 HEAP32[$636>>2] = $632;
 $637 = $9;
 $638 = ($637|0)<(0);
 $639 = $638 << 31 >> 31;
 $640 = $22;
 $641 = ($640|0)<(0);
 $642 = $641 << 31 >> 31;
 $643 = (___muldi3(($637|0),($639|0),($640|0),($642|0))|0);
 $644 = tempRet0;
 $645 = $67;
 $646 = $645;
 HEAP32[$646>>2] = $643;
 $647 = (($645) + 4)|0;
 $648 = $647;
 HEAP32[$648>>2] = $644;
 $649 = $19;
 $650 = ($649|0)<(0);
 $651 = $650 << 31 >> 31;
 $652 = $23;
 $653 = ($652|0)<(0);
 $654 = $653 << 31 >> 31;
 $655 = (___muldi3(($649|0),($651|0),($652|0),($654|0))|0);
 $656 = tempRet0;
 $657 = $68;
 $658 = $657;
 HEAP32[$658>>2] = $655;
 $659 = (($657) + 4)|0;
 $660 = $659;
 HEAP32[$660>>2] = $656;
 $661 = $19;
 $662 = ($661|0)<(0);
 $663 = $662 << 31 >> 31;
 $664 = $24;
 $665 = ($664|0)<(0);
 $666 = $665 << 31 >> 31;
 $667 = (___muldi3(($661|0),($663|0),($664|0),($666|0))|0);
 $668 = tempRet0;
 $669 = $69;
 $670 = $669;
 HEAP32[$670>>2] = $667;
 $671 = (($669) + 4)|0;
 $672 = $671;
 HEAP32[$672>>2] = $668;
 $673 = $19;
 $674 = ($673|0)<(0);
 $675 = $674 << 31 >> 31;
 $676 = $25;
 $677 = ($676|0)<(0);
 $678 = $677 << 31 >> 31;
 $679 = (___muldi3(($673|0),($675|0),($676|0),($678|0))|0);
 $680 = tempRet0;
 $681 = $70;
 $682 = $681;
 HEAP32[$682>>2] = $679;
 $683 = (($681) + 4)|0;
 $684 = $683;
 HEAP32[$684>>2] = $680;
 $685 = $19;
 $686 = ($685|0)<(0);
 $687 = $686 << 31 >> 31;
 $688 = $26;
 $689 = ($688|0)<(0);
 $690 = $689 << 31 >> 31;
 $691 = (___muldi3(($685|0),($687|0),($688|0),($690|0))|0);
 $692 = tempRet0;
 $693 = $71;
 $694 = $693;
 HEAP32[$694>>2] = $691;
 $695 = (($693) + 4)|0;
 $696 = $695;
 HEAP32[$696>>2] = $692;
 $697 = $10;
 $698 = ($697|0)<(0);
 $699 = $698 << 31 >> 31;
 $700 = $23;
 $701 = ($700|0)<(0);
 $702 = $701 << 31 >> 31;
 $703 = (___muldi3(($697|0),($699|0),($700|0),($702|0))|0);
 $704 = tempRet0;
 $705 = $72;
 $706 = $705;
 HEAP32[$706>>2] = $703;
 $707 = (($705) + 4)|0;
 $708 = $707;
 HEAP32[$708>>2] = $704;
 $709 = $10;
 $710 = ($709|0)<(0);
 $711 = $710 << 31 >> 31;
 $712 = $24;
 $713 = ($712|0)<(0);
 $714 = $713 << 31 >> 31;
 $715 = (___muldi3(($709|0),($711|0),($712|0),($714|0))|0);
 $716 = tempRet0;
 $717 = $73;
 $718 = $717;
 HEAP32[$718>>2] = $715;
 $719 = (($717) + 4)|0;
 $720 = $719;
 HEAP32[$720>>2] = $716;
 $721 = $20;
 $722 = ($721|0)<(0);
 $723 = $722 << 31 >> 31;
 $724 = $25;
 $725 = ($724|0)<(0);
 $726 = $725 << 31 >> 31;
 $727 = (___muldi3(($721|0),($723|0),($724|0),($726|0))|0);
 $728 = tempRet0;
 $729 = $74;
 $730 = $729;
 HEAP32[$730>>2] = $727;
 $731 = (($729) + 4)|0;
 $732 = $731;
 HEAP32[$732>>2] = $728;
 $733 = $10;
 $734 = ($733|0)<(0);
 $735 = $734 << 31 >> 31;
 $736 = $26;
 $737 = ($736|0)<(0);
 $738 = $737 << 31 >> 31;
 $739 = (___muldi3(($733|0),($735|0),($736|0),($738|0))|0);
 $740 = tempRet0;
 $741 = $75;
 $742 = $741;
 HEAP32[$742>>2] = $739;
 $743 = (($741) + 4)|0;
 $744 = $743;
 HEAP32[$744>>2] = $740;
 $745 = $11;
 $746 = ($745|0)<(0);
 $747 = $746 << 31 >> 31;
 $748 = $24;
 $749 = ($748|0)<(0);
 $750 = $749 << 31 >> 31;
 $751 = (___muldi3(($745|0),($747|0),($748|0),($750|0))|0);
 $752 = tempRet0;
 $753 = $76;
 $754 = $753;
 HEAP32[$754>>2] = $751;
 $755 = (($753) + 4)|0;
 $756 = $755;
 HEAP32[$756>>2] = $752;
 $757 = $21;
 $758 = ($757|0)<(0);
 $759 = $758 << 31 >> 31;
 $760 = $25;
 $761 = ($760|0)<(0);
 $762 = $761 << 31 >> 31;
 $763 = (___muldi3(($757|0),($759|0),($760|0),($762|0))|0);
 $764 = tempRet0;
 $765 = $77;
 $766 = $765;
 HEAP32[$766>>2] = $763;
 $767 = (($765) + 4)|0;
 $768 = $767;
 HEAP32[$768>>2] = $764;
 $769 = $21;
 $770 = ($769|0)<(0);
 $771 = $770 << 31 >> 31;
 $772 = $26;
 $773 = ($772|0)<(0);
 $774 = $773 << 31 >> 31;
 $775 = (___muldi3(($769|0),($771|0),($772|0),($774|0))|0);
 $776 = tempRet0;
 $777 = $78;
 $778 = $777;
 HEAP32[$778>>2] = $775;
 $779 = (($777) + 4)|0;
 $780 = $779;
 HEAP32[$780>>2] = $776;
 $781 = $12;
 $782 = ($781|0)<(0);
 $783 = $782 << 31 >> 31;
 $784 = $25;
 $785 = ($784|0)<(0);
 $786 = $785 << 31 >> 31;
 $787 = (___muldi3(($781|0),($783|0),($784|0),($786|0))|0);
 $788 = tempRet0;
 $789 = $79;
 $790 = $789;
 HEAP32[$790>>2] = $787;
 $791 = (($789) + 4)|0;
 $792 = $791;
 HEAP32[$792>>2] = $788;
 $793 = $12;
 $794 = ($793|0)<(0);
 $795 = $794 << 31 >> 31;
 $796 = $26;
 $797 = ($796|0)<(0);
 $798 = $797 << 31 >> 31;
 $799 = (___muldi3(($793|0),($795|0),($796|0),($798|0))|0);
 $800 = tempRet0;
 $801 = $80;
 $802 = $801;
 HEAP32[$802>>2] = $799;
 $803 = (($801) + 4)|0;
 $804 = $803;
 HEAP32[$804>>2] = $800;
 $805 = $13;
 $806 = ($805|0)<(0);
 $807 = $806 << 31 >> 31;
 $808 = $26;
 $809 = ($808|0)<(0);
 $810 = $809 << 31 >> 31;
 $811 = (___muldi3(($805|0),($807|0),($808|0),($810|0))|0);
 $812 = tempRet0;
 $813 = $81;
 $814 = $813;
 HEAP32[$814>>2] = $811;
 $815 = (($813) + 4)|0;
 $816 = $815;
 HEAP32[$816>>2] = $812;
 $817 = $27;
 $818 = $817;
 $819 = HEAP32[$818>>2]|0;
 $820 = (($817) + 4)|0;
 $821 = $820;
 $822 = HEAP32[$821>>2]|0;
 $823 = $45;
 $824 = $823;
 $825 = HEAP32[$824>>2]|0;
 $826 = (($823) + 4)|0;
 $827 = $826;
 $828 = HEAP32[$827>>2]|0;
 $829 = (_i64Add(($819|0),($822|0),($825|0),($828|0))|0);
 $830 = tempRet0;
 $831 = $52;
 $832 = $831;
 $833 = HEAP32[$832>>2]|0;
 $834 = (($831) + 4)|0;
 $835 = $834;
 $836 = HEAP32[$835>>2]|0;
 $837 = (_i64Add(($829|0),($830|0),($833|0),($836|0))|0);
 $838 = tempRet0;
 $839 = $58;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (_i64Add(($837|0),($838|0),($841|0),($844|0))|0);
 $846 = tempRet0;
 $847 = $63;
 $848 = $847;
 $849 = HEAP32[$848>>2]|0;
 $850 = (($847) + 4)|0;
 $851 = $850;
 $852 = HEAP32[$851>>2]|0;
 $853 = (_i64Add(($845|0),($846|0),($849|0),($852|0))|0);
 $854 = tempRet0;
 $855 = $67;
 $856 = $855;
 $857 = HEAP32[$856>>2]|0;
 $858 = (($855) + 4)|0;
 $859 = $858;
 $860 = HEAP32[$859>>2]|0;
 $861 = (_i64Add(($853|0),($854|0),($857|0),($860|0))|0);
 $862 = tempRet0;
 $863 = $82;
 $864 = $863;
 HEAP32[$864>>2] = $861;
 $865 = (($863) + 4)|0;
 $866 = $865;
 HEAP32[$866>>2] = $862;
 $867 = $28;
 $868 = $867;
 $869 = HEAP32[$868>>2]|0;
 $870 = (($867) + 4)|0;
 $871 = $870;
 $872 = HEAP32[$871>>2]|0;
 $873 = $53;
 $874 = $873;
 $875 = HEAP32[$874>>2]|0;
 $876 = (($873) + 4)|0;
 $877 = $876;
 $878 = HEAP32[$877>>2]|0;
 $879 = (_i64Add(($869|0),($872|0),($875|0),($878|0))|0);
 $880 = tempRet0;
 $881 = $59;
 $882 = $881;
 $883 = HEAP32[$882>>2]|0;
 $884 = (($881) + 4)|0;
 $885 = $884;
 $886 = HEAP32[$885>>2]|0;
 $887 = (_i64Add(($879|0),($880|0),($883|0),($886|0))|0);
 $888 = tempRet0;
 $889 = $64;
 $890 = $889;
 $891 = HEAP32[$890>>2]|0;
 $892 = (($889) + 4)|0;
 $893 = $892;
 $894 = HEAP32[$893>>2]|0;
 $895 = (_i64Add(($887|0),($888|0),($891|0),($894|0))|0);
 $896 = tempRet0;
 $897 = $68;
 $898 = $897;
 $899 = HEAP32[$898>>2]|0;
 $900 = (($897) + 4)|0;
 $901 = $900;
 $902 = HEAP32[$901>>2]|0;
 $903 = (_i64Add(($895|0),($896|0),($899|0),($902|0))|0);
 $904 = tempRet0;
 $905 = $83;
 $906 = $905;
 HEAP32[$906>>2] = $903;
 $907 = (($905) + 4)|0;
 $908 = $907;
 HEAP32[$908>>2] = $904;
 $909 = $29;
 $910 = $909;
 $911 = HEAP32[$910>>2]|0;
 $912 = (($909) + 4)|0;
 $913 = $912;
 $914 = HEAP32[$913>>2]|0;
 $915 = $37;
 $916 = $915;
 $917 = HEAP32[$916>>2]|0;
 $918 = (($915) + 4)|0;
 $919 = $918;
 $920 = HEAP32[$919>>2]|0;
 $921 = (_i64Add(($911|0),($914|0),($917|0),($920|0))|0);
 $922 = tempRet0;
 $923 = $60;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_i64Add(($921|0),($922|0),($925|0),($928|0))|0);
 $930 = tempRet0;
 $931 = $65;
 $932 = $931;
 $933 = HEAP32[$932>>2]|0;
 $934 = (($931) + 4)|0;
 $935 = $934;
 $936 = HEAP32[$935>>2]|0;
 $937 = (_i64Add(($929|0),($930|0),($933|0),($936|0))|0);
 $938 = tempRet0;
 $939 = $69;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (_i64Add(($937|0),($938|0),($941|0),($944|0))|0);
 $946 = tempRet0;
 $947 = $72;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($945|0),($946|0),($949|0),($952|0))|0);
 $954 = tempRet0;
 $955 = $84;
 $956 = $955;
 HEAP32[$956>>2] = $953;
 $957 = (($955) + 4)|0;
 $958 = $957;
 HEAP32[$958>>2] = $954;
 $959 = $30;
 $960 = $959;
 $961 = HEAP32[$960>>2]|0;
 $962 = (($959) + 4)|0;
 $963 = $962;
 $964 = HEAP32[$963>>2]|0;
 $965 = $38;
 $966 = $965;
 $967 = HEAP32[$966>>2]|0;
 $968 = (($965) + 4)|0;
 $969 = $968;
 $970 = HEAP32[$969>>2]|0;
 $971 = (_i64Add(($961|0),($964|0),($967|0),($970|0))|0);
 $972 = tempRet0;
 $973 = $66;
 $974 = $973;
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + 4)|0;
 $977 = $976;
 $978 = HEAP32[$977>>2]|0;
 $979 = (_i64Add(($971|0),($972|0),($975|0),($978|0))|0);
 $980 = tempRet0;
 $981 = $70;
 $982 = $981;
 $983 = HEAP32[$982>>2]|0;
 $984 = (($981) + 4)|0;
 $985 = $984;
 $986 = HEAP32[$985>>2]|0;
 $987 = (_i64Add(($979|0),($980|0),($983|0),($986|0))|0);
 $988 = tempRet0;
 $989 = $73;
 $990 = $989;
 $991 = HEAP32[$990>>2]|0;
 $992 = (($989) + 4)|0;
 $993 = $992;
 $994 = HEAP32[$993>>2]|0;
 $995 = (_i64Add(($987|0),($988|0),($991|0),($994|0))|0);
 $996 = tempRet0;
 $997 = $85;
 $998 = $997;
 HEAP32[$998>>2] = $995;
 $999 = (($997) + 4)|0;
 $1000 = $999;
 HEAP32[$1000>>2] = $996;
 $1001 = $31;
 $1002 = $1001;
 $1003 = HEAP32[$1002>>2]|0;
 $1004 = (($1001) + 4)|0;
 $1005 = $1004;
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = $39;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (_i64Add(($1003|0),($1006|0),($1009|0),($1012|0))|0);
 $1014 = tempRet0;
 $1015 = $46;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (_i64Add(($1013|0),($1014|0),($1017|0),($1020|0))|0);
 $1022 = tempRet0;
 $1023 = $71;
 $1024 = $1023;
 $1025 = HEAP32[$1024>>2]|0;
 $1026 = (($1023) + 4)|0;
 $1027 = $1026;
 $1028 = HEAP32[$1027>>2]|0;
 $1029 = (_i64Add(($1021|0),($1022|0),($1025|0),($1028|0))|0);
 $1030 = tempRet0;
 $1031 = $74;
 $1032 = $1031;
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + 4)|0;
 $1035 = $1034;
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = (_i64Add(($1029|0),($1030|0),($1033|0),($1036|0))|0);
 $1038 = tempRet0;
 $1039 = $76;
 $1040 = $1039;
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = (($1039) + 4)|0;
 $1043 = $1042;
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (_i64Add(($1037|0),($1038|0),($1041|0),($1044|0))|0);
 $1046 = tempRet0;
 $1047 = $86;
 $1048 = $1047;
 HEAP32[$1048>>2] = $1045;
 $1049 = (($1047) + 4)|0;
 $1050 = $1049;
 HEAP32[$1050>>2] = $1046;
 $1051 = $32;
 $1052 = $1051;
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + 4)|0;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = $40;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($1057) + 4)|0;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = (_i64Add(($1053|0),($1056|0),($1059|0),($1062|0))|0);
 $1064 = tempRet0;
 $1065 = $47;
 $1066 = $1065;
 $1067 = HEAP32[$1066>>2]|0;
 $1068 = (($1065) + 4)|0;
 $1069 = $1068;
 $1070 = HEAP32[$1069>>2]|0;
 $1071 = (_i64Add(($1063|0),($1064|0),($1067|0),($1070|0))|0);
 $1072 = tempRet0;
 $1073 = $75;
 $1074 = $1073;
 $1075 = HEAP32[$1074>>2]|0;
 $1076 = (($1073) + 4)|0;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = (_i64Add(($1071|0),($1072|0),($1075|0),($1078|0))|0);
 $1080 = tempRet0;
 $1081 = $77;
 $1082 = $1081;
 $1083 = HEAP32[$1082>>2]|0;
 $1084 = (($1081) + 4)|0;
 $1085 = $1084;
 $1086 = HEAP32[$1085>>2]|0;
 $1087 = (_i64Add(($1079|0),($1080|0),($1083|0),($1086|0))|0);
 $1088 = tempRet0;
 $1089 = $87;
 $1090 = $1089;
 HEAP32[$1090>>2] = $1087;
 $1091 = (($1089) + 4)|0;
 $1092 = $1091;
 HEAP32[$1092>>2] = $1088;
 $1093 = $33;
 $1094 = $1093;
 $1095 = HEAP32[$1094>>2]|0;
 $1096 = (($1093) + 4)|0;
 $1097 = $1096;
 $1098 = HEAP32[$1097>>2]|0;
 $1099 = $41;
 $1100 = $1099;
 $1101 = HEAP32[$1100>>2]|0;
 $1102 = (($1099) + 4)|0;
 $1103 = $1102;
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = (_i64Add(($1095|0),($1098|0),($1101|0),($1104|0))|0);
 $1106 = tempRet0;
 $1107 = $48;
 $1108 = $1107;
 $1109 = HEAP32[$1108>>2]|0;
 $1110 = (($1107) + 4)|0;
 $1111 = $1110;
 $1112 = HEAP32[$1111>>2]|0;
 $1113 = (_i64Add(($1105|0),($1106|0),($1109|0),($1112|0))|0);
 $1114 = tempRet0;
 $1115 = $54;
 $1116 = $1115;
 $1117 = HEAP32[$1116>>2]|0;
 $1118 = (($1115) + 4)|0;
 $1119 = $1118;
 $1120 = HEAP32[$1119>>2]|0;
 $1121 = (_i64Add(($1113|0),($1114|0),($1117|0),($1120|0))|0);
 $1122 = tempRet0;
 $1123 = $78;
 $1124 = $1123;
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = (($1123) + 4)|0;
 $1127 = $1126;
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = (_i64Add(($1121|0),($1122|0),($1125|0),($1128|0))|0);
 $1130 = tempRet0;
 $1131 = $79;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = (_i64Add(($1129|0),($1130|0),($1133|0),($1136|0))|0);
 $1138 = tempRet0;
 $1139 = $88;
 $1140 = $1139;
 HEAP32[$1140>>2] = $1137;
 $1141 = (($1139) + 4)|0;
 $1142 = $1141;
 HEAP32[$1142>>2] = $1138;
 $1143 = $34;
 $1144 = $1143;
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + 4)|0;
 $1147 = $1146;
 $1148 = HEAP32[$1147>>2]|0;
 $1149 = $42;
 $1150 = $1149;
 $1151 = HEAP32[$1150>>2]|0;
 $1152 = (($1149) + 4)|0;
 $1153 = $1152;
 $1154 = HEAP32[$1153>>2]|0;
 $1155 = (_i64Add(($1145|0),($1148|0),($1151|0),($1154|0))|0);
 $1156 = tempRet0;
 $1157 = $49;
 $1158 = $1157;
 $1159 = HEAP32[$1158>>2]|0;
 $1160 = (($1157) + 4)|0;
 $1161 = $1160;
 $1162 = HEAP32[$1161>>2]|0;
 $1163 = (_i64Add(($1155|0),($1156|0),($1159|0),($1162|0))|0);
 $1164 = tempRet0;
 $1165 = $55;
 $1166 = $1165;
 $1167 = HEAP32[$1166>>2]|0;
 $1168 = (($1165) + 4)|0;
 $1169 = $1168;
 $1170 = HEAP32[$1169>>2]|0;
 $1171 = (_i64Add(($1163|0),($1164|0),($1167|0),($1170|0))|0);
 $1172 = tempRet0;
 $1173 = $80;
 $1174 = $1173;
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = (($1173) + 4)|0;
 $1177 = $1176;
 $1178 = HEAP32[$1177>>2]|0;
 $1179 = (_i64Add(($1171|0),($1172|0),($1175|0),($1178|0))|0);
 $1180 = tempRet0;
 $1181 = $89;
 $1182 = $1181;
 HEAP32[$1182>>2] = $1179;
 $1183 = (($1181) + 4)|0;
 $1184 = $1183;
 HEAP32[$1184>>2] = $1180;
 $1185 = $35;
 $1186 = $1185;
 $1187 = HEAP32[$1186>>2]|0;
 $1188 = (($1185) + 4)|0;
 $1189 = $1188;
 $1190 = HEAP32[$1189>>2]|0;
 $1191 = $43;
 $1192 = $1191;
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + 4)|0;
 $1195 = $1194;
 $1196 = HEAP32[$1195>>2]|0;
 $1197 = (_i64Add(($1187|0),($1190|0),($1193|0),($1196|0))|0);
 $1198 = tempRet0;
 $1199 = $50;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1197|0),($1198|0),($1201|0),($1204|0))|0);
 $1206 = tempRet0;
 $1207 = $56;
 $1208 = $1207;
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1207) + 4)|0;
 $1211 = $1210;
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = (_i64Add(($1205|0),($1206|0),($1209|0),($1212|0))|0);
 $1214 = tempRet0;
 $1215 = $61;
 $1216 = $1215;
 $1217 = HEAP32[$1216>>2]|0;
 $1218 = (($1215) + 4)|0;
 $1219 = $1218;
 $1220 = HEAP32[$1219>>2]|0;
 $1221 = (_i64Add(($1213|0),($1214|0),($1217|0),($1220|0))|0);
 $1222 = tempRet0;
 $1223 = $81;
 $1224 = $1223;
 $1225 = HEAP32[$1224>>2]|0;
 $1226 = (($1223) + 4)|0;
 $1227 = $1226;
 $1228 = HEAP32[$1227>>2]|0;
 $1229 = (_i64Add(($1221|0),($1222|0),($1225|0),($1228|0))|0);
 $1230 = tempRet0;
 $1231 = $90;
 $1232 = $1231;
 HEAP32[$1232>>2] = $1229;
 $1233 = (($1231) + 4)|0;
 $1234 = $1233;
 HEAP32[$1234>>2] = $1230;
 $1235 = $36;
 $1236 = $1235;
 $1237 = HEAP32[$1236>>2]|0;
 $1238 = (($1235) + 4)|0;
 $1239 = $1238;
 $1240 = HEAP32[$1239>>2]|0;
 $1241 = $44;
 $1242 = $1241;
 $1243 = HEAP32[$1242>>2]|0;
 $1244 = (($1241) + 4)|0;
 $1245 = $1244;
 $1246 = HEAP32[$1245>>2]|0;
 $1247 = (_i64Add(($1237|0),($1240|0),($1243|0),($1246|0))|0);
 $1248 = tempRet0;
 $1249 = $51;
 $1250 = $1249;
 $1251 = HEAP32[$1250>>2]|0;
 $1252 = (($1249) + 4)|0;
 $1253 = $1252;
 $1254 = HEAP32[$1253>>2]|0;
 $1255 = (_i64Add(($1247|0),($1248|0),($1251|0),($1254|0))|0);
 $1256 = tempRet0;
 $1257 = $57;
 $1258 = $1257;
 $1259 = HEAP32[$1258>>2]|0;
 $1260 = (($1257) + 4)|0;
 $1261 = $1260;
 $1262 = HEAP32[$1261>>2]|0;
 $1263 = (_i64Add(($1255|0),($1256|0),($1259|0),($1262|0))|0);
 $1264 = tempRet0;
 $1265 = $62;
 $1266 = $1265;
 $1267 = HEAP32[$1266>>2]|0;
 $1268 = (($1265) + 4)|0;
 $1269 = $1268;
 $1270 = HEAP32[$1269>>2]|0;
 $1271 = (_i64Add(($1263|0),($1264|0),($1267|0),($1270|0))|0);
 $1272 = tempRet0;
 $1273 = $91;
 $1274 = $1273;
 HEAP32[$1274>>2] = $1271;
 $1275 = (($1273) + 4)|0;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1272;
 $1277 = $82;
 $1278 = $1277;
 $1279 = HEAP32[$1278>>2]|0;
 $1280 = (($1277) + 4)|0;
 $1281 = $1280;
 $1282 = HEAP32[$1281>>2]|0;
 $1283 = (_i64Add(($1279|0),($1282|0),33554432,0)|0);
 $1284 = tempRet0;
 $1285 = (_bitshift64Ashr(($1283|0),($1284|0),26)|0);
 $1286 = tempRet0;
 $1287 = $92;
 $1288 = $1287;
 HEAP32[$1288>>2] = $1285;
 $1289 = (($1287) + 4)|0;
 $1290 = $1289;
 HEAP32[$1290>>2] = $1286;
 $1291 = $92;
 $1292 = $1291;
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + 4)|0;
 $1295 = $1294;
 $1296 = HEAP32[$1295>>2]|0;
 $1297 = $83;
 $1298 = $1297;
 $1299 = HEAP32[$1298>>2]|0;
 $1300 = (($1297) + 4)|0;
 $1301 = $1300;
 $1302 = HEAP32[$1301>>2]|0;
 $1303 = (_i64Add(($1299|0),($1302|0),($1293|0),($1296|0))|0);
 $1304 = tempRet0;
 $1305 = $83;
 $1306 = $1305;
 HEAP32[$1306>>2] = $1303;
 $1307 = (($1305) + 4)|0;
 $1308 = $1307;
 HEAP32[$1308>>2] = $1304;
 $1309 = $92;
 $1310 = $1309;
 $1311 = HEAP32[$1310>>2]|0;
 $1312 = (($1309) + 4)|0;
 $1313 = $1312;
 $1314 = HEAP32[$1313>>2]|0;
 $1315 = (_bitshift64Shl(($1311|0),($1314|0),26)|0);
 $1316 = tempRet0;
 $1317 = $82;
 $1318 = $1317;
 $1319 = HEAP32[$1318>>2]|0;
 $1320 = (($1317) + 4)|0;
 $1321 = $1320;
 $1322 = HEAP32[$1321>>2]|0;
 $1323 = (_i64Subtract(($1319|0),($1322|0),($1315|0),($1316|0))|0);
 $1324 = tempRet0;
 $1325 = $82;
 $1326 = $1325;
 HEAP32[$1326>>2] = $1323;
 $1327 = (($1325) + 4)|0;
 $1328 = $1327;
 HEAP32[$1328>>2] = $1324;
 $1329 = $86;
 $1330 = $1329;
 $1331 = HEAP32[$1330>>2]|0;
 $1332 = (($1329) + 4)|0;
 $1333 = $1332;
 $1334 = HEAP32[$1333>>2]|0;
 $1335 = (_i64Add(($1331|0),($1334|0),33554432,0)|0);
 $1336 = tempRet0;
 $1337 = (_bitshift64Ashr(($1335|0),($1336|0),26)|0);
 $1338 = tempRet0;
 $1339 = $96;
 $1340 = $1339;
 HEAP32[$1340>>2] = $1337;
 $1341 = (($1339) + 4)|0;
 $1342 = $1341;
 HEAP32[$1342>>2] = $1338;
 $1343 = $96;
 $1344 = $1343;
 $1345 = HEAP32[$1344>>2]|0;
 $1346 = (($1343) + 4)|0;
 $1347 = $1346;
 $1348 = HEAP32[$1347>>2]|0;
 $1349 = $87;
 $1350 = $1349;
 $1351 = HEAP32[$1350>>2]|0;
 $1352 = (($1349) + 4)|0;
 $1353 = $1352;
 $1354 = HEAP32[$1353>>2]|0;
 $1355 = (_i64Add(($1351|0),($1354|0),($1345|0),($1348|0))|0);
 $1356 = tempRet0;
 $1357 = $87;
 $1358 = $1357;
 HEAP32[$1358>>2] = $1355;
 $1359 = (($1357) + 4)|0;
 $1360 = $1359;
 HEAP32[$1360>>2] = $1356;
 $1361 = $96;
 $1362 = $1361;
 $1363 = HEAP32[$1362>>2]|0;
 $1364 = (($1361) + 4)|0;
 $1365 = $1364;
 $1366 = HEAP32[$1365>>2]|0;
 $1367 = (_bitshift64Shl(($1363|0),($1366|0),26)|0);
 $1368 = tempRet0;
 $1369 = $86;
 $1370 = $1369;
 $1371 = HEAP32[$1370>>2]|0;
 $1372 = (($1369) + 4)|0;
 $1373 = $1372;
 $1374 = HEAP32[$1373>>2]|0;
 $1375 = (_i64Subtract(($1371|0),($1374|0),($1367|0),($1368|0))|0);
 $1376 = tempRet0;
 $1377 = $86;
 $1378 = $1377;
 HEAP32[$1378>>2] = $1375;
 $1379 = (($1377) + 4)|0;
 $1380 = $1379;
 HEAP32[$1380>>2] = $1376;
 $1381 = $83;
 $1382 = $1381;
 $1383 = HEAP32[$1382>>2]|0;
 $1384 = (($1381) + 4)|0;
 $1385 = $1384;
 $1386 = HEAP32[$1385>>2]|0;
 $1387 = (_i64Add(($1383|0),($1386|0),16777216,0)|0);
 $1388 = tempRet0;
 $1389 = (_bitshift64Ashr(($1387|0),($1388|0),25)|0);
 $1390 = tempRet0;
 $1391 = $93;
 $1392 = $1391;
 HEAP32[$1392>>2] = $1389;
 $1393 = (($1391) + 4)|0;
 $1394 = $1393;
 HEAP32[$1394>>2] = $1390;
 $1395 = $93;
 $1396 = $1395;
 $1397 = HEAP32[$1396>>2]|0;
 $1398 = (($1395) + 4)|0;
 $1399 = $1398;
 $1400 = HEAP32[$1399>>2]|0;
 $1401 = $84;
 $1402 = $1401;
 $1403 = HEAP32[$1402>>2]|0;
 $1404 = (($1401) + 4)|0;
 $1405 = $1404;
 $1406 = HEAP32[$1405>>2]|0;
 $1407 = (_i64Add(($1403|0),($1406|0),($1397|0),($1400|0))|0);
 $1408 = tempRet0;
 $1409 = $84;
 $1410 = $1409;
 HEAP32[$1410>>2] = $1407;
 $1411 = (($1409) + 4)|0;
 $1412 = $1411;
 HEAP32[$1412>>2] = $1408;
 $1413 = $93;
 $1414 = $1413;
 $1415 = HEAP32[$1414>>2]|0;
 $1416 = (($1413) + 4)|0;
 $1417 = $1416;
 $1418 = HEAP32[$1417>>2]|0;
 $1419 = (_bitshift64Shl(($1415|0),($1418|0),25)|0);
 $1420 = tempRet0;
 $1421 = $83;
 $1422 = $1421;
 $1423 = HEAP32[$1422>>2]|0;
 $1424 = (($1421) + 4)|0;
 $1425 = $1424;
 $1426 = HEAP32[$1425>>2]|0;
 $1427 = (_i64Subtract(($1423|0),($1426|0),($1419|0),($1420|0))|0);
 $1428 = tempRet0;
 $1429 = $83;
 $1430 = $1429;
 HEAP32[$1430>>2] = $1427;
 $1431 = (($1429) + 4)|0;
 $1432 = $1431;
 HEAP32[$1432>>2] = $1428;
 $1433 = $87;
 $1434 = $1433;
 $1435 = HEAP32[$1434>>2]|0;
 $1436 = (($1433) + 4)|0;
 $1437 = $1436;
 $1438 = HEAP32[$1437>>2]|0;
 $1439 = (_i64Add(($1435|0),($1438|0),16777216,0)|0);
 $1440 = tempRet0;
 $1441 = (_bitshift64Ashr(($1439|0),($1440|0),25)|0);
 $1442 = tempRet0;
 $1443 = $97;
 $1444 = $1443;
 HEAP32[$1444>>2] = $1441;
 $1445 = (($1443) + 4)|0;
 $1446 = $1445;
 HEAP32[$1446>>2] = $1442;
 $1447 = $97;
 $1448 = $1447;
 $1449 = HEAP32[$1448>>2]|0;
 $1450 = (($1447) + 4)|0;
 $1451 = $1450;
 $1452 = HEAP32[$1451>>2]|0;
 $1453 = $88;
 $1454 = $1453;
 $1455 = HEAP32[$1454>>2]|0;
 $1456 = (($1453) + 4)|0;
 $1457 = $1456;
 $1458 = HEAP32[$1457>>2]|0;
 $1459 = (_i64Add(($1455|0),($1458|0),($1449|0),($1452|0))|0);
 $1460 = tempRet0;
 $1461 = $88;
 $1462 = $1461;
 HEAP32[$1462>>2] = $1459;
 $1463 = (($1461) + 4)|0;
 $1464 = $1463;
 HEAP32[$1464>>2] = $1460;
 $1465 = $97;
 $1466 = $1465;
 $1467 = HEAP32[$1466>>2]|0;
 $1468 = (($1465) + 4)|0;
 $1469 = $1468;
 $1470 = HEAP32[$1469>>2]|0;
 $1471 = (_bitshift64Shl(($1467|0),($1470|0),25)|0);
 $1472 = tempRet0;
 $1473 = $87;
 $1474 = $1473;
 $1475 = HEAP32[$1474>>2]|0;
 $1476 = (($1473) + 4)|0;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = (_i64Subtract(($1475|0),($1478|0),($1471|0),($1472|0))|0);
 $1480 = tempRet0;
 $1481 = $87;
 $1482 = $1481;
 HEAP32[$1482>>2] = $1479;
 $1483 = (($1481) + 4)|0;
 $1484 = $1483;
 HEAP32[$1484>>2] = $1480;
 $1485 = $84;
 $1486 = $1485;
 $1487 = HEAP32[$1486>>2]|0;
 $1488 = (($1485) + 4)|0;
 $1489 = $1488;
 $1490 = HEAP32[$1489>>2]|0;
 $1491 = (_i64Add(($1487|0),($1490|0),33554432,0)|0);
 $1492 = tempRet0;
 $1493 = (_bitshift64Ashr(($1491|0),($1492|0),26)|0);
 $1494 = tempRet0;
 $1495 = $94;
 $1496 = $1495;
 HEAP32[$1496>>2] = $1493;
 $1497 = (($1495) + 4)|0;
 $1498 = $1497;
 HEAP32[$1498>>2] = $1494;
 $1499 = $94;
 $1500 = $1499;
 $1501 = HEAP32[$1500>>2]|0;
 $1502 = (($1499) + 4)|0;
 $1503 = $1502;
 $1504 = HEAP32[$1503>>2]|0;
 $1505 = $85;
 $1506 = $1505;
 $1507 = HEAP32[$1506>>2]|0;
 $1508 = (($1505) + 4)|0;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (_i64Add(($1507|0),($1510|0),($1501|0),($1504|0))|0);
 $1512 = tempRet0;
 $1513 = $85;
 $1514 = $1513;
 HEAP32[$1514>>2] = $1511;
 $1515 = (($1513) + 4)|0;
 $1516 = $1515;
 HEAP32[$1516>>2] = $1512;
 $1517 = $94;
 $1518 = $1517;
 $1519 = HEAP32[$1518>>2]|0;
 $1520 = (($1517) + 4)|0;
 $1521 = $1520;
 $1522 = HEAP32[$1521>>2]|0;
 $1523 = (_bitshift64Shl(($1519|0),($1522|0),26)|0);
 $1524 = tempRet0;
 $1525 = $84;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (_i64Subtract(($1527|0),($1530|0),($1523|0),($1524|0))|0);
 $1532 = tempRet0;
 $1533 = $84;
 $1534 = $1533;
 HEAP32[$1534>>2] = $1531;
 $1535 = (($1533) + 4)|0;
 $1536 = $1535;
 HEAP32[$1536>>2] = $1532;
 $1537 = $88;
 $1538 = $1537;
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = (($1537) + 4)|0;
 $1541 = $1540;
 $1542 = HEAP32[$1541>>2]|0;
 $1543 = (_i64Add(($1539|0),($1542|0),33554432,0)|0);
 $1544 = tempRet0;
 $1545 = (_bitshift64Ashr(($1543|0),($1544|0),26)|0);
 $1546 = tempRet0;
 $1547 = $98;
 $1548 = $1547;
 HEAP32[$1548>>2] = $1545;
 $1549 = (($1547) + 4)|0;
 $1550 = $1549;
 HEAP32[$1550>>2] = $1546;
 $1551 = $98;
 $1552 = $1551;
 $1553 = HEAP32[$1552>>2]|0;
 $1554 = (($1551) + 4)|0;
 $1555 = $1554;
 $1556 = HEAP32[$1555>>2]|0;
 $1557 = $89;
 $1558 = $1557;
 $1559 = HEAP32[$1558>>2]|0;
 $1560 = (($1557) + 4)|0;
 $1561 = $1560;
 $1562 = HEAP32[$1561>>2]|0;
 $1563 = (_i64Add(($1559|0),($1562|0),($1553|0),($1556|0))|0);
 $1564 = tempRet0;
 $1565 = $89;
 $1566 = $1565;
 HEAP32[$1566>>2] = $1563;
 $1567 = (($1565) + 4)|0;
 $1568 = $1567;
 HEAP32[$1568>>2] = $1564;
 $1569 = $98;
 $1570 = $1569;
 $1571 = HEAP32[$1570>>2]|0;
 $1572 = (($1569) + 4)|0;
 $1573 = $1572;
 $1574 = HEAP32[$1573>>2]|0;
 $1575 = (_bitshift64Shl(($1571|0),($1574|0),26)|0);
 $1576 = tempRet0;
 $1577 = $88;
 $1578 = $1577;
 $1579 = HEAP32[$1578>>2]|0;
 $1580 = (($1577) + 4)|0;
 $1581 = $1580;
 $1582 = HEAP32[$1581>>2]|0;
 $1583 = (_i64Subtract(($1579|0),($1582|0),($1575|0),($1576|0))|0);
 $1584 = tempRet0;
 $1585 = $88;
 $1586 = $1585;
 HEAP32[$1586>>2] = $1583;
 $1587 = (($1585) + 4)|0;
 $1588 = $1587;
 HEAP32[$1588>>2] = $1584;
 $1589 = $85;
 $1590 = $1589;
 $1591 = HEAP32[$1590>>2]|0;
 $1592 = (($1589) + 4)|0;
 $1593 = $1592;
 $1594 = HEAP32[$1593>>2]|0;
 $1595 = (_i64Add(($1591|0),($1594|0),16777216,0)|0);
 $1596 = tempRet0;
 $1597 = (_bitshift64Ashr(($1595|0),($1596|0),25)|0);
 $1598 = tempRet0;
 $1599 = $95;
 $1600 = $1599;
 HEAP32[$1600>>2] = $1597;
 $1601 = (($1599) + 4)|0;
 $1602 = $1601;
 HEAP32[$1602>>2] = $1598;
 $1603 = $95;
 $1604 = $1603;
 $1605 = HEAP32[$1604>>2]|0;
 $1606 = (($1603) + 4)|0;
 $1607 = $1606;
 $1608 = HEAP32[$1607>>2]|0;
 $1609 = $86;
 $1610 = $1609;
 $1611 = HEAP32[$1610>>2]|0;
 $1612 = (($1609) + 4)|0;
 $1613 = $1612;
 $1614 = HEAP32[$1613>>2]|0;
 $1615 = (_i64Add(($1611|0),($1614|0),($1605|0),($1608|0))|0);
 $1616 = tempRet0;
 $1617 = $86;
 $1618 = $1617;
 HEAP32[$1618>>2] = $1615;
 $1619 = (($1617) + 4)|0;
 $1620 = $1619;
 HEAP32[$1620>>2] = $1616;
 $1621 = $95;
 $1622 = $1621;
 $1623 = HEAP32[$1622>>2]|0;
 $1624 = (($1621) + 4)|0;
 $1625 = $1624;
 $1626 = HEAP32[$1625>>2]|0;
 $1627 = (_bitshift64Shl(($1623|0),($1626|0),25)|0);
 $1628 = tempRet0;
 $1629 = $85;
 $1630 = $1629;
 $1631 = HEAP32[$1630>>2]|0;
 $1632 = (($1629) + 4)|0;
 $1633 = $1632;
 $1634 = HEAP32[$1633>>2]|0;
 $1635 = (_i64Subtract(($1631|0),($1634|0),($1627|0),($1628|0))|0);
 $1636 = tempRet0;
 $1637 = $85;
 $1638 = $1637;
 HEAP32[$1638>>2] = $1635;
 $1639 = (($1637) + 4)|0;
 $1640 = $1639;
 HEAP32[$1640>>2] = $1636;
 $1641 = $89;
 $1642 = $1641;
 $1643 = HEAP32[$1642>>2]|0;
 $1644 = (($1641) + 4)|0;
 $1645 = $1644;
 $1646 = HEAP32[$1645>>2]|0;
 $1647 = (_i64Add(($1643|0),($1646|0),16777216,0)|0);
 $1648 = tempRet0;
 $1649 = (_bitshift64Ashr(($1647|0),($1648|0),25)|0);
 $1650 = tempRet0;
 $1651 = $99;
 $1652 = $1651;
 HEAP32[$1652>>2] = $1649;
 $1653 = (($1651) + 4)|0;
 $1654 = $1653;
 HEAP32[$1654>>2] = $1650;
 $1655 = $99;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = $90;
 $1662 = $1661;
 $1663 = HEAP32[$1662>>2]|0;
 $1664 = (($1661) + 4)|0;
 $1665 = $1664;
 $1666 = HEAP32[$1665>>2]|0;
 $1667 = (_i64Add(($1663|0),($1666|0),($1657|0),($1660|0))|0);
 $1668 = tempRet0;
 $1669 = $90;
 $1670 = $1669;
 HEAP32[$1670>>2] = $1667;
 $1671 = (($1669) + 4)|0;
 $1672 = $1671;
 HEAP32[$1672>>2] = $1668;
 $1673 = $99;
 $1674 = $1673;
 $1675 = HEAP32[$1674>>2]|0;
 $1676 = (($1673) + 4)|0;
 $1677 = $1676;
 $1678 = HEAP32[$1677>>2]|0;
 $1679 = (_bitshift64Shl(($1675|0),($1678|0),25)|0);
 $1680 = tempRet0;
 $1681 = $89;
 $1682 = $1681;
 $1683 = HEAP32[$1682>>2]|0;
 $1684 = (($1681) + 4)|0;
 $1685 = $1684;
 $1686 = HEAP32[$1685>>2]|0;
 $1687 = (_i64Subtract(($1683|0),($1686|0),($1679|0),($1680|0))|0);
 $1688 = tempRet0;
 $1689 = $89;
 $1690 = $1689;
 HEAP32[$1690>>2] = $1687;
 $1691 = (($1689) + 4)|0;
 $1692 = $1691;
 HEAP32[$1692>>2] = $1688;
 $1693 = $86;
 $1694 = $1693;
 $1695 = HEAP32[$1694>>2]|0;
 $1696 = (($1693) + 4)|0;
 $1697 = $1696;
 $1698 = HEAP32[$1697>>2]|0;
 $1699 = (_i64Add(($1695|0),($1698|0),33554432,0)|0);
 $1700 = tempRet0;
 $1701 = (_bitshift64Ashr(($1699|0),($1700|0),26)|0);
 $1702 = tempRet0;
 $1703 = $96;
 $1704 = $1703;
 HEAP32[$1704>>2] = $1701;
 $1705 = (($1703) + 4)|0;
 $1706 = $1705;
 HEAP32[$1706>>2] = $1702;
 $1707 = $96;
 $1708 = $1707;
 $1709 = HEAP32[$1708>>2]|0;
 $1710 = (($1707) + 4)|0;
 $1711 = $1710;
 $1712 = HEAP32[$1711>>2]|0;
 $1713 = $87;
 $1714 = $1713;
 $1715 = HEAP32[$1714>>2]|0;
 $1716 = (($1713) + 4)|0;
 $1717 = $1716;
 $1718 = HEAP32[$1717>>2]|0;
 $1719 = (_i64Add(($1715|0),($1718|0),($1709|0),($1712|0))|0);
 $1720 = tempRet0;
 $1721 = $87;
 $1722 = $1721;
 HEAP32[$1722>>2] = $1719;
 $1723 = (($1721) + 4)|0;
 $1724 = $1723;
 HEAP32[$1724>>2] = $1720;
 $1725 = $96;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (($1725) + 4)|0;
 $1729 = $1728;
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = (_bitshift64Shl(($1727|0),($1730|0),26)|0);
 $1732 = tempRet0;
 $1733 = $86;
 $1734 = $1733;
 $1735 = HEAP32[$1734>>2]|0;
 $1736 = (($1733) + 4)|0;
 $1737 = $1736;
 $1738 = HEAP32[$1737>>2]|0;
 $1739 = (_i64Subtract(($1735|0),($1738|0),($1731|0),($1732|0))|0);
 $1740 = tempRet0;
 $1741 = $86;
 $1742 = $1741;
 HEAP32[$1742>>2] = $1739;
 $1743 = (($1741) + 4)|0;
 $1744 = $1743;
 HEAP32[$1744>>2] = $1740;
 $1745 = $90;
 $1746 = $1745;
 $1747 = HEAP32[$1746>>2]|0;
 $1748 = (($1745) + 4)|0;
 $1749 = $1748;
 $1750 = HEAP32[$1749>>2]|0;
 $1751 = (_i64Add(($1747|0),($1750|0),33554432,0)|0);
 $1752 = tempRet0;
 $1753 = (_bitshift64Ashr(($1751|0),($1752|0),26)|0);
 $1754 = tempRet0;
 $1755 = $100;
 $1756 = $1755;
 HEAP32[$1756>>2] = $1753;
 $1757 = (($1755) + 4)|0;
 $1758 = $1757;
 HEAP32[$1758>>2] = $1754;
 $1759 = $100;
 $1760 = $1759;
 $1761 = HEAP32[$1760>>2]|0;
 $1762 = (($1759) + 4)|0;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = $91;
 $1766 = $1765;
 $1767 = HEAP32[$1766>>2]|0;
 $1768 = (($1765) + 4)|0;
 $1769 = $1768;
 $1770 = HEAP32[$1769>>2]|0;
 $1771 = (_i64Add(($1767|0),($1770|0),($1761|0),($1764|0))|0);
 $1772 = tempRet0;
 $1773 = $91;
 $1774 = $1773;
 HEAP32[$1774>>2] = $1771;
 $1775 = (($1773) + 4)|0;
 $1776 = $1775;
 HEAP32[$1776>>2] = $1772;
 $1777 = $100;
 $1778 = $1777;
 $1779 = HEAP32[$1778>>2]|0;
 $1780 = (($1777) + 4)|0;
 $1781 = $1780;
 $1782 = HEAP32[$1781>>2]|0;
 $1783 = (_bitshift64Shl(($1779|0),($1782|0),26)|0);
 $1784 = tempRet0;
 $1785 = $90;
 $1786 = $1785;
 $1787 = HEAP32[$1786>>2]|0;
 $1788 = (($1785) + 4)|0;
 $1789 = $1788;
 $1790 = HEAP32[$1789>>2]|0;
 $1791 = (_i64Subtract(($1787|0),($1790|0),($1783|0),($1784|0))|0);
 $1792 = tempRet0;
 $1793 = $90;
 $1794 = $1793;
 HEAP32[$1794>>2] = $1791;
 $1795 = (($1793) + 4)|0;
 $1796 = $1795;
 HEAP32[$1796>>2] = $1792;
 $1797 = $91;
 $1798 = $1797;
 $1799 = HEAP32[$1798>>2]|0;
 $1800 = (($1797) + 4)|0;
 $1801 = $1800;
 $1802 = HEAP32[$1801>>2]|0;
 $1803 = (_i64Add(($1799|0),($1802|0),16777216,0)|0);
 $1804 = tempRet0;
 $1805 = (_bitshift64Ashr(($1803|0),($1804|0),25)|0);
 $1806 = tempRet0;
 $1807 = $101;
 $1808 = $1807;
 HEAP32[$1808>>2] = $1805;
 $1809 = (($1807) + 4)|0;
 $1810 = $1809;
 HEAP32[$1810>>2] = $1806;
 $1811 = $101;
 $1812 = $1811;
 $1813 = HEAP32[$1812>>2]|0;
 $1814 = (($1811) + 4)|0;
 $1815 = $1814;
 $1816 = HEAP32[$1815>>2]|0;
 $1817 = (___muldi3(($1813|0),($1816|0),19,0)|0);
 $1818 = tempRet0;
 $1819 = $82;
 $1820 = $1819;
 $1821 = HEAP32[$1820>>2]|0;
 $1822 = (($1819) + 4)|0;
 $1823 = $1822;
 $1824 = HEAP32[$1823>>2]|0;
 $1825 = (_i64Add(($1821|0),($1824|0),($1817|0),($1818|0))|0);
 $1826 = tempRet0;
 $1827 = $82;
 $1828 = $1827;
 HEAP32[$1828>>2] = $1825;
 $1829 = (($1827) + 4)|0;
 $1830 = $1829;
 HEAP32[$1830>>2] = $1826;
 $1831 = $101;
 $1832 = $1831;
 $1833 = HEAP32[$1832>>2]|0;
 $1834 = (($1831) + 4)|0;
 $1835 = $1834;
 $1836 = HEAP32[$1835>>2]|0;
 $1837 = (_bitshift64Shl(($1833|0),($1836|0),25)|0);
 $1838 = tempRet0;
 $1839 = $91;
 $1840 = $1839;
 $1841 = HEAP32[$1840>>2]|0;
 $1842 = (($1839) + 4)|0;
 $1843 = $1842;
 $1844 = HEAP32[$1843>>2]|0;
 $1845 = (_i64Subtract(($1841|0),($1844|0),($1837|0),($1838|0))|0);
 $1846 = tempRet0;
 $1847 = $91;
 $1848 = $1847;
 HEAP32[$1848>>2] = $1845;
 $1849 = (($1847) + 4)|0;
 $1850 = $1849;
 HEAP32[$1850>>2] = $1846;
 $1851 = $82;
 $1852 = $1851;
 $1853 = HEAP32[$1852>>2]|0;
 $1854 = (($1851) + 4)|0;
 $1855 = $1854;
 $1856 = HEAP32[$1855>>2]|0;
 $1857 = (_i64Add(($1853|0),($1856|0),33554432,0)|0);
 $1858 = tempRet0;
 $1859 = (_bitshift64Ashr(($1857|0),($1858|0),26)|0);
 $1860 = tempRet0;
 $1861 = $92;
 $1862 = $1861;
 HEAP32[$1862>>2] = $1859;
 $1863 = (($1861) + 4)|0;
 $1864 = $1863;
 HEAP32[$1864>>2] = $1860;
 $1865 = $92;
 $1866 = $1865;
 $1867 = HEAP32[$1866>>2]|0;
 $1868 = (($1865) + 4)|0;
 $1869 = $1868;
 $1870 = HEAP32[$1869>>2]|0;
 $1871 = $83;
 $1872 = $1871;
 $1873 = HEAP32[$1872>>2]|0;
 $1874 = (($1871) + 4)|0;
 $1875 = $1874;
 $1876 = HEAP32[$1875>>2]|0;
 $1877 = (_i64Add(($1873|0),($1876|0),($1867|0),($1870|0))|0);
 $1878 = tempRet0;
 $1879 = $83;
 $1880 = $1879;
 HEAP32[$1880>>2] = $1877;
 $1881 = (($1879) + 4)|0;
 $1882 = $1881;
 HEAP32[$1882>>2] = $1878;
 $1883 = $92;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (_bitshift64Shl(($1885|0),($1888|0),26)|0);
 $1890 = tempRet0;
 $1891 = $82;
 $1892 = $1891;
 $1893 = HEAP32[$1892>>2]|0;
 $1894 = (($1891) + 4)|0;
 $1895 = $1894;
 $1896 = HEAP32[$1895>>2]|0;
 $1897 = (_i64Subtract(($1893|0),($1896|0),($1889|0),($1890|0))|0);
 $1898 = tempRet0;
 $1899 = $82;
 $1900 = $1899;
 HEAP32[$1900>>2] = $1897;
 $1901 = (($1899) + 4)|0;
 $1902 = $1901;
 HEAP32[$1902>>2] = $1898;
 $1903 = $82;
 $1904 = $1903;
 $1905 = HEAP32[$1904>>2]|0;
 $1906 = (($1903) + 4)|0;
 $1907 = $1906;
 $1908 = HEAP32[$1907>>2]|0;
 $1909 = $2;
 HEAP32[$1909>>2] = $1905;
 $1910 = $83;
 $1911 = $1910;
 $1912 = HEAP32[$1911>>2]|0;
 $1913 = (($1910) + 4)|0;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = $2;
 $1917 = ((($1916)) + 4|0);
 HEAP32[$1917>>2] = $1912;
 $1918 = $84;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = (($1918) + 4)|0;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = $2;
 $1925 = ((($1924)) + 8|0);
 HEAP32[$1925>>2] = $1920;
 $1926 = $85;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (($1926) + 4)|0;
 $1930 = $1929;
 $1931 = HEAP32[$1930>>2]|0;
 $1932 = $2;
 $1933 = ((($1932)) + 12|0);
 HEAP32[$1933>>2] = $1928;
 $1934 = $86;
 $1935 = $1934;
 $1936 = HEAP32[$1935>>2]|0;
 $1937 = (($1934) + 4)|0;
 $1938 = $1937;
 $1939 = HEAP32[$1938>>2]|0;
 $1940 = $2;
 $1941 = ((($1940)) + 16|0);
 HEAP32[$1941>>2] = $1936;
 $1942 = $87;
 $1943 = $1942;
 $1944 = HEAP32[$1943>>2]|0;
 $1945 = (($1942) + 4)|0;
 $1946 = $1945;
 $1947 = HEAP32[$1946>>2]|0;
 $1948 = $2;
 $1949 = ((($1948)) + 20|0);
 HEAP32[$1949>>2] = $1944;
 $1950 = $88;
 $1951 = $1950;
 $1952 = HEAP32[$1951>>2]|0;
 $1953 = (($1950) + 4)|0;
 $1954 = $1953;
 $1955 = HEAP32[$1954>>2]|0;
 $1956 = $2;
 $1957 = ((($1956)) + 24|0);
 HEAP32[$1957>>2] = $1952;
 $1958 = $89;
 $1959 = $1958;
 $1960 = HEAP32[$1959>>2]|0;
 $1961 = (($1958) + 4)|0;
 $1962 = $1961;
 $1963 = HEAP32[$1962>>2]|0;
 $1964 = $2;
 $1965 = ((($1964)) + 28|0);
 HEAP32[$1965>>2] = $1960;
 $1966 = $90;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = (($1966) + 4)|0;
 $1970 = $1969;
 $1971 = HEAP32[$1970>>2]|0;
 $1972 = $2;
 $1973 = ((($1972)) + 32|0);
 HEAP32[$1973>>2] = $1968;
 $1974 = $91;
 $1975 = $1974;
 $1976 = HEAP32[$1975>>2]|0;
 $1977 = (($1974) + 4)|0;
 $1978 = $1977;
 $1979 = HEAP32[$1978>>2]|0;
 $1980 = $2;
 $1981 = ((($1980)) + 36|0);
 HEAP32[$1981>>2] = $1976;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_sq2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
 var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
 var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $27 = sp + 592|0;
 $28 = sp + 584|0;
 $29 = sp + 576|0;
 $30 = sp + 568|0;
 $31 = sp + 560|0;
 $32 = sp + 552|0;
 $33 = sp + 544|0;
 $34 = sp + 536|0;
 $35 = sp + 528|0;
 $36 = sp + 520|0;
 $37 = sp + 512|0;
 $38 = sp + 504|0;
 $39 = sp + 496|0;
 $40 = sp + 488|0;
 $41 = sp + 480|0;
 $42 = sp + 472|0;
 $43 = sp + 464|0;
 $44 = sp + 456|0;
 $45 = sp + 448|0;
 $46 = sp + 440|0;
 $47 = sp + 432|0;
 $48 = sp + 424|0;
 $49 = sp + 416|0;
 $50 = sp + 408|0;
 $51 = sp + 400|0;
 $52 = sp + 392|0;
 $53 = sp + 384|0;
 $54 = sp + 376|0;
 $55 = sp + 368|0;
 $56 = sp + 360|0;
 $57 = sp + 352|0;
 $58 = sp + 344|0;
 $59 = sp + 336|0;
 $60 = sp + 328|0;
 $61 = sp + 320|0;
 $62 = sp + 312|0;
 $63 = sp + 304|0;
 $64 = sp + 296|0;
 $65 = sp + 288|0;
 $66 = sp + 280|0;
 $67 = sp + 272|0;
 $68 = sp + 264|0;
 $69 = sp + 256|0;
 $70 = sp + 248|0;
 $71 = sp + 240|0;
 $72 = sp + 232|0;
 $73 = sp + 224|0;
 $74 = sp + 216|0;
 $75 = sp + 208|0;
 $76 = sp + 200|0;
 $77 = sp + 192|0;
 $78 = sp + 184|0;
 $79 = sp + 176|0;
 $80 = sp + 168|0;
 $81 = sp + 160|0;
 $82 = sp + 152|0;
 $83 = sp + 144|0;
 $84 = sp + 136|0;
 $85 = sp + 128|0;
 $86 = sp + 120|0;
 $87 = sp + 112|0;
 $88 = sp + 104|0;
 $89 = sp + 96|0;
 $90 = sp + 88|0;
 $91 = sp + 80|0;
 $92 = sp + 72|0;
 $93 = sp + 64|0;
 $94 = sp + 56|0;
 $95 = sp + 48|0;
 $96 = sp + 40|0;
 $97 = sp + 32|0;
 $98 = sp + 24|0;
 $99 = sp + 16|0;
 $100 = sp + 8|0;
 $101 = sp;
 $2 = $0;
 $3 = $1;
 $102 = $3;
 $103 = HEAP32[$102>>2]|0;
 $4 = $103;
 $104 = $3;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $5 = $106;
 $107 = $3;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $6 = $109;
 $110 = $3;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $7 = $112;
 $113 = $3;
 $114 = ((($113)) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 $8 = $115;
 $116 = $3;
 $117 = ((($116)) + 20|0);
 $118 = HEAP32[$117>>2]|0;
 $9 = $118;
 $119 = $3;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $10 = $121;
 $122 = $3;
 $123 = ((($122)) + 28|0);
 $124 = HEAP32[$123>>2]|0;
 $11 = $124;
 $125 = $3;
 $126 = ((($125)) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 $12 = $127;
 $128 = $3;
 $129 = ((($128)) + 36|0);
 $130 = HEAP32[$129>>2]|0;
 $13 = $130;
 $131 = $4;
 $132 = $131<<1;
 $14 = $132;
 $133 = $5;
 $134 = $133<<1;
 $15 = $134;
 $135 = $6;
 $136 = $135<<1;
 $16 = $136;
 $137 = $7;
 $138 = $137<<1;
 $17 = $138;
 $139 = $8;
 $140 = $139<<1;
 $18 = $140;
 $141 = $9;
 $142 = $141<<1;
 $19 = $142;
 $143 = $10;
 $144 = $143<<1;
 $20 = $144;
 $145 = $11;
 $146 = $145<<1;
 $21 = $146;
 $147 = $9;
 $148 = ($147*38)|0;
 $22 = $148;
 $149 = $10;
 $150 = ($149*19)|0;
 $23 = $150;
 $151 = $11;
 $152 = ($151*38)|0;
 $24 = $152;
 $153 = $12;
 $154 = ($153*19)|0;
 $25 = $154;
 $155 = $13;
 $156 = ($155*38)|0;
 $26 = $156;
 $157 = $4;
 $158 = ($157|0)<(0);
 $159 = $158 << 31 >> 31;
 $160 = $4;
 $161 = ($160|0)<(0);
 $162 = $161 << 31 >> 31;
 $163 = (___muldi3(($157|0),($159|0),($160|0),($162|0))|0);
 $164 = tempRet0;
 $165 = $27;
 $166 = $165;
 HEAP32[$166>>2] = $163;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $164;
 $169 = $14;
 $170 = ($169|0)<(0);
 $171 = $170 << 31 >> 31;
 $172 = $5;
 $173 = ($172|0)<(0);
 $174 = $173 << 31 >> 31;
 $175 = (___muldi3(($169|0),($171|0),($172|0),($174|0))|0);
 $176 = tempRet0;
 $177 = $28;
 $178 = $177;
 HEAP32[$178>>2] = $175;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = $176;
 $181 = $14;
 $182 = ($181|0)<(0);
 $183 = $182 << 31 >> 31;
 $184 = $6;
 $185 = ($184|0)<(0);
 $186 = $185 << 31 >> 31;
 $187 = (___muldi3(($181|0),($183|0),($184|0),($186|0))|0);
 $188 = tempRet0;
 $189 = $29;
 $190 = $189;
 HEAP32[$190>>2] = $187;
 $191 = (($189) + 4)|0;
 $192 = $191;
 HEAP32[$192>>2] = $188;
 $193 = $14;
 $194 = ($193|0)<(0);
 $195 = $194 << 31 >> 31;
 $196 = $7;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($193|0),($195|0),($196|0),($198|0))|0);
 $200 = tempRet0;
 $201 = $30;
 $202 = $201;
 HEAP32[$202>>2] = $199;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $205 = $14;
 $206 = ($205|0)<(0);
 $207 = $206 << 31 >> 31;
 $208 = $8;
 $209 = ($208|0)<(0);
 $210 = $209 << 31 >> 31;
 $211 = (___muldi3(($205|0),($207|0),($208|0),($210|0))|0);
 $212 = tempRet0;
 $213 = $31;
 $214 = $213;
 HEAP32[$214>>2] = $211;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = $14;
 $218 = ($217|0)<(0);
 $219 = $218 << 31 >> 31;
 $220 = $9;
 $221 = ($220|0)<(0);
 $222 = $221 << 31 >> 31;
 $223 = (___muldi3(($217|0),($219|0),($220|0),($222|0))|0);
 $224 = tempRet0;
 $225 = $32;
 $226 = $225;
 HEAP32[$226>>2] = $223;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $224;
 $229 = $14;
 $230 = ($229|0)<(0);
 $231 = $230 << 31 >> 31;
 $232 = $10;
 $233 = ($232|0)<(0);
 $234 = $233 << 31 >> 31;
 $235 = (___muldi3(($229|0),($231|0),($232|0),($234|0))|0);
 $236 = tempRet0;
 $237 = $33;
 $238 = $237;
 HEAP32[$238>>2] = $235;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $236;
 $241 = $14;
 $242 = ($241|0)<(0);
 $243 = $242 << 31 >> 31;
 $244 = $11;
 $245 = ($244|0)<(0);
 $246 = $245 << 31 >> 31;
 $247 = (___muldi3(($241|0),($243|0),($244|0),($246|0))|0);
 $248 = tempRet0;
 $249 = $34;
 $250 = $249;
 HEAP32[$250>>2] = $247;
 $251 = (($249) + 4)|0;
 $252 = $251;
 HEAP32[$252>>2] = $248;
 $253 = $14;
 $254 = ($253|0)<(0);
 $255 = $254 << 31 >> 31;
 $256 = $12;
 $257 = ($256|0)<(0);
 $258 = $257 << 31 >> 31;
 $259 = (___muldi3(($253|0),($255|0),($256|0),($258|0))|0);
 $260 = tempRet0;
 $261 = $35;
 $262 = $261;
 HEAP32[$262>>2] = $259;
 $263 = (($261) + 4)|0;
 $264 = $263;
 HEAP32[$264>>2] = $260;
 $265 = $14;
 $266 = ($265|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = $13;
 $269 = ($268|0)<(0);
 $270 = $269 << 31 >> 31;
 $271 = (___muldi3(($265|0),($267|0),($268|0),($270|0))|0);
 $272 = tempRet0;
 $273 = $36;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = $15;
 $278 = ($277|0)<(0);
 $279 = $278 << 31 >> 31;
 $280 = $5;
 $281 = ($280|0)<(0);
 $282 = $281 << 31 >> 31;
 $283 = (___muldi3(($277|0),($279|0),($280|0),($282|0))|0);
 $284 = tempRet0;
 $285 = $37;
 $286 = $285;
 HEAP32[$286>>2] = $283;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = $284;
 $289 = $15;
 $290 = ($289|0)<(0);
 $291 = $290 << 31 >> 31;
 $292 = $6;
 $293 = ($292|0)<(0);
 $294 = $293 << 31 >> 31;
 $295 = (___muldi3(($289|0),($291|0),($292|0),($294|0))|0);
 $296 = tempRet0;
 $297 = $38;
 $298 = $297;
 HEAP32[$298>>2] = $295;
 $299 = (($297) + 4)|0;
 $300 = $299;
 HEAP32[$300>>2] = $296;
 $301 = $15;
 $302 = ($301|0)<(0);
 $303 = $302 << 31 >> 31;
 $304 = $17;
 $305 = ($304|0)<(0);
 $306 = $305 << 31 >> 31;
 $307 = (___muldi3(($301|0),($303|0),($304|0),($306|0))|0);
 $308 = tempRet0;
 $309 = $39;
 $310 = $309;
 HEAP32[$310>>2] = $307;
 $311 = (($309) + 4)|0;
 $312 = $311;
 HEAP32[$312>>2] = $308;
 $313 = $15;
 $314 = ($313|0)<(0);
 $315 = $314 << 31 >> 31;
 $316 = $8;
 $317 = ($316|0)<(0);
 $318 = $317 << 31 >> 31;
 $319 = (___muldi3(($313|0),($315|0),($316|0),($318|0))|0);
 $320 = tempRet0;
 $321 = $40;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $325 = $15;
 $326 = ($325|0)<(0);
 $327 = $326 << 31 >> 31;
 $328 = $19;
 $329 = ($328|0)<(0);
 $330 = $329 << 31 >> 31;
 $331 = (___muldi3(($325|0),($327|0),($328|0),($330|0))|0);
 $332 = tempRet0;
 $333 = $41;
 $334 = $333;
 HEAP32[$334>>2] = $331;
 $335 = (($333) + 4)|0;
 $336 = $335;
 HEAP32[$336>>2] = $332;
 $337 = $15;
 $338 = ($337|0)<(0);
 $339 = $338 << 31 >> 31;
 $340 = $10;
 $341 = ($340|0)<(0);
 $342 = $341 << 31 >> 31;
 $343 = (___muldi3(($337|0),($339|0),($340|0),($342|0))|0);
 $344 = tempRet0;
 $345 = $42;
 $346 = $345;
 HEAP32[$346>>2] = $343;
 $347 = (($345) + 4)|0;
 $348 = $347;
 HEAP32[$348>>2] = $344;
 $349 = $15;
 $350 = ($349|0)<(0);
 $351 = $350 << 31 >> 31;
 $352 = $21;
 $353 = ($352|0)<(0);
 $354 = $353 << 31 >> 31;
 $355 = (___muldi3(($349|0),($351|0),($352|0),($354|0))|0);
 $356 = tempRet0;
 $357 = $43;
 $358 = $357;
 HEAP32[$358>>2] = $355;
 $359 = (($357) + 4)|0;
 $360 = $359;
 HEAP32[$360>>2] = $356;
 $361 = $15;
 $362 = ($361|0)<(0);
 $363 = $362 << 31 >> 31;
 $364 = $12;
 $365 = ($364|0)<(0);
 $366 = $365 << 31 >> 31;
 $367 = (___muldi3(($361|0),($363|0),($364|0),($366|0))|0);
 $368 = tempRet0;
 $369 = $44;
 $370 = $369;
 HEAP32[$370>>2] = $367;
 $371 = (($369) + 4)|0;
 $372 = $371;
 HEAP32[$372>>2] = $368;
 $373 = $15;
 $374 = ($373|0)<(0);
 $375 = $374 << 31 >> 31;
 $376 = $26;
 $377 = ($376|0)<(0);
 $378 = $377 << 31 >> 31;
 $379 = (___muldi3(($373|0),($375|0),($376|0),($378|0))|0);
 $380 = tempRet0;
 $381 = $45;
 $382 = $381;
 HEAP32[$382>>2] = $379;
 $383 = (($381) + 4)|0;
 $384 = $383;
 HEAP32[$384>>2] = $380;
 $385 = $6;
 $386 = ($385|0)<(0);
 $387 = $386 << 31 >> 31;
 $388 = $6;
 $389 = ($388|0)<(0);
 $390 = $389 << 31 >> 31;
 $391 = (___muldi3(($385|0),($387|0),($388|0),($390|0))|0);
 $392 = tempRet0;
 $393 = $46;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $16;
 $398 = ($397|0)<(0);
 $399 = $398 << 31 >> 31;
 $400 = $7;
 $401 = ($400|0)<(0);
 $402 = $401 << 31 >> 31;
 $403 = (___muldi3(($397|0),($399|0),($400|0),($402|0))|0);
 $404 = tempRet0;
 $405 = $47;
 $406 = $405;
 HEAP32[$406>>2] = $403;
 $407 = (($405) + 4)|0;
 $408 = $407;
 HEAP32[$408>>2] = $404;
 $409 = $16;
 $410 = ($409|0)<(0);
 $411 = $410 << 31 >> 31;
 $412 = $8;
 $413 = ($412|0)<(0);
 $414 = $413 << 31 >> 31;
 $415 = (___muldi3(($409|0),($411|0),($412|0),($414|0))|0);
 $416 = tempRet0;
 $417 = $48;
 $418 = $417;
 HEAP32[$418>>2] = $415;
 $419 = (($417) + 4)|0;
 $420 = $419;
 HEAP32[$420>>2] = $416;
 $421 = $16;
 $422 = ($421|0)<(0);
 $423 = $422 << 31 >> 31;
 $424 = $9;
 $425 = ($424|0)<(0);
 $426 = $425 << 31 >> 31;
 $427 = (___muldi3(($421|0),($423|0),($424|0),($426|0))|0);
 $428 = tempRet0;
 $429 = $49;
 $430 = $429;
 HEAP32[$430>>2] = $427;
 $431 = (($429) + 4)|0;
 $432 = $431;
 HEAP32[$432>>2] = $428;
 $433 = $16;
 $434 = ($433|0)<(0);
 $435 = $434 << 31 >> 31;
 $436 = $10;
 $437 = ($436|0)<(0);
 $438 = $437 << 31 >> 31;
 $439 = (___muldi3(($433|0),($435|0),($436|0),($438|0))|0);
 $440 = tempRet0;
 $441 = $50;
 $442 = $441;
 HEAP32[$442>>2] = $439;
 $443 = (($441) + 4)|0;
 $444 = $443;
 HEAP32[$444>>2] = $440;
 $445 = $16;
 $446 = ($445|0)<(0);
 $447 = $446 << 31 >> 31;
 $448 = $11;
 $449 = ($448|0)<(0);
 $450 = $449 << 31 >> 31;
 $451 = (___muldi3(($445|0),($447|0),($448|0),($450|0))|0);
 $452 = tempRet0;
 $453 = $51;
 $454 = $453;
 HEAP32[$454>>2] = $451;
 $455 = (($453) + 4)|0;
 $456 = $455;
 HEAP32[$456>>2] = $452;
 $457 = $16;
 $458 = ($457|0)<(0);
 $459 = $458 << 31 >> 31;
 $460 = $25;
 $461 = ($460|0)<(0);
 $462 = $461 << 31 >> 31;
 $463 = (___muldi3(($457|0),($459|0),($460|0),($462|0))|0);
 $464 = tempRet0;
 $465 = $52;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $6;
 $470 = ($469|0)<(0);
 $471 = $470 << 31 >> 31;
 $472 = $26;
 $473 = ($472|0)<(0);
 $474 = $473 << 31 >> 31;
 $475 = (___muldi3(($469|0),($471|0),($472|0),($474|0))|0);
 $476 = tempRet0;
 $477 = $53;
 $478 = $477;
 HEAP32[$478>>2] = $475;
 $479 = (($477) + 4)|0;
 $480 = $479;
 HEAP32[$480>>2] = $476;
 $481 = $17;
 $482 = ($481|0)<(0);
 $483 = $482 << 31 >> 31;
 $484 = $7;
 $485 = ($484|0)<(0);
 $486 = $485 << 31 >> 31;
 $487 = (___muldi3(($481|0),($483|0),($484|0),($486|0))|0);
 $488 = tempRet0;
 $489 = $54;
 $490 = $489;
 HEAP32[$490>>2] = $487;
 $491 = (($489) + 4)|0;
 $492 = $491;
 HEAP32[$492>>2] = $488;
 $493 = $17;
 $494 = ($493|0)<(0);
 $495 = $494 << 31 >> 31;
 $496 = $8;
 $497 = ($496|0)<(0);
 $498 = $497 << 31 >> 31;
 $499 = (___muldi3(($493|0),($495|0),($496|0),($498|0))|0);
 $500 = tempRet0;
 $501 = $55;
 $502 = $501;
 HEAP32[$502>>2] = $499;
 $503 = (($501) + 4)|0;
 $504 = $503;
 HEAP32[$504>>2] = $500;
 $505 = $17;
 $506 = ($505|0)<(0);
 $507 = $506 << 31 >> 31;
 $508 = $19;
 $509 = ($508|0)<(0);
 $510 = $509 << 31 >> 31;
 $511 = (___muldi3(($505|0),($507|0),($508|0),($510|0))|0);
 $512 = tempRet0;
 $513 = $56;
 $514 = $513;
 HEAP32[$514>>2] = $511;
 $515 = (($513) + 4)|0;
 $516 = $515;
 HEAP32[$516>>2] = $512;
 $517 = $17;
 $518 = ($517|0)<(0);
 $519 = $518 << 31 >> 31;
 $520 = $10;
 $521 = ($520|0)<(0);
 $522 = $521 << 31 >> 31;
 $523 = (___muldi3(($517|0),($519|0),($520|0),($522|0))|0);
 $524 = tempRet0;
 $525 = $57;
 $526 = $525;
 HEAP32[$526>>2] = $523;
 $527 = (($525) + 4)|0;
 $528 = $527;
 HEAP32[$528>>2] = $524;
 $529 = $17;
 $530 = ($529|0)<(0);
 $531 = $530 << 31 >> 31;
 $532 = $24;
 $533 = ($532|0)<(0);
 $534 = $533 << 31 >> 31;
 $535 = (___muldi3(($529|0),($531|0),($532|0),($534|0))|0);
 $536 = tempRet0;
 $537 = $58;
 $538 = $537;
 HEAP32[$538>>2] = $535;
 $539 = (($537) + 4)|0;
 $540 = $539;
 HEAP32[$540>>2] = $536;
 $541 = $17;
 $542 = ($541|0)<(0);
 $543 = $542 << 31 >> 31;
 $544 = $25;
 $545 = ($544|0)<(0);
 $546 = $545 << 31 >> 31;
 $547 = (___muldi3(($541|0),($543|0),($544|0),($546|0))|0);
 $548 = tempRet0;
 $549 = $59;
 $550 = $549;
 HEAP32[$550>>2] = $547;
 $551 = (($549) + 4)|0;
 $552 = $551;
 HEAP32[$552>>2] = $548;
 $553 = $17;
 $554 = ($553|0)<(0);
 $555 = $554 << 31 >> 31;
 $556 = $26;
 $557 = ($556|0)<(0);
 $558 = $557 << 31 >> 31;
 $559 = (___muldi3(($553|0),($555|0),($556|0),($558|0))|0);
 $560 = tempRet0;
 $561 = $60;
 $562 = $561;
 HEAP32[$562>>2] = $559;
 $563 = (($561) + 4)|0;
 $564 = $563;
 HEAP32[$564>>2] = $560;
 $565 = $8;
 $566 = ($565|0)<(0);
 $567 = $566 << 31 >> 31;
 $568 = $8;
 $569 = ($568|0)<(0);
 $570 = $569 << 31 >> 31;
 $571 = (___muldi3(($565|0),($567|0),($568|0),($570|0))|0);
 $572 = tempRet0;
 $573 = $61;
 $574 = $573;
 HEAP32[$574>>2] = $571;
 $575 = (($573) + 4)|0;
 $576 = $575;
 HEAP32[$576>>2] = $572;
 $577 = $18;
 $578 = ($577|0)<(0);
 $579 = $578 << 31 >> 31;
 $580 = $9;
 $581 = ($580|0)<(0);
 $582 = $581 << 31 >> 31;
 $583 = (___muldi3(($577|0),($579|0),($580|0),($582|0))|0);
 $584 = tempRet0;
 $585 = $62;
 $586 = $585;
 HEAP32[$586>>2] = $583;
 $587 = (($585) + 4)|0;
 $588 = $587;
 HEAP32[$588>>2] = $584;
 $589 = $18;
 $590 = ($589|0)<(0);
 $591 = $590 << 31 >> 31;
 $592 = $23;
 $593 = ($592|0)<(0);
 $594 = $593 << 31 >> 31;
 $595 = (___muldi3(($589|0),($591|0),($592|0),($594|0))|0);
 $596 = tempRet0;
 $597 = $63;
 $598 = $597;
 HEAP32[$598>>2] = $595;
 $599 = (($597) + 4)|0;
 $600 = $599;
 HEAP32[$600>>2] = $596;
 $601 = $8;
 $602 = ($601|0)<(0);
 $603 = $602 << 31 >> 31;
 $604 = $24;
 $605 = ($604|0)<(0);
 $606 = $605 << 31 >> 31;
 $607 = (___muldi3(($601|0),($603|0),($604|0),($606|0))|0);
 $608 = tempRet0;
 $609 = $64;
 $610 = $609;
 HEAP32[$610>>2] = $607;
 $611 = (($609) + 4)|0;
 $612 = $611;
 HEAP32[$612>>2] = $608;
 $613 = $18;
 $614 = ($613|0)<(0);
 $615 = $614 << 31 >> 31;
 $616 = $25;
 $617 = ($616|0)<(0);
 $618 = $617 << 31 >> 31;
 $619 = (___muldi3(($613|0),($615|0),($616|0),($618|0))|0);
 $620 = tempRet0;
 $621 = $65;
 $622 = $621;
 HEAP32[$622>>2] = $619;
 $623 = (($621) + 4)|0;
 $624 = $623;
 HEAP32[$624>>2] = $620;
 $625 = $8;
 $626 = ($625|0)<(0);
 $627 = $626 << 31 >> 31;
 $628 = $26;
 $629 = ($628|0)<(0);
 $630 = $629 << 31 >> 31;
 $631 = (___muldi3(($625|0),($627|0),($628|0),($630|0))|0);
 $632 = tempRet0;
 $633 = $66;
 $634 = $633;
 HEAP32[$634>>2] = $631;
 $635 = (($633) + 4)|0;
 $636 = $635;
 HEAP32[$636>>2] = $632;
 $637 = $9;
 $638 = ($637|0)<(0);
 $639 = $638 << 31 >> 31;
 $640 = $22;
 $641 = ($640|0)<(0);
 $642 = $641 << 31 >> 31;
 $643 = (___muldi3(($637|0),($639|0),($640|0),($642|0))|0);
 $644 = tempRet0;
 $645 = $67;
 $646 = $645;
 HEAP32[$646>>2] = $643;
 $647 = (($645) + 4)|0;
 $648 = $647;
 HEAP32[$648>>2] = $644;
 $649 = $19;
 $650 = ($649|0)<(0);
 $651 = $650 << 31 >> 31;
 $652 = $23;
 $653 = ($652|0)<(0);
 $654 = $653 << 31 >> 31;
 $655 = (___muldi3(($649|0),($651|0),($652|0),($654|0))|0);
 $656 = tempRet0;
 $657 = $68;
 $658 = $657;
 HEAP32[$658>>2] = $655;
 $659 = (($657) + 4)|0;
 $660 = $659;
 HEAP32[$660>>2] = $656;
 $661 = $19;
 $662 = ($661|0)<(0);
 $663 = $662 << 31 >> 31;
 $664 = $24;
 $665 = ($664|0)<(0);
 $666 = $665 << 31 >> 31;
 $667 = (___muldi3(($661|0),($663|0),($664|0),($666|0))|0);
 $668 = tempRet0;
 $669 = $69;
 $670 = $669;
 HEAP32[$670>>2] = $667;
 $671 = (($669) + 4)|0;
 $672 = $671;
 HEAP32[$672>>2] = $668;
 $673 = $19;
 $674 = ($673|0)<(0);
 $675 = $674 << 31 >> 31;
 $676 = $25;
 $677 = ($676|0)<(0);
 $678 = $677 << 31 >> 31;
 $679 = (___muldi3(($673|0),($675|0),($676|0),($678|0))|0);
 $680 = tempRet0;
 $681 = $70;
 $682 = $681;
 HEAP32[$682>>2] = $679;
 $683 = (($681) + 4)|0;
 $684 = $683;
 HEAP32[$684>>2] = $680;
 $685 = $19;
 $686 = ($685|0)<(0);
 $687 = $686 << 31 >> 31;
 $688 = $26;
 $689 = ($688|0)<(0);
 $690 = $689 << 31 >> 31;
 $691 = (___muldi3(($685|0),($687|0),($688|0),($690|0))|0);
 $692 = tempRet0;
 $693 = $71;
 $694 = $693;
 HEAP32[$694>>2] = $691;
 $695 = (($693) + 4)|0;
 $696 = $695;
 HEAP32[$696>>2] = $692;
 $697 = $10;
 $698 = ($697|0)<(0);
 $699 = $698 << 31 >> 31;
 $700 = $23;
 $701 = ($700|0)<(0);
 $702 = $701 << 31 >> 31;
 $703 = (___muldi3(($697|0),($699|0),($700|0),($702|0))|0);
 $704 = tempRet0;
 $705 = $72;
 $706 = $705;
 HEAP32[$706>>2] = $703;
 $707 = (($705) + 4)|0;
 $708 = $707;
 HEAP32[$708>>2] = $704;
 $709 = $10;
 $710 = ($709|0)<(0);
 $711 = $710 << 31 >> 31;
 $712 = $24;
 $713 = ($712|0)<(0);
 $714 = $713 << 31 >> 31;
 $715 = (___muldi3(($709|0),($711|0),($712|0),($714|0))|0);
 $716 = tempRet0;
 $717 = $73;
 $718 = $717;
 HEAP32[$718>>2] = $715;
 $719 = (($717) + 4)|0;
 $720 = $719;
 HEAP32[$720>>2] = $716;
 $721 = $20;
 $722 = ($721|0)<(0);
 $723 = $722 << 31 >> 31;
 $724 = $25;
 $725 = ($724|0)<(0);
 $726 = $725 << 31 >> 31;
 $727 = (___muldi3(($721|0),($723|0),($724|0),($726|0))|0);
 $728 = tempRet0;
 $729 = $74;
 $730 = $729;
 HEAP32[$730>>2] = $727;
 $731 = (($729) + 4)|0;
 $732 = $731;
 HEAP32[$732>>2] = $728;
 $733 = $10;
 $734 = ($733|0)<(0);
 $735 = $734 << 31 >> 31;
 $736 = $26;
 $737 = ($736|0)<(0);
 $738 = $737 << 31 >> 31;
 $739 = (___muldi3(($733|0),($735|0),($736|0),($738|0))|0);
 $740 = tempRet0;
 $741 = $75;
 $742 = $741;
 HEAP32[$742>>2] = $739;
 $743 = (($741) + 4)|0;
 $744 = $743;
 HEAP32[$744>>2] = $740;
 $745 = $11;
 $746 = ($745|0)<(0);
 $747 = $746 << 31 >> 31;
 $748 = $24;
 $749 = ($748|0)<(0);
 $750 = $749 << 31 >> 31;
 $751 = (___muldi3(($745|0),($747|0),($748|0),($750|0))|0);
 $752 = tempRet0;
 $753 = $76;
 $754 = $753;
 HEAP32[$754>>2] = $751;
 $755 = (($753) + 4)|0;
 $756 = $755;
 HEAP32[$756>>2] = $752;
 $757 = $21;
 $758 = ($757|0)<(0);
 $759 = $758 << 31 >> 31;
 $760 = $25;
 $761 = ($760|0)<(0);
 $762 = $761 << 31 >> 31;
 $763 = (___muldi3(($757|0),($759|0),($760|0),($762|0))|0);
 $764 = tempRet0;
 $765 = $77;
 $766 = $765;
 HEAP32[$766>>2] = $763;
 $767 = (($765) + 4)|0;
 $768 = $767;
 HEAP32[$768>>2] = $764;
 $769 = $21;
 $770 = ($769|0)<(0);
 $771 = $770 << 31 >> 31;
 $772 = $26;
 $773 = ($772|0)<(0);
 $774 = $773 << 31 >> 31;
 $775 = (___muldi3(($769|0),($771|0),($772|0),($774|0))|0);
 $776 = tempRet0;
 $777 = $78;
 $778 = $777;
 HEAP32[$778>>2] = $775;
 $779 = (($777) + 4)|0;
 $780 = $779;
 HEAP32[$780>>2] = $776;
 $781 = $12;
 $782 = ($781|0)<(0);
 $783 = $782 << 31 >> 31;
 $784 = $25;
 $785 = ($784|0)<(0);
 $786 = $785 << 31 >> 31;
 $787 = (___muldi3(($781|0),($783|0),($784|0),($786|0))|0);
 $788 = tempRet0;
 $789 = $79;
 $790 = $789;
 HEAP32[$790>>2] = $787;
 $791 = (($789) + 4)|0;
 $792 = $791;
 HEAP32[$792>>2] = $788;
 $793 = $12;
 $794 = ($793|0)<(0);
 $795 = $794 << 31 >> 31;
 $796 = $26;
 $797 = ($796|0)<(0);
 $798 = $797 << 31 >> 31;
 $799 = (___muldi3(($793|0),($795|0),($796|0),($798|0))|0);
 $800 = tempRet0;
 $801 = $80;
 $802 = $801;
 HEAP32[$802>>2] = $799;
 $803 = (($801) + 4)|0;
 $804 = $803;
 HEAP32[$804>>2] = $800;
 $805 = $13;
 $806 = ($805|0)<(0);
 $807 = $806 << 31 >> 31;
 $808 = $26;
 $809 = ($808|0)<(0);
 $810 = $809 << 31 >> 31;
 $811 = (___muldi3(($805|0),($807|0),($808|0),($810|0))|0);
 $812 = tempRet0;
 $813 = $81;
 $814 = $813;
 HEAP32[$814>>2] = $811;
 $815 = (($813) + 4)|0;
 $816 = $815;
 HEAP32[$816>>2] = $812;
 $817 = $27;
 $818 = $817;
 $819 = HEAP32[$818>>2]|0;
 $820 = (($817) + 4)|0;
 $821 = $820;
 $822 = HEAP32[$821>>2]|0;
 $823 = $45;
 $824 = $823;
 $825 = HEAP32[$824>>2]|0;
 $826 = (($823) + 4)|0;
 $827 = $826;
 $828 = HEAP32[$827>>2]|0;
 $829 = (_i64Add(($819|0),($822|0),($825|0),($828|0))|0);
 $830 = tempRet0;
 $831 = $52;
 $832 = $831;
 $833 = HEAP32[$832>>2]|0;
 $834 = (($831) + 4)|0;
 $835 = $834;
 $836 = HEAP32[$835>>2]|0;
 $837 = (_i64Add(($829|0),($830|0),($833|0),($836|0))|0);
 $838 = tempRet0;
 $839 = $58;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (_i64Add(($837|0),($838|0),($841|0),($844|0))|0);
 $846 = tempRet0;
 $847 = $63;
 $848 = $847;
 $849 = HEAP32[$848>>2]|0;
 $850 = (($847) + 4)|0;
 $851 = $850;
 $852 = HEAP32[$851>>2]|0;
 $853 = (_i64Add(($845|0),($846|0),($849|0),($852|0))|0);
 $854 = tempRet0;
 $855 = $67;
 $856 = $855;
 $857 = HEAP32[$856>>2]|0;
 $858 = (($855) + 4)|0;
 $859 = $858;
 $860 = HEAP32[$859>>2]|0;
 $861 = (_i64Add(($853|0),($854|0),($857|0),($860|0))|0);
 $862 = tempRet0;
 $863 = $82;
 $864 = $863;
 HEAP32[$864>>2] = $861;
 $865 = (($863) + 4)|0;
 $866 = $865;
 HEAP32[$866>>2] = $862;
 $867 = $28;
 $868 = $867;
 $869 = HEAP32[$868>>2]|0;
 $870 = (($867) + 4)|0;
 $871 = $870;
 $872 = HEAP32[$871>>2]|0;
 $873 = $53;
 $874 = $873;
 $875 = HEAP32[$874>>2]|0;
 $876 = (($873) + 4)|0;
 $877 = $876;
 $878 = HEAP32[$877>>2]|0;
 $879 = (_i64Add(($869|0),($872|0),($875|0),($878|0))|0);
 $880 = tempRet0;
 $881 = $59;
 $882 = $881;
 $883 = HEAP32[$882>>2]|0;
 $884 = (($881) + 4)|0;
 $885 = $884;
 $886 = HEAP32[$885>>2]|0;
 $887 = (_i64Add(($879|0),($880|0),($883|0),($886|0))|0);
 $888 = tempRet0;
 $889 = $64;
 $890 = $889;
 $891 = HEAP32[$890>>2]|0;
 $892 = (($889) + 4)|0;
 $893 = $892;
 $894 = HEAP32[$893>>2]|0;
 $895 = (_i64Add(($887|0),($888|0),($891|0),($894|0))|0);
 $896 = tempRet0;
 $897 = $68;
 $898 = $897;
 $899 = HEAP32[$898>>2]|0;
 $900 = (($897) + 4)|0;
 $901 = $900;
 $902 = HEAP32[$901>>2]|0;
 $903 = (_i64Add(($895|0),($896|0),($899|0),($902|0))|0);
 $904 = tempRet0;
 $905 = $83;
 $906 = $905;
 HEAP32[$906>>2] = $903;
 $907 = (($905) + 4)|0;
 $908 = $907;
 HEAP32[$908>>2] = $904;
 $909 = $29;
 $910 = $909;
 $911 = HEAP32[$910>>2]|0;
 $912 = (($909) + 4)|0;
 $913 = $912;
 $914 = HEAP32[$913>>2]|0;
 $915 = $37;
 $916 = $915;
 $917 = HEAP32[$916>>2]|0;
 $918 = (($915) + 4)|0;
 $919 = $918;
 $920 = HEAP32[$919>>2]|0;
 $921 = (_i64Add(($911|0),($914|0),($917|0),($920|0))|0);
 $922 = tempRet0;
 $923 = $60;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_i64Add(($921|0),($922|0),($925|0),($928|0))|0);
 $930 = tempRet0;
 $931 = $65;
 $932 = $931;
 $933 = HEAP32[$932>>2]|0;
 $934 = (($931) + 4)|0;
 $935 = $934;
 $936 = HEAP32[$935>>2]|0;
 $937 = (_i64Add(($929|0),($930|0),($933|0),($936|0))|0);
 $938 = tempRet0;
 $939 = $69;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (_i64Add(($937|0),($938|0),($941|0),($944|0))|0);
 $946 = tempRet0;
 $947 = $72;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($945|0),($946|0),($949|0),($952|0))|0);
 $954 = tempRet0;
 $955 = $84;
 $956 = $955;
 HEAP32[$956>>2] = $953;
 $957 = (($955) + 4)|0;
 $958 = $957;
 HEAP32[$958>>2] = $954;
 $959 = $30;
 $960 = $959;
 $961 = HEAP32[$960>>2]|0;
 $962 = (($959) + 4)|0;
 $963 = $962;
 $964 = HEAP32[$963>>2]|0;
 $965 = $38;
 $966 = $965;
 $967 = HEAP32[$966>>2]|0;
 $968 = (($965) + 4)|0;
 $969 = $968;
 $970 = HEAP32[$969>>2]|0;
 $971 = (_i64Add(($961|0),($964|0),($967|0),($970|0))|0);
 $972 = tempRet0;
 $973 = $66;
 $974 = $973;
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + 4)|0;
 $977 = $976;
 $978 = HEAP32[$977>>2]|0;
 $979 = (_i64Add(($971|0),($972|0),($975|0),($978|0))|0);
 $980 = tempRet0;
 $981 = $70;
 $982 = $981;
 $983 = HEAP32[$982>>2]|0;
 $984 = (($981) + 4)|0;
 $985 = $984;
 $986 = HEAP32[$985>>2]|0;
 $987 = (_i64Add(($979|0),($980|0),($983|0),($986|0))|0);
 $988 = tempRet0;
 $989 = $73;
 $990 = $989;
 $991 = HEAP32[$990>>2]|0;
 $992 = (($989) + 4)|0;
 $993 = $992;
 $994 = HEAP32[$993>>2]|0;
 $995 = (_i64Add(($987|0),($988|0),($991|0),($994|0))|0);
 $996 = tempRet0;
 $997 = $85;
 $998 = $997;
 HEAP32[$998>>2] = $995;
 $999 = (($997) + 4)|0;
 $1000 = $999;
 HEAP32[$1000>>2] = $996;
 $1001 = $31;
 $1002 = $1001;
 $1003 = HEAP32[$1002>>2]|0;
 $1004 = (($1001) + 4)|0;
 $1005 = $1004;
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = $39;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (_i64Add(($1003|0),($1006|0),($1009|0),($1012|0))|0);
 $1014 = tempRet0;
 $1015 = $46;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (_i64Add(($1013|0),($1014|0),($1017|0),($1020|0))|0);
 $1022 = tempRet0;
 $1023 = $71;
 $1024 = $1023;
 $1025 = HEAP32[$1024>>2]|0;
 $1026 = (($1023) + 4)|0;
 $1027 = $1026;
 $1028 = HEAP32[$1027>>2]|0;
 $1029 = (_i64Add(($1021|0),($1022|0),($1025|0),($1028|0))|0);
 $1030 = tempRet0;
 $1031 = $74;
 $1032 = $1031;
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + 4)|0;
 $1035 = $1034;
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = (_i64Add(($1029|0),($1030|0),($1033|0),($1036|0))|0);
 $1038 = tempRet0;
 $1039 = $76;
 $1040 = $1039;
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = (($1039) + 4)|0;
 $1043 = $1042;
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (_i64Add(($1037|0),($1038|0),($1041|0),($1044|0))|0);
 $1046 = tempRet0;
 $1047 = $86;
 $1048 = $1047;
 HEAP32[$1048>>2] = $1045;
 $1049 = (($1047) + 4)|0;
 $1050 = $1049;
 HEAP32[$1050>>2] = $1046;
 $1051 = $32;
 $1052 = $1051;
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + 4)|0;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = $40;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($1057) + 4)|0;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = (_i64Add(($1053|0),($1056|0),($1059|0),($1062|0))|0);
 $1064 = tempRet0;
 $1065 = $47;
 $1066 = $1065;
 $1067 = HEAP32[$1066>>2]|0;
 $1068 = (($1065) + 4)|0;
 $1069 = $1068;
 $1070 = HEAP32[$1069>>2]|0;
 $1071 = (_i64Add(($1063|0),($1064|0),($1067|0),($1070|0))|0);
 $1072 = tempRet0;
 $1073 = $75;
 $1074 = $1073;
 $1075 = HEAP32[$1074>>2]|0;
 $1076 = (($1073) + 4)|0;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = (_i64Add(($1071|0),($1072|0),($1075|0),($1078|0))|0);
 $1080 = tempRet0;
 $1081 = $77;
 $1082 = $1081;
 $1083 = HEAP32[$1082>>2]|0;
 $1084 = (($1081) + 4)|0;
 $1085 = $1084;
 $1086 = HEAP32[$1085>>2]|0;
 $1087 = (_i64Add(($1079|0),($1080|0),($1083|0),($1086|0))|0);
 $1088 = tempRet0;
 $1089 = $87;
 $1090 = $1089;
 HEAP32[$1090>>2] = $1087;
 $1091 = (($1089) + 4)|0;
 $1092 = $1091;
 HEAP32[$1092>>2] = $1088;
 $1093 = $33;
 $1094 = $1093;
 $1095 = HEAP32[$1094>>2]|0;
 $1096 = (($1093) + 4)|0;
 $1097 = $1096;
 $1098 = HEAP32[$1097>>2]|0;
 $1099 = $41;
 $1100 = $1099;
 $1101 = HEAP32[$1100>>2]|0;
 $1102 = (($1099) + 4)|0;
 $1103 = $1102;
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = (_i64Add(($1095|0),($1098|0),($1101|0),($1104|0))|0);
 $1106 = tempRet0;
 $1107 = $48;
 $1108 = $1107;
 $1109 = HEAP32[$1108>>2]|0;
 $1110 = (($1107) + 4)|0;
 $1111 = $1110;
 $1112 = HEAP32[$1111>>2]|0;
 $1113 = (_i64Add(($1105|0),($1106|0),($1109|0),($1112|0))|0);
 $1114 = tempRet0;
 $1115 = $54;
 $1116 = $1115;
 $1117 = HEAP32[$1116>>2]|0;
 $1118 = (($1115) + 4)|0;
 $1119 = $1118;
 $1120 = HEAP32[$1119>>2]|0;
 $1121 = (_i64Add(($1113|0),($1114|0),($1117|0),($1120|0))|0);
 $1122 = tempRet0;
 $1123 = $78;
 $1124 = $1123;
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = (($1123) + 4)|0;
 $1127 = $1126;
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = (_i64Add(($1121|0),($1122|0),($1125|0),($1128|0))|0);
 $1130 = tempRet0;
 $1131 = $79;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = (_i64Add(($1129|0),($1130|0),($1133|0),($1136|0))|0);
 $1138 = tempRet0;
 $1139 = $88;
 $1140 = $1139;
 HEAP32[$1140>>2] = $1137;
 $1141 = (($1139) + 4)|0;
 $1142 = $1141;
 HEAP32[$1142>>2] = $1138;
 $1143 = $34;
 $1144 = $1143;
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + 4)|0;
 $1147 = $1146;
 $1148 = HEAP32[$1147>>2]|0;
 $1149 = $42;
 $1150 = $1149;
 $1151 = HEAP32[$1150>>2]|0;
 $1152 = (($1149) + 4)|0;
 $1153 = $1152;
 $1154 = HEAP32[$1153>>2]|0;
 $1155 = (_i64Add(($1145|0),($1148|0),($1151|0),($1154|0))|0);
 $1156 = tempRet0;
 $1157 = $49;
 $1158 = $1157;
 $1159 = HEAP32[$1158>>2]|0;
 $1160 = (($1157) + 4)|0;
 $1161 = $1160;
 $1162 = HEAP32[$1161>>2]|0;
 $1163 = (_i64Add(($1155|0),($1156|0),($1159|0),($1162|0))|0);
 $1164 = tempRet0;
 $1165 = $55;
 $1166 = $1165;
 $1167 = HEAP32[$1166>>2]|0;
 $1168 = (($1165) + 4)|0;
 $1169 = $1168;
 $1170 = HEAP32[$1169>>2]|0;
 $1171 = (_i64Add(($1163|0),($1164|0),($1167|0),($1170|0))|0);
 $1172 = tempRet0;
 $1173 = $80;
 $1174 = $1173;
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = (($1173) + 4)|0;
 $1177 = $1176;
 $1178 = HEAP32[$1177>>2]|0;
 $1179 = (_i64Add(($1171|0),($1172|0),($1175|0),($1178|0))|0);
 $1180 = tempRet0;
 $1181 = $89;
 $1182 = $1181;
 HEAP32[$1182>>2] = $1179;
 $1183 = (($1181) + 4)|0;
 $1184 = $1183;
 HEAP32[$1184>>2] = $1180;
 $1185 = $35;
 $1186 = $1185;
 $1187 = HEAP32[$1186>>2]|0;
 $1188 = (($1185) + 4)|0;
 $1189 = $1188;
 $1190 = HEAP32[$1189>>2]|0;
 $1191 = $43;
 $1192 = $1191;
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + 4)|0;
 $1195 = $1194;
 $1196 = HEAP32[$1195>>2]|0;
 $1197 = (_i64Add(($1187|0),($1190|0),($1193|0),($1196|0))|0);
 $1198 = tempRet0;
 $1199 = $50;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1197|0),($1198|0),($1201|0),($1204|0))|0);
 $1206 = tempRet0;
 $1207 = $56;
 $1208 = $1207;
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1207) + 4)|0;
 $1211 = $1210;
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = (_i64Add(($1205|0),($1206|0),($1209|0),($1212|0))|0);
 $1214 = tempRet0;
 $1215 = $61;
 $1216 = $1215;
 $1217 = HEAP32[$1216>>2]|0;
 $1218 = (($1215) + 4)|0;
 $1219 = $1218;
 $1220 = HEAP32[$1219>>2]|0;
 $1221 = (_i64Add(($1213|0),($1214|0),($1217|0),($1220|0))|0);
 $1222 = tempRet0;
 $1223 = $81;
 $1224 = $1223;
 $1225 = HEAP32[$1224>>2]|0;
 $1226 = (($1223) + 4)|0;
 $1227 = $1226;
 $1228 = HEAP32[$1227>>2]|0;
 $1229 = (_i64Add(($1221|0),($1222|0),($1225|0),($1228|0))|0);
 $1230 = tempRet0;
 $1231 = $90;
 $1232 = $1231;
 HEAP32[$1232>>2] = $1229;
 $1233 = (($1231) + 4)|0;
 $1234 = $1233;
 HEAP32[$1234>>2] = $1230;
 $1235 = $36;
 $1236 = $1235;
 $1237 = HEAP32[$1236>>2]|0;
 $1238 = (($1235) + 4)|0;
 $1239 = $1238;
 $1240 = HEAP32[$1239>>2]|0;
 $1241 = $44;
 $1242 = $1241;
 $1243 = HEAP32[$1242>>2]|0;
 $1244 = (($1241) + 4)|0;
 $1245 = $1244;
 $1246 = HEAP32[$1245>>2]|0;
 $1247 = (_i64Add(($1237|0),($1240|0),($1243|0),($1246|0))|0);
 $1248 = tempRet0;
 $1249 = $51;
 $1250 = $1249;
 $1251 = HEAP32[$1250>>2]|0;
 $1252 = (($1249) + 4)|0;
 $1253 = $1252;
 $1254 = HEAP32[$1253>>2]|0;
 $1255 = (_i64Add(($1247|0),($1248|0),($1251|0),($1254|0))|0);
 $1256 = tempRet0;
 $1257 = $57;
 $1258 = $1257;
 $1259 = HEAP32[$1258>>2]|0;
 $1260 = (($1257) + 4)|0;
 $1261 = $1260;
 $1262 = HEAP32[$1261>>2]|0;
 $1263 = (_i64Add(($1255|0),($1256|0),($1259|0),($1262|0))|0);
 $1264 = tempRet0;
 $1265 = $62;
 $1266 = $1265;
 $1267 = HEAP32[$1266>>2]|0;
 $1268 = (($1265) + 4)|0;
 $1269 = $1268;
 $1270 = HEAP32[$1269>>2]|0;
 $1271 = (_i64Add(($1263|0),($1264|0),($1267|0),($1270|0))|0);
 $1272 = tempRet0;
 $1273 = $91;
 $1274 = $1273;
 HEAP32[$1274>>2] = $1271;
 $1275 = (($1273) + 4)|0;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1272;
 $1277 = $82;
 $1278 = $1277;
 $1279 = HEAP32[$1278>>2]|0;
 $1280 = (($1277) + 4)|0;
 $1281 = $1280;
 $1282 = HEAP32[$1281>>2]|0;
 $1283 = $82;
 $1284 = $1283;
 $1285 = HEAP32[$1284>>2]|0;
 $1286 = (($1283) + 4)|0;
 $1287 = $1286;
 $1288 = HEAP32[$1287>>2]|0;
 $1289 = (_i64Add(($1285|0),($1288|0),($1279|0),($1282|0))|0);
 $1290 = tempRet0;
 $1291 = $82;
 $1292 = $1291;
 HEAP32[$1292>>2] = $1289;
 $1293 = (($1291) + 4)|0;
 $1294 = $1293;
 HEAP32[$1294>>2] = $1290;
 $1295 = $83;
 $1296 = $1295;
 $1297 = HEAP32[$1296>>2]|0;
 $1298 = (($1295) + 4)|0;
 $1299 = $1298;
 $1300 = HEAP32[$1299>>2]|0;
 $1301 = $83;
 $1302 = $1301;
 $1303 = HEAP32[$1302>>2]|0;
 $1304 = (($1301) + 4)|0;
 $1305 = $1304;
 $1306 = HEAP32[$1305>>2]|0;
 $1307 = (_i64Add(($1303|0),($1306|0),($1297|0),($1300|0))|0);
 $1308 = tempRet0;
 $1309 = $83;
 $1310 = $1309;
 HEAP32[$1310>>2] = $1307;
 $1311 = (($1309) + 4)|0;
 $1312 = $1311;
 HEAP32[$1312>>2] = $1308;
 $1313 = $84;
 $1314 = $1313;
 $1315 = HEAP32[$1314>>2]|0;
 $1316 = (($1313) + 4)|0;
 $1317 = $1316;
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = $84;
 $1320 = $1319;
 $1321 = HEAP32[$1320>>2]|0;
 $1322 = (($1319) + 4)|0;
 $1323 = $1322;
 $1324 = HEAP32[$1323>>2]|0;
 $1325 = (_i64Add(($1321|0),($1324|0),($1315|0),($1318|0))|0);
 $1326 = tempRet0;
 $1327 = $84;
 $1328 = $1327;
 HEAP32[$1328>>2] = $1325;
 $1329 = (($1327) + 4)|0;
 $1330 = $1329;
 HEAP32[$1330>>2] = $1326;
 $1331 = $85;
 $1332 = $1331;
 $1333 = HEAP32[$1332>>2]|0;
 $1334 = (($1331) + 4)|0;
 $1335 = $1334;
 $1336 = HEAP32[$1335>>2]|0;
 $1337 = $85;
 $1338 = $1337;
 $1339 = HEAP32[$1338>>2]|0;
 $1340 = (($1337) + 4)|0;
 $1341 = $1340;
 $1342 = HEAP32[$1341>>2]|0;
 $1343 = (_i64Add(($1339|0),($1342|0),($1333|0),($1336|0))|0);
 $1344 = tempRet0;
 $1345 = $85;
 $1346 = $1345;
 HEAP32[$1346>>2] = $1343;
 $1347 = (($1345) + 4)|0;
 $1348 = $1347;
 HEAP32[$1348>>2] = $1344;
 $1349 = $86;
 $1350 = $1349;
 $1351 = HEAP32[$1350>>2]|0;
 $1352 = (($1349) + 4)|0;
 $1353 = $1352;
 $1354 = HEAP32[$1353>>2]|0;
 $1355 = $86;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (_i64Add(($1357|0),($1360|0),($1351|0),($1354|0))|0);
 $1362 = tempRet0;
 $1363 = $86;
 $1364 = $1363;
 HEAP32[$1364>>2] = $1361;
 $1365 = (($1363) + 4)|0;
 $1366 = $1365;
 HEAP32[$1366>>2] = $1362;
 $1367 = $87;
 $1368 = $1367;
 $1369 = HEAP32[$1368>>2]|0;
 $1370 = (($1367) + 4)|0;
 $1371 = $1370;
 $1372 = HEAP32[$1371>>2]|0;
 $1373 = $87;
 $1374 = $1373;
 $1375 = HEAP32[$1374>>2]|0;
 $1376 = (($1373) + 4)|0;
 $1377 = $1376;
 $1378 = HEAP32[$1377>>2]|0;
 $1379 = (_i64Add(($1375|0),($1378|0),($1369|0),($1372|0))|0);
 $1380 = tempRet0;
 $1381 = $87;
 $1382 = $1381;
 HEAP32[$1382>>2] = $1379;
 $1383 = (($1381) + 4)|0;
 $1384 = $1383;
 HEAP32[$1384>>2] = $1380;
 $1385 = $88;
 $1386 = $1385;
 $1387 = HEAP32[$1386>>2]|0;
 $1388 = (($1385) + 4)|0;
 $1389 = $1388;
 $1390 = HEAP32[$1389>>2]|0;
 $1391 = $88;
 $1392 = $1391;
 $1393 = HEAP32[$1392>>2]|0;
 $1394 = (($1391) + 4)|0;
 $1395 = $1394;
 $1396 = HEAP32[$1395>>2]|0;
 $1397 = (_i64Add(($1393|0),($1396|0),($1387|0),($1390|0))|0);
 $1398 = tempRet0;
 $1399 = $88;
 $1400 = $1399;
 HEAP32[$1400>>2] = $1397;
 $1401 = (($1399) + 4)|0;
 $1402 = $1401;
 HEAP32[$1402>>2] = $1398;
 $1403 = $89;
 $1404 = $1403;
 $1405 = HEAP32[$1404>>2]|0;
 $1406 = (($1403) + 4)|0;
 $1407 = $1406;
 $1408 = HEAP32[$1407>>2]|0;
 $1409 = $89;
 $1410 = $1409;
 $1411 = HEAP32[$1410>>2]|0;
 $1412 = (($1409) + 4)|0;
 $1413 = $1412;
 $1414 = HEAP32[$1413>>2]|0;
 $1415 = (_i64Add(($1411|0),($1414|0),($1405|0),($1408|0))|0);
 $1416 = tempRet0;
 $1417 = $89;
 $1418 = $1417;
 HEAP32[$1418>>2] = $1415;
 $1419 = (($1417) + 4)|0;
 $1420 = $1419;
 HEAP32[$1420>>2] = $1416;
 $1421 = $90;
 $1422 = $1421;
 $1423 = HEAP32[$1422>>2]|0;
 $1424 = (($1421) + 4)|0;
 $1425 = $1424;
 $1426 = HEAP32[$1425>>2]|0;
 $1427 = $90;
 $1428 = $1427;
 $1429 = HEAP32[$1428>>2]|0;
 $1430 = (($1427) + 4)|0;
 $1431 = $1430;
 $1432 = HEAP32[$1431>>2]|0;
 $1433 = (_i64Add(($1429|0),($1432|0),($1423|0),($1426|0))|0);
 $1434 = tempRet0;
 $1435 = $90;
 $1436 = $1435;
 HEAP32[$1436>>2] = $1433;
 $1437 = (($1435) + 4)|0;
 $1438 = $1437;
 HEAP32[$1438>>2] = $1434;
 $1439 = $91;
 $1440 = $1439;
 $1441 = HEAP32[$1440>>2]|0;
 $1442 = (($1439) + 4)|0;
 $1443 = $1442;
 $1444 = HEAP32[$1443>>2]|0;
 $1445 = $91;
 $1446 = $1445;
 $1447 = HEAP32[$1446>>2]|0;
 $1448 = (($1445) + 4)|0;
 $1449 = $1448;
 $1450 = HEAP32[$1449>>2]|0;
 $1451 = (_i64Add(($1447|0),($1450|0),($1441|0),($1444|0))|0);
 $1452 = tempRet0;
 $1453 = $91;
 $1454 = $1453;
 HEAP32[$1454>>2] = $1451;
 $1455 = (($1453) + 4)|0;
 $1456 = $1455;
 HEAP32[$1456>>2] = $1452;
 $1457 = $82;
 $1458 = $1457;
 $1459 = HEAP32[$1458>>2]|0;
 $1460 = (($1457) + 4)|0;
 $1461 = $1460;
 $1462 = HEAP32[$1461>>2]|0;
 $1463 = (_i64Add(($1459|0),($1462|0),33554432,0)|0);
 $1464 = tempRet0;
 $1465 = (_bitshift64Ashr(($1463|0),($1464|0),26)|0);
 $1466 = tempRet0;
 $1467 = $92;
 $1468 = $1467;
 HEAP32[$1468>>2] = $1465;
 $1469 = (($1467) + 4)|0;
 $1470 = $1469;
 HEAP32[$1470>>2] = $1466;
 $1471 = $92;
 $1472 = $1471;
 $1473 = HEAP32[$1472>>2]|0;
 $1474 = (($1471) + 4)|0;
 $1475 = $1474;
 $1476 = HEAP32[$1475>>2]|0;
 $1477 = $83;
 $1478 = $1477;
 $1479 = HEAP32[$1478>>2]|0;
 $1480 = (($1477) + 4)|0;
 $1481 = $1480;
 $1482 = HEAP32[$1481>>2]|0;
 $1483 = (_i64Add(($1479|0),($1482|0),($1473|0),($1476|0))|0);
 $1484 = tempRet0;
 $1485 = $83;
 $1486 = $1485;
 HEAP32[$1486>>2] = $1483;
 $1487 = (($1485) + 4)|0;
 $1488 = $1487;
 HEAP32[$1488>>2] = $1484;
 $1489 = $92;
 $1490 = $1489;
 $1491 = HEAP32[$1490>>2]|0;
 $1492 = (($1489) + 4)|0;
 $1493 = $1492;
 $1494 = HEAP32[$1493>>2]|0;
 $1495 = (_bitshift64Shl(($1491|0),($1494|0),26)|0);
 $1496 = tempRet0;
 $1497 = $82;
 $1498 = $1497;
 $1499 = HEAP32[$1498>>2]|0;
 $1500 = (($1497) + 4)|0;
 $1501 = $1500;
 $1502 = HEAP32[$1501>>2]|0;
 $1503 = (_i64Subtract(($1499|0),($1502|0),($1495|0),($1496|0))|0);
 $1504 = tempRet0;
 $1505 = $82;
 $1506 = $1505;
 HEAP32[$1506>>2] = $1503;
 $1507 = (($1505) + 4)|0;
 $1508 = $1507;
 HEAP32[$1508>>2] = $1504;
 $1509 = $86;
 $1510 = $1509;
 $1511 = HEAP32[$1510>>2]|0;
 $1512 = (($1509) + 4)|0;
 $1513 = $1512;
 $1514 = HEAP32[$1513>>2]|0;
 $1515 = (_i64Add(($1511|0),($1514|0),33554432,0)|0);
 $1516 = tempRet0;
 $1517 = (_bitshift64Ashr(($1515|0),($1516|0),26)|0);
 $1518 = tempRet0;
 $1519 = $96;
 $1520 = $1519;
 HEAP32[$1520>>2] = $1517;
 $1521 = (($1519) + 4)|0;
 $1522 = $1521;
 HEAP32[$1522>>2] = $1518;
 $1523 = $96;
 $1524 = $1523;
 $1525 = HEAP32[$1524>>2]|0;
 $1526 = (($1523) + 4)|0;
 $1527 = $1526;
 $1528 = HEAP32[$1527>>2]|0;
 $1529 = $87;
 $1530 = $1529;
 $1531 = HEAP32[$1530>>2]|0;
 $1532 = (($1529) + 4)|0;
 $1533 = $1532;
 $1534 = HEAP32[$1533>>2]|0;
 $1535 = (_i64Add(($1531|0),($1534|0),($1525|0),($1528|0))|0);
 $1536 = tempRet0;
 $1537 = $87;
 $1538 = $1537;
 HEAP32[$1538>>2] = $1535;
 $1539 = (($1537) + 4)|0;
 $1540 = $1539;
 HEAP32[$1540>>2] = $1536;
 $1541 = $96;
 $1542 = $1541;
 $1543 = HEAP32[$1542>>2]|0;
 $1544 = (($1541) + 4)|0;
 $1545 = $1544;
 $1546 = HEAP32[$1545>>2]|0;
 $1547 = (_bitshift64Shl(($1543|0),($1546|0),26)|0);
 $1548 = tempRet0;
 $1549 = $86;
 $1550 = $1549;
 $1551 = HEAP32[$1550>>2]|0;
 $1552 = (($1549) + 4)|0;
 $1553 = $1552;
 $1554 = HEAP32[$1553>>2]|0;
 $1555 = (_i64Subtract(($1551|0),($1554|0),($1547|0),($1548|0))|0);
 $1556 = tempRet0;
 $1557 = $86;
 $1558 = $1557;
 HEAP32[$1558>>2] = $1555;
 $1559 = (($1557) + 4)|0;
 $1560 = $1559;
 HEAP32[$1560>>2] = $1556;
 $1561 = $83;
 $1562 = $1561;
 $1563 = HEAP32[$1562>>2]|0;
 $1564 = (($1561) + 4)|0;
 $1565 = $1564;
 $1566 = HEAP32[$1565>>2]|0;
 $1567 = (_i64Add(($1563|0),($1566|0),16777216,0)|0);
 $1568 = tempRet0;
 $1569 = (_bitshift64Ashr(($1567|0),($1568|0),25)|0);
 $1570 = tempRet0;
 $1571 = $93;
 $1572 = $1571;
 HEAP32[$1572>>2] = $1569;
 $1573 = (($1571) + 4)|0;
 $1574 = $1573;
 HEAP32[$1574>>2] = $1570;
 $1575 = $93;
 $1576 = $1575;
 $1577 = HEAP32[$1576>>2]|0;
 $1578 = (($1575) + 4)|0;
 $1579 = $1578;
 $1580 = HEAP32[$1579>>2]|0;
 $1581 = $84;
 $1582 = $1581;
 $1583 = HEAP32[$1582>>2]|0;
 $1584 = (($1581) + 4)|0;
 $1585 = $1584;
 $1586 = HEAP32[$1585>>2]|0;
 $1587 = (_i64Add(($1583|0),($1586|0),($1577|0),($1580|0))|0);
 $1588 = tempRet0;
 $1589 = $84;
 $1590 = $1589;
 HEAP32[$1590>>2] = $1587;
 $1591 = (($1589) + 4)|0;
 $1592 = $1591;
 HEAP32[$1592>>2] = $1588;
 $1593 = $93;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (($1593) + 4)|0;
 $1597 = $1596;
 $1598 = HEAP32[$1597>>2]|0;
 $1599 = (_bitshift64Shl(($1595|0),($1598|0),25)|0);
 $1600 = tempRet0;
 $1601 = $83;
 $1602 = $1601;
 $1603 = HEAP32[$1602>>2]|0;
 $1604 = (($1601) + 4)|0;
 $1605 = $1604;
 $1606 = HEAP32[$1605>>2]|0;
 $1607 = (_i64Subtract(($1603|0),($1606|0),($1599|0),($1600|0))|0);
 $1608 = tempRet0;
 $1609 = $83;
 $1610 = $1609;
 HEAP32[$1610>>2] = $1607;
 $1611 = (($1609) + 4)|0;
 $1612 = $1611;
 HEAP32[$1612>>2] = $1608;
 $1613 = $87;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = (($1613) + 4)|0;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (_i64Add(($1615|0),($1618|0),16777216,0)|0);
 $1620 = tempRet0;
 $1621 = (_bitshift64Ashr(($1619|0),($1620|0),25)|0);
 $1622 = tempRet0;
 $1623 = $97;
 $1624 = $1623;
 HEAP32[$1624>>2] = $1621;
 $1625 = (($1623) + 4)|0;
 $1626 = $1625;
 HEAP32[$1626>>2] = $1622;
 $1627 = $97;
 $1628 = $1627;
 $1629 = HEAP32[$1628>>2]|0;
 $1630 = (($1627) + 4)|0;
 $1631 = $1630;
 $1632 = HEAP32[$1631>>2]|0;
 $1633 = $88;
 $1634 = $1633;
 $1635 = HEAP32[$1634>>2]|0;
 $1636 = (($1633) + 4)|0;
 $1637 = $1636;
 $1638 = HEAP32[$1637>>2]|0;
 $1639 = (_i64Add(($1635|0),($1638|0),($1629|0),($1632|0))|0);
 $1640 = tempRet0;
 $1641 = $88;
 $1642 = $1641;
 HEAP32[$1642>>2] = $1639;
 $1643 = (($1641) + 4)|0;
 $1644 = $1643;
 HEAP32[$1644>>2] = $1640;
 $1645 = $97;
 $1646 = $1645;
 $1647 = HEAP32[$1646>>2]|0;
 $1648 = (($1645) + 4)|0;
 $1649 = $1648;
 $1650 = HEAP32[$1649>>2]|0;
 $1651 = (_bitshift64Shl(($1647|0),($1650|0),25)|0);
 $1652 = tempRet0;
 $1653 = $87;
 $1654 = $1653;
 $1655 = HEAP32[$1654>>2]|0;
 $1656 = (($1653) + 4)|0;
 $1657 = $1656;
 $1658 = HEAP32[$1657>>2]|0;
 $1659 = (_i64Subtract(($1655|0),($1658|0),($1651|0),($1652|0))|0);
 $1660 = tempRet0;
 $1661 = $87;
 $1662 = $1661;
 HEAP32[$1662>>2] = $1659;
 $1663 = (($1661) + 4)|0;
 $1664 = $1663;
 HEAP32[$1664>>2] = $1660;
 $1665 = $84;
 $1666 = $1665;
 $1667 = HEAP32[$1666>>2]|0;
 $1668 = (($1665) + 4)|0;
 $1669 = $1668;
 $1670 = HEAP32[$1669>>2]|0;
 $1671 = (_i64Add(($1667|0),($1670|0),33554432,0)|0);
 $1672 = tempRet0;
 $1673 = (_bitshift64Ashr(($1671|0),($1672|0),26)|0);
 $1674 = tempRet0;
 $1675 = $94;
 $1676 = $1675;
 HEAP32[$1676>>2] = $1673;
 $1677 = (($1675) + 4)|0;
 $1678 = $1677;
 HEAP32[$1678>>2] = $1674;
 $1679 = $94;
 $1680 = $1679;
 $1681 = HEAP32[$1680>>2]|0;
 $1682 = (($1679) + 4)|0;
 $1683 = $1682;
 $1684 = HEAP32[$1683>>2]|0;
 $1685 = $85;
 $1686 = $1685;
 $1687 = HEAP32[$1686>>2]|0;
 $1688 = (($1685) + 4)|0;
 $1689 = $1688;
 $1690 = HEAP32[$1689>>2]|0;
 $1691 = (_i64Add(($1687|0),($1690|0),($1681|0),($1684|0))|0);
 $1692 = tempRet0;
 $1693 = $85;
 $1694 = $1693;
 HEAP32[$1694>>2] = $1691;
 $1695 = (($1693) + 4)|0;
 $1696 = $1695;
 HEAP32[$1696>>2] = $1692;
 $1697 = $94;
 $1698 = $1697;
 $1699 = HEAP32[$1698>>2]|0;
 $1700 = (($1697) + 4)|0;
 $1701 = $1700;
 $1702 = HEAP32[$1701>>2]|0;
 $1703 = (_bitshift64Shl(($1699|0),($1702|0),26)|0);
 $1704 = tempRet0;
 $1705 = $84;
 $1706 = $1705;
 $1707 = HEAP32[$1706>>2]|0;
 $1708 = (($1705) + 4)|0;
 $1709 = $1708;
 $1710 = HEAP32[$1709>>2]|0;
 $1711 = (_i64Subtract(($1707|0),($1710|0),($1703|0),($1704|0))|0);
 $1712 = tempRet0;
 $1713 = $84;
 $1714 = $1713;
 HEAP32[$1714>>2] = $1711;
 $1715 = (($1713) + 4)|0;
 $1716 = $1715;
 HEAP32[$1716>>2] = $1712;
 $1717 = $88;
 $1718 = $1717;
 $1719 = HEAP32[$1718>>2]|0;
 $1720 = (($1717) + 4)|0;
 $1721 = $1720;
 $1722 = HEAP32[$1721>>2]|0;
 $1723 = (_i64Add(($1719|0),($1722|0),33554432,0)|0);
 $1724 = tempRet0;
 $1725 = (_bitshift64Ashr(($1723|0),($1724|0),26)|0);
 $1726 = tempRet0;
 $1727 = $98;
 $1728 = $1727;
 HEAP32[$1728>>2] = $1725;
 $1729 = (($1727) + 4)|0;
 $1730 = $1729;
 HEAP32[$1730>>2] = $1726;
 $1731 = $98;
 $1732 = $1731;
 $1733 = HEAP32[$1732>>2]|0;
 $1734 = (($1731) + 4)|0;
 $1735 = $1734;
 $1736 = HEAP32[$1735>>2]|0;
 $1737 = $89;
 $1738 = $1737;
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = (($1737) + 4)|0;
 $1741 = $1740;
 $1742 = HEAP32[$1741>>2]|0;
 $1743 = (_i64Add(($1739|0),($1742|0),($1733|0),($1736|0))|0);
 $1744 = tempRet0;
 $1745 = $89;
 $1746 = $1745;
 HEAP32[$1746>>2] = $1743;
 $1747 = (($1745) + 4)|0;
 $1748 = $1747;
 HEAP32[$1748>>2] = $1744;
 $1749 = $98;
 $1750 = $1749;
 $1751 = HEAP32[$1750>>2]|0;
 $1752 = (($1749) + 4)|0;
 $1753 = $1752;
 $1754 = HEAP32[$1753>>2]|0;
 $1755 = (_bitshift64Shl(($1751|0),($1754|0),26)|0);
 $1756 = tempRet0;
 $1757 = $88;
 $1758 = $1757;
 $1759 = HEAP32[$1758>>2]|0;
 $1760 = (($1757) + 4)|0;
 $1761 = $1760;
 $1762 = HEAP32[$1761>>2]|0;
 $1763 = (_i64Subtract(($1759|0),($1762|0),($1755|0),($1756|0))|0);
 $1764 = tempRet0;
 $1765 = $88;
 $1766 = $1765;
 HEAP32[$1766>>2] = $1763;
 $1767 = (($1765) + 4)|0;
 $1768 = $1767;
 HEAP32[$1768>>2] = $1764;
 $1769 = $85;
 $1770 = $1769;
 $1771 = HEAP32[$1770>>2]|0;
 $1772 = (($1769) + 4)|0;
 $1773 = $1772;
 $1774 = HEAP32[$1773>>2]|0;
 $1775 = (_i64Add(($1771|0),($1774|0),16777216,0)|0);
 $1776 = tempRet0;
 $1777 = (_bitshift64Ashr(($1775|0),($1776|0),25)|0);
 $1778 = tempRet0;
 $1779 = $95;
 $1780 = $1779;
 HEAP32[$1780>>2] = $1777;
 $1781 = (($1779) + 4)|0;
 $1782 = $1781;
 HEAP32[$1782>>2] = $1778;
 $1783 = $95;
 $1784 = $1783;
 $1785 = HEAP32[$1784>>2]|0;
 $1786 = (($1783) + 4)|0;
 $1787 = $1786;
 $1788 = HEAP32[$1787>>2]|0;
 $1789 = $86;
 $1790 = $1789;
 $1791 = HEAP32[$1790>>2]|0;
 $1792 = (($1789) + 4)|0;
 $1793 = $1792;
 $1794 = HEAP32[$1793>>2]|0;
 $1795 = (_i64Add(($1791|0),($1794|0),($1785|0),($1788|0))|0);
 $1796 = tempRet0;
 $1797 = $86;
 $1798 = $1797;
 HEAP32[$1798>>2] = $1795;
 $1799 = (($1797) + 4)|0;
 $1800 = $1799;
 HEAP32[$1800>>2] = $1796;
 $1801 = $95;
 $1802 = $1801;
 $1803 = HEAP32[$1802>>2]|0;
 $1804 = (($1801) + 4)|0;
 $1805 = $1804;
 $1806 = HEAP32[$1805>>2]|0;
 $1807 = (_bitshift64Shl(($1803|0),($1806|0),25)|0);
 $1808 = tempRet0;
 $1809 = $85;
 $1810 = $1809;
 $1811 = HEAP32[$1810>>2]|0;
 $1812 = (($1809) + 4)|0;
 $1813 = $1812;
 $1814 = HEAP32[$1813>>2]|0;
 $1815 = (_i64Subtract(($1811|0),($1814|0),($1807|0),($1808|0))|0);
 $1816 = tempRet0;
 $1817 = $85;
 $1818 = $1817;
 HEAP32[$1818>>2] = $1815;
 $1819 = (($1817) + 4)|0;
 $1820 = $1819;
 HEAP32[$1820>>2] = $1816;
 $1821 = $89;
 $1822 = $1821;
 $1823 = HEAP32[$1822>>2]|0;
 $1824 = (($1821) + 4)|0;
 $1825 = $1824;
 $1826 = HEAP32[$1825>>2]|0;
 $1827 = (_i64Add(($1823|0),($1826|0),16777216,0)|0);
 $1828 = tempRet0;
 $1829 = (_bitshift64Ashr(($1827|0),($1828|0),25)|0);
 $1830 = tempRet0;
 $1831 = $99;
 $1832 = $1831;
 HEAP32[$1832>>2] = $1829;
 $1833 = (($1831) + 4)|0;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1830;
 $1835 = $99;
 $1836 = $1835;
 $1837 = HEAP32[$1836>>2]|0;
 $1838 = (($1835) + 4)|0;
 $1839 = $1838;
 $1840 = HEAP32[$1839>>2]|0;
 $1841 = $90;
 $1842 = $1841;
 $1843 = HEAP32[$1842>>2]|0;
 $1844 = (($1841) + 4)|0;
 $1845 = $1844;
 $1846 = HEAP32[$1845>>2]|0;
 $1847 = (_i64Add(($1843|0),($1846|0),($1837|0),($1840|0))|0);
 $1848 = tempRet0;
 $1849 = $90;
 $1850 = $1849;
 HEAP32[$1850>>2] = $1847;
 $1851 = (($1849) + 4)|0;
 $1852 = $1851;
 HEAP32[$1852>>2] = $1848;
 $1853 = $99;
 $1854 = $1853;
 $1855 = HEAP32[$1854>>2]|0;
 $1856 = (($1853) + 4)|0;
 $1857 = $1856;
 $1858 = HEAP32[$1857>>2]|0;
 $1859 = (_bitshift64Shl(($1855|0),($1858|0),25)|0);
 $1860 = tempRet0;
 $1861 = $89;
 $1862 = $1861;
 $1863 = HEAP32[$1862>>2]|0;
 $1864 = (($1861) + 4)|0;
 $1865 = $1864;
 $1866 = HEAP32[$1865>>2]|0;
 $1867 = (_i64Subtract(($1863|0),($1866|0),($1859|0),($1860|0))|0);
 $1868 = tempRet0;
 $1869 = $89;
 $1870 = $1869;
 HEAP32[$1870>>2] = $1867;
 $1871 = (($1869) + 4)|0;
 $1872 = $1871;
 HEAP32[$1872>>2] = $1868;
 $1873 = $86;
 $1874 = $1873;
 $1875 = HEAP32[$1874>>2]|0;
 $1876 = (($1873) + 4)|0;
 $1877 = $1876;
 $1878 = HEAP32[$1877>>2]|0;
 $1879 = (_i64Add(($1875|0),($1878|0),33554432,0)|0);
 $1880 = tempRet0;
 $1881 = (_bitshift64Ashr(($1879|0),($1880|0),26)|0);
 $1882 = tempRet0;
 $1883 = $96;
 $1884 = $1883;
 HEAP32[$1884>>2] = $1881;
 $1885 = (($1883) + 4)|0;
 $1886 = $1885;
 HEAP32[$1886>>2] = $1882;
 $1887 = $96;
 $1888 = $1887;
 $1889 = HEAP32[$1888>>2]|0;
 $1890 = (($1887) + 4)|0;
 $1891 = $1890;
 $1892 = HEAP32[$1891>>2]|0;
 $1893 = $87;
 $1894 = $1893;
 $1895 = HEAP32[$1894>>2]|0;
 $1896 = (($1893) + 4)|0;
 $1897 = $1896;
 $1898 = HEAP32[$1897>>2]|0;
 $1899 = (_i64Add(($1895|0),($1898|0),($1889|0),($1892|0))|0);
 $1900 = tempRet0;
 $1901 = $87;
 $1902 = $1901;
 HEAP32[$1902>>2] = $1899;
 $1903 = (($1901) + 4)|0;
 $1904 = $1903;
 HEAP32[$1904>>2] = $1900;
 $1905 = $96;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (($1905) + 4)|0;
 $1909 = $1908;
 $1910 = HEAP32[$1909>>2]|0;
 $1911 = (_bitshift64Shl(($1907|0),($1910|0),26)|0);
 $1912 = tempRet0;
 $1913 = $86;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = (($1913) + 4)|0;
 $1917 = $1916;
 $1918 = HEAP32[$1917>>2]|0;
 $1919 = (_i64Subtract(($1915|0),($1918|0),($1911|0),($1912|0))|0);
 $1920 = tempRet0;
 $1921 = $86;
 $1922 = $1921;
 HEAP32[$1922>>2] = $1919;
 $1923 = (($1921) + 4)|0;
 $1924 = $1923;
 HEAP32[$1924>>2] = $1920;
 $1925 = $90;
 $1926 = $1925;
 $1927 = HEAP32[$1926>>2]|0;
 $1928 = (($1925) + 4)|0;
 $1929 = $1928;
 $1930 = HEAP32[$1929>>2]|0;
 $1931 = (_i64Add(($1927|0),($1930|0),33554432,0)|0);
 $1932 = tempRet0;
 $1933 = (_bitshift64Ashr(($1931|0),($1932|0),26)|0);
 $1934 = tempRet0;
 $1935 = $100;
 $1936 = $1935;
 HEAP32[$1936>>2] = $1933;
 $1937 = (($1935) + 4)|0;
 $1938 = $1937;
 HEAP32[$1938>>2] = $1934;
 $1939 = $100;
 $1940 = $1939;
 $1941 = HEAP32[$1940>>2]|0;
 $1942 = (($1939) + 4)|0;
 $1943 = $1942;
 $1944 = HEAP32[$1943>>2]|0;
 $1945 = $91;
 $1946 = $1945;
 $1947 = HEAP32[$1946>>2]|0;
 $1948 = (($1945) + 4)|0;
 $1949 = $1948;
 $1950 = HEAP32[$1949>>2]|0;
 $1951 = (_i64Add(($1947|0),($1950|0),($1941|0),($1944|0))|0);
 $1952 = tempRet0;
 $1953 = $91;
 $1954 = $1953;
 HEAP32[$1954>>2] = $1951;
 $1955 = (($1953) + 4)|0;
 $1956 = $1955;
 HEAP32[$1956>>2] = $1952;
 $1957 = $100;
 $1958 = $1957;
 $1959 = HEAP32[$1958>>2]|0;
 $1960 = (($1957) + 4)|0;
 $1961 = $1960;
 $1962 = HEAP32[$1961>>2]|0;
 $1963 = (_bitshift64Shl(($1959|0),($1962|0),26)|0);
 $1964 = tempRet0;
 $1965 = $90;
 $1966 = $1965;
 $1967 = HEAP32[$1966>>2]|0;
 $1968 = (($1965) + 4)|0;
 $1969 = $1968;
 $1970 = HEAP32[$1969>>2]|0;
 $1971 = (_i64Subtract(($1967|0),($1970|0),($1963|0),($1964|0))|0);
 $1972 = tempRet0;
 $1973 = $90;
 $1974 = $1973;
 HEAP32[$1974>>2] = $1971;
 $1975 = (($1973) + 4)|0;
 $1976 = $1975;
 HEAP32[$1976>>2] = $1972;
 $1977 = $91;
 $1978 = $1977;
 $1979 = HEAP32[$1978>>2]|0;
 $1980 = (($1977) + 4)|0;
 $1981 = $1980;
 $1982 = HEAP32[$1981>>2]|0;
 $1983 = (_i64Add(($1979|0),($1982|0),16777216,0)|0);
 $1984 = tempRet0;
 $1985 = (_bitshift64Ashr(($1983|0),($1984|0),25)|0);
 $1986 = tempRet0;
 $1987 = $101;
 $1988 = $1987;
 HEAP32[$1988>>2] = $1985;
 $1989 = (($1987) + 4)|0;
 $1990 = $1989;
 HEAP32[$1990>>2] = $1986;
 $1991 = $101;
 $1992 = $1991;
 $1993 = HEAP32[$1992>>2]|0;
 $1994 = (($1991) + 4)|0;
 $1995 = $1994;
 $1996 = HEAP32[$1995>>2]|0;
 $1997 = (___muldi3(($1993|0),($1996|0),19,0)|0);
 $1998 = tempRet0;
 $1999 = $82;
 $2000 = $1999;
 $2001 = HEAP32[$2000>>2]|0;
 $2002 = (($1999) + 4)|0;
 $2003 = $2002;
 $2004 = HEAP32[$2003>>2]|0;
 $2005 = (_i64Add(($2001|0),($2004|0),($1997|0),($1998|0))|0);
 $2006 = tempRet0;
 $2007 = $82;
 $2008 = $2007;
 HEAP32[$2008>>2] = $2005;
 $2009 = (($2007) + 4)|0;
 $2010 = $2009;
 HEAP32[$2010>>2] = $2006;
 $2011 = $101;
 $2012 = $2011;
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = (($2011) + 4)|0;
 $2015 = $2014;
 $2016 = HEAP32[$2015>>2]|0;
 $2017 = (_bitshift64Shl(($2013|0),($2016|0),25)|0);
 $2018 = tempRet0;
 $2019 = $91;
 $2020 = $2019;
 $2021 = HEAP32[$2020>>2]|0;
 $2022 = (($2019) + 4)|0;
 $2023 = $2022;
 $2024 = HEAP32[$2023>>2]|0;
 $2025 = (_i64Subtract(($2021|0),($2024|0),($2017|0),($2018|0))|0);
 $2026 = tempRet0;
 $2027 = $91;
 $2028 = $2027;
 HEAP32[$2028>>2] = $2025;
 $2029 = (($2027) + 4)|0;
 $2030 = $2029;
 HEAP32[$2030>>2] = $2026;
 $2031 = $82;
 $2032 = $2031;
 $2033 = HEAP32[$2032>>2]|0;
 $2034 = (($2031) + 4)|0;
 $2035 = $2034;
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = (_i64Add(($2033|0),($2036|0),33554432,0)|0);
 $2038 = tempRet0;
 $2039 = (_bitshift64Ashr(($2037|0),($2038|0),26)|0);
 $2040 = tempRet0;
 $2041 = $92;
 $2042 = $2041;
 HEAP32[$2042>>2] = $2039;
 $2043 = (($2041) + 4)|0;
 $2044 = $2043;
 HEAP32[$2044>>2] = $2040;
 $2045 = $92;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (($2045) + 4)|0;
 $2049 = $2048;
 $2050 = HEAP32[$2049>>2]|0;
 $2051 = $83;
 $2052 = $2051;
 $2053 = HEAP32[$2052>>2]|0;
 $2054 = (($2051) + 4)|0;
 $2055 = $2054;
 $2056 = HEAP32[$2055>>2]|0;
 $2057 = (_i64Add(($2053|0),($2056|0),($2047|0),($2050|0))|0);
 $2058 = tempRet0;
 $2059 = $83;
 $2060 = $2059;
 HEAP32[$2060>>2] = $2057;
 $2061 = (($2059) + 4)|0;
 $2062 = $2061;
 HEAP32[$2062>>2] = $2058;
 $2063 = $92;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (_bitshift64Shl(($2065|0),($2068|0),26)|0);
 $2070 = tempRet0;
 $2071 = $82;
 $2072 = $2071;
 $2073 = HEAP32[$2072>>2]|0;
 $2074 = (($2071) + 4)|0;
 $2075 = $2074;
 $2076 = HEAP32[$2075>>2]|0;
 $2077 = (_i64Subtract(($2073|0),($2076|0),($2069|0),($2070|0))|0);
 $2078 = tempRet0;
 $2079 = $82;
 $2080 = $2079;
 HEAP32[$2080>>2] = $2077;
 $2081 = (($2079) + 4)|0;
 $2082 = $2081;
 HEAP32[$2082>>2] = $2078;
 $2083 = $82;
 $2084 = $2083;
 $2085 = HEAP32[$2084>>2]|0;
 $2086 = (($2083) + 4)|0;
 $2087 = $2086;
 $2088 = HEAP32[$2087>>2]|0;
 $2089 = $2;
 HEAP32[$2089>>2] = $2085;
 $2090 = $83;
 $2091 = $2090;
 $2092 = HEAP32[$2091>>2]|0;
 $2093 = (($2090) + 4)|0;
 $2094 = $2093;
 $2095 = HEAP32[$2094>>2]|0;
 $2096 = $2;
 $2097 = ((($2096)) + 4|0);
 HEAP32[$2097>>2] = $2092;
 $2098 = $84;
 $2099 = $2098;
 $2100 = HEAP32[$2099>>2]|0;
 $2101 = (($2098) + 4)|0;
 $2102 = $2101;
 $2103 = HEAP32[$2102>>2]|0;
 $2104 = $2;
 $2105 = ((($2104)) + 8|0);
 HEAP32[$2105>>2] = $2100;
 $2106 = $85;
 $2107 = $2106;
 $2108 = HEAP32[$2107>>2]|0;
 $2109 = (($2106) + 4)|0;
 $2110 = $2109;
 $2111 = HEAP32[$2110>>2]|0;
 $2112 = $2;
 $2113 = ((($2112)) + 12|0);
 HEAP32[$2113>>2] = $2108;
 $2114 = $86;
 $2115 = $2114;
 $2116 = HEAP32[$2115>>2]|0;
 $2117 = (($2114) + 4)|0;
 $2118 = $2117;
 $2119 = HEAP32[$2118>>2]|0;
 $2120 = $2;
 $2121 = ((($2120)) + 16|0);
 HEAP32[$2121>>2] = $2116;
 $2122 = $87;
 $2123 = $2122;
 $2124 = HEAP32[$2123>>2]|0;
 $2125 = (($2122) + 4)|0;
 $2126 = $2125;
 $2127 = HEAP32[$2126>>2]|0;
 $2128 = $2;
 $2129 = ((($2128)) + 20|0);
 HEAP32[$2129>>2] = $2124;
 $2130 = $88;
 $2131 = $2130;
 $2132 = HEAP32[$2131>>2]|0;
 $2133 = (($2130) + 4)|0;
 $2134 = $2133;
 $2135 = HEAP32[$2134>>2]|0;
 $2136 = $2;
 $2137 = ((($2136)) + 24|0);
 HEAP32[$2137>>2] = $2132;
 $2138 = $89;
 $2139 = $2138;
 $2140 = HEAP32[$2139>>2]|0;
 $2141 = (($2138) + 4)|0;
 $2142 = $2141;
 $2143 = HEAP32[$2142>>2]|0;
 $2144 = $2;
 $2145 = ((($2144)) + 28|0);
 HEAP32[$2145>>2] = $2140;
 $2146 = $90;
 $2147 = $2146;
 $2148 = HEAP32[$2147>>2]|0;
 $2149 = (($2146) + 4)|0;
 $2150 = $2149;
 $2151 = HEAP32[$2150>>2]|0;
 $2152 = $2;
 $2153 = ((($2152)) + 32|0);
 HEAP32[$2153>>2] = $2148;
 $2154 = $91;
 $2155 = $2154;
 $2156 = HEAP32[$2155>>2]|0;
 $2157 = (($2154) + 4)|0;
 $2158 = $2157;
 $2159 = HEAP32[$2158>>2]|0;
 $2160 = $2;
 $2161 = ((($2160)) + 36|0);
 HEAP32[$2161>>2] = $2156;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $4;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $8 = $43;
 $44 = $4;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $47 = $4;
 $48 = ((($47)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $10 = $49;
 $50 = $4;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $53 = $4;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $4;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $13 = $58;
 $59 = $4;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $14 = $61;
 $62 = $4;
 $63 = ((($62)) + 36|0);
 $64 = HEAP32[$63>>2]|0;
 $15 = $64;
 $65 = $5;
 $66 = HEAP32[$65>>2]|0;
 $16 = $66;
 $67 = $5;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $17 = $69;
 $70 = $5;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $18 = $72;
 $73 = $5;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $19 = $75;
 $76 = $5;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $20 = $78;
 $79 = $5;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $21 = $81;
 $82 = $5;
 $83 = ((($82)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $22 = $84;
 $85 = $5;
 $86 = ((($85)) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $23 = $87;
 $88 = $5;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $24 = $90;
 $91 = $5;
 $92 = ((($91)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $25 = $93;
 $94 = $6;
 $95 = $16;
 $96 = (($94) - ($95))|0;
 $26 = $96;
 $97 = $7;
 $98 = $17;
 $99 = (($97) - ($98))|0;
 $27 = $99;
 $100 = $8;
 $101 = $18;
 $102 = (($100) - ($101))|0;
 $28 = $102;
 $103 = $9;
 $104 = $19;
 $105 = (($103) - ($104))|0;
 $29 = $105;
 $106 = $10;
 $107 = $20;
 $108 = (($106) - ($107))|0;
 $30 = $108;
 $109 = $11;
 $110 = $21;
 $111 = (($109) - ($110))|0;
 $31 = $111;
 $112 = $12;
 $113 = $22;
 $114 = (($112) - ($113))|0;
 $32 = $114;
 $115 = $13;
 $116 = $23;
 $117 = (($115) - ($116))|0;
 $33 = $117;
 $118 = $14;
 $119 = $24;
 $120 = (($118) - ($119))|0;
 $34 = $120;
 $121 = $15;
 $122 = $25;
 $123 = (($121) - ($122))|0;
 $35 = $123;
 $124 = $26;
 $125 = $3;
 HEAP32[$125>>2] = $124;
 $126 = $27;
 $127 = $3;
 $128 = ((($127)) + 4|0);
 HEAP32[$128>>2] = $126;
 $129 = $28;
 $130 = $3;
 $131 = ((($130)) + 8|0);
 HEAP32[$131>>2] = $129;
 $132 = $29;
 $133 = $3;
 $134 = ((($133)) + 12|0);
 HEAP32[$134>>2] = $132;
 $135 = $30;
 $136 = $3;
 $137 = ((($136)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = $31;
 $139 = $3;
 $140 = ((($139)) + 20|0);
 HEAP32[$140>>2] = $138;
 $141 = $32;
 $142 = $3;
 $143 = ((($142)) + 24|0);
 HEAP32[$143>>2] = $141;
 $144 = $33;
 $145 = $3;
 $146 = ((($145)) + 28|0);
 HEAP32[$146>>2] = $144;
 $147 = $34;
 $148 = $3;
 $149 = ((($148)) + 32|0);
 HEAP32[$149>>2] = $147;
 $150 = $35;
 $151 = $3;
 $152 = ((($151)) + 36|0);
 HEAP32[$152>>2] = $150;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_fe_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = $0;
 $3 = $1;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $4 = $26;
 $27 = $3;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $6 = $32;
 $33 = $3;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $7 = $35;
 $36 = $3;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $8 = $38;
 $39 = $3;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $9 = $41;
 $42 = $3;
 $43 = ((($42)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $10 = $44;
 $45 = $3;
 $46 = ((($45)) + 28|0);
 $47 = HEAP32[$46>>2]|0;
 $11 = $47;
 $48 = $3;
 $49 = ((($48)) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 $12 = $50;
 $51 = $3;
 $52 = ((($51)) + 36|0);
 $53 = HEAP32[$52>>2]|0;
 $13 = $53;
 $54 = $13;
 $55 = ($54*19)|0;
 $56 = (($55) + 16777216)|0;
 $57 = $56 >> 25;
 $14 = $57;
 $58 = $4;
 $59 = $14;
 $60 = (($58) + ($59))|0;
 $61 = $60 >> 26;
 $14 = $61;
 $62 = $5;
 $63 = $14;
 $64 = (($62) + ($63))|0;
 $65 = $64 >> 25;
 $14 = $65;
 $66 = $6;
 $67 = $14;
 $68 = (($66) + ($67))|0;
 $69 = $68 >> 26;
 $14 = $69;
 $70 = $7;
 $71 = $14;
 $72 = (($70) + ($71))|0;
 $73 = $72 >> 25;
 $14 = $73;
 $74 = $8;
 $75 = $14;
 $76 = (($74) + ($75))|0;
 $77 = $76 >> 26;
 $14 = $77;
 $78 = $9;
 $79 = $14;
 $80 = (($78) + ($79))|0;
 $81 = $80 >> 25;
 $14 = $81;
 $82 = $10;
 $83 = $14;
 $84 = (($82) + ($83))|0;
 $85 = $84 >> 26;
 $14 = $85;
 $86 = $11;
 $87 = $14;
 $88 = (($86) + ($87))|0;
 $89 = $88 >> 25;
 $14 = $89;
 $90 = $12;
 $91 = $14;
 $92 = (($90) + ($91))|0;
 $93 = $92 >> 26;
 $14 = $93;
 $94 = $13;
 $95 = $14;
 $96 = (($94) + ($95))|0;
 $97 = $96 >> 25;
 $14 = $97;
 $98 = $14;
 $99 = ($98*19)|0;
 $100 = $4;
 $101 = (($100) + ($99))|0;
 $4 = $101;
 $102 = $4;
 $103 = $102 >> 26;
 $15 = $103;
 $104 = $15;
 $105 = $5;
 $106 = (($105) + ($104))|0;
 $5 = $106;
 $107 = $15;
 $108 = $107 << 26;
 $109 = $4;
 $110 = (($109) - ($108))|0;
 $4 = $110;
 $111 = $5;
 $112 = $111 >> 25;
 $16 = $112;
 $113 = $16;
 $114 = $6;
 $115 = (($114) + ($113))|0;
 $6 = $115;
 $116 = $16;
 $117 = $116 << 25;
 $118 = $5;
 $119 = (($118) - ($117))|0;
 $5 = $119;
 $120 = $6;
 $121 = $120 >> 26;
 $17 = $121;
 $122 = $17;
 $123 = $7;
 $124 = (($123) + ($122))|0;
 $7 = $124;
 $125 = $17;
 $126 = $125 << 26;
 $127 = $6;
 $128 = (($127) - ($126))|0;
 $6 = $128;
 $129 = $7;
 $130 = $129 >> 25;
 $18 = $130;
 $131 = $18;
 $132 = $8;
 $133 = (($132) + ($131))|0;
 $8 = $133;
 $134 = $18;
 $135 = $134 << 25;
 $136 = $7;
 $137 = (($136) - ($135))|0;
 $7 = $137;
 $138 = $8;
 $139 = $138 >> 26;
 $19 = $139;
 $140 = $19;
 $141 = $9;
 $142 = (($141) + ($140))|0;
 $9 = $142;
 $143 = $19;
 $144 = $143 << 26;
 $145 = $8;
 $146 = (($145) - ($144))|0;
 $8 = $146;
 $147 = $9;
 $148 = $147 >> 25;
 $20 = $148;
 $149 = $20;
 $150 = $10;
 $151 = (($150) + ($149))|0;
 $10 = $151;
 $152 = $20;
 $153 = $152 << 25;
 $154 = $9;
 $155 = (($154) - ($153))|0;
 $9 = $155;
 $156 = $10;
 $157 = $156 >> 26;
 $21 = $157;
 $158 = $21;
 $159 = $11;
 $160 = (($159) + ($158))|0;
 $11 = $160;
 $161 = $21;
 $162 = $161 << 26;
 $163 = $10;
 $164 = (($163) - ($162))|0;
 $10 = $164;
 $165 = $11;
 $166 = $165 >> 25;
 $22 = $166;
 $167 = $22;
 $168 = $12;
 $169 = (($168) + ($167))|0;
 $12 = $169;
 $170 = $22;
 $171 = $170 << 25;
 $172 = $11;
 $173 = (($172) - ($171))|0;
 $11 = $173;
 $174 = $12;
 $175 = $174 >> 26;
 $23 = $175;
 $176 = $23;
 $177 = $13;
 $178 = (($177) + ($176))|0;
 $13 = $178;
 $179 = $23;
 $180 = $179 << 26;
 $181 = $12;
 $182 = (($181) - ($180))|0;
 $12 = $182;
 $183 = $13;
 $184 = $183 >> 25;
 $24 = $184;
 $185 = $24;
 $186 = $185 << 25;
 $187 = $13;
 $188 = (($187) - ($186))|0;
 $13 = $188;
 $189 = $4;
 $190 = $189 >> 0;
 $191 = $190&255;
 $192 = $2;
 HEAP8[$192>>0] = $191;
 $193 = $4;
 $194 = $193 >> 8;
 $195 = $194&255;
 $196 = $2;
 $197 = ((($196)) + 1|0);
 HEAP8[$197>>0] = $195;
 $198 = $4;
 $199 = $198 >> 16;
 $200 = $199&255;
 $201 = $2;
 $202 = ((($201)) + 2|0);
 HEAP8[$202>>0] = $200;
 $203 = $4;
 $204 = $203 >> 24;
 $205 = $5;
 $206 = $205 << 2;
 $207 = $204 | $206;
 $208 = $207&255;
 $209 = $2;
 $210 = ((($209)) + 3|0);
 HEAP8[$210>>0] = $208;
 $211 = $5;
 $212 = $211 >> 6;
 $213 = $212&255;
 $214 = $2;
 $215 = ((($214)) + 4|0);
 HEAP8[$215>>0] = $213;
 $216 = $5;
 $217 = $216 >> 14;
 $218 = $217&255;
 $219 = $2;
 $220 = ((($219)) + 5|0);
 HEAP8[$220>>0] = $218;
 $221 = $5;
 $222 = $221 >> 22;
 $223 = $6;
 $224 = $223 << 3;
 $225 = $222 | $224;
 $226 = $225&255;
 $227 = $2;
 $228 = ((($227)) + 6|0);
 HEAP8[$228>>0] = $226;
 $229 = $6;
 $230 = $229 >> 5;
 $231 = $230&255;
 $232 = $2;
 $233 = ((($232)) + 7|0);
 HEAP8[$233>>0] = $231;
 $234 = $6;
 $235 = $234 >> 13;
 $236 = $235&255;
 $237 = $2;
 $238 = ((($237)) + 8|0);
 HEAP8[$238>>0] = $236;
 $239 = $6;
 $240 = $239 >> 21;
 $241 = $7;
 $242 = $241 << 5;
 $243 = $240 | $242;
 $244 = $243&255;
 $245 = $2;
 $246 = ((($245)) + 9|0);
 HEAP8[$246>>0] = $244;
 $247 = $7;
 $248 = $247 >> 3;
 $249 = $248&255;
 $250 = $2;
 $251 = ((($250)) + 10|0);
 HEAP8[$251>>0] = $249;
 $252 = $7;
 $253 = $252 >> 11;
 $254 = $253&255;
 $255 = $2;
 $256 = ((($255)) + 11|0);
 HEAP8[$256>>0] = $254;
 $257 = $7;
 $258 = $257 >> 19;
 $259 = $8;
 $260 = $259 << 6;
 $261 = $258 | $260;
 $262 = $261&255;
 $263 = $2;
 $264 = ((($263)) + 12|0);
 HEAP8[$264>>0] = $262;
 $265 = $8;
 $266 = $265 >> 2;
 $267 = $266&255;
 $268 = $2;
 $269 = ((($268)) + 13|0);
 HEAP8[$269>>0] = $267;
 $270 = $8;
 $271 = $270 >> 10;
 $272 = $271&255;
 $273 = $2;
 $274 = ((($273)) + 14|0);
 HEAP8[$274>>0] = $272;
 $275 = $8;
 $276 = $275 >> 18;
 $277 = $276&255;
 $278 = $2;
 $279 = ((($278)) + 15|0);
 HEAP8[$279>>0] = $277;
 $280 = $9;
 $281 = $280 >> 0;
 $282 = $281&255;
 $283 = $2;
 $284 = ((($283)) + 16|0);
 HEAP8[$284>>0] = $282;
 $285 = $9;
 $286 = $285 >> 8;
 $287 = $286&255;
 $288 = $2;
 $289 = ((($288)) + 17|0);
 HEAP8[$289>>0] = $287;
 $290 = $9;
 $291 = $290 >> 16;
 $292 = $291&255;
 $293 = $2;
 $294 = ((($293)) + 18|0);
 HEAP8[$294>>0] = $292;
 $295 = $9;
 $296 = $295 >> 24;
 $297 = $10;
 $298 = $297 << 1;
 $299 = $296 | $298;
 $300 = $299&255;
 $301 = $2;
 $302 = ((($301)) + 19|0);
 HEAP8[$302>>0] = $300;
 $303 = $10;
 $304 = $303 >> 7;
 $305 = $304&255;
 $306 = $2;
 $307 = ((($306)) + 20|0);
 HEAP8[$307>>0] = $305;
 $308 = $10;
 $309 = $308 >> 15;
 $310 = $309&255;
 $311 = $2;
 $312 = ((($311)) + 21|0);
 HEAP8[$312>>0] = $310;
 $313 = $10;
 $314 = $313 >> 23;
 $315 = $11;
 $316 = $315 << 3;
 $317 = $314 | $316;
 $318 = $317&255;
 $319 = $2;
 $320 = ((($319)) + 22|0);
 HEAP8[$320>>0] = $318;
 $321 = $11;
 $322 = $321 >> 5;
 $323 = $322&255;
 $324 = $2;
 $325 = ((($324)) + 23|0);
 HEAP8[$325>>0] = $323;
 $326 = $11;
 $327 = $326 >> 13;
 $328 = $327&255;
 $329 = $2;
 $330 = ((($329)) + 24|0);
 HEAP8[$330>>0] = $328;
 $331 = $11;
 $332 = $331 >> 21;
 $333 = $12;
 $334 = $333 << 4;
 $335 = $332 | $334;
 $336 = $335&255;
 $337 = $2;
 $338 = ((($337)) + 25|0);
 HEAP8[$338>>0] = $336;
 $339 = $12;
 $340 = $339 >> 4;
 $341 = $340&255;
 $342 = $2;
 $343 = ((($342)) + 26|0);
 HEAP8[$343>>0] = $341;
 $344 = $12;
 $345 = $344 >> 12;
 $346 = $345&255;
 $347 = $2;
 $348 = ((($347)) + 27|0);
 HEAP8[$348>>0] = $346;
 $349 = $12;
 $350 = $349 >> 20;
 $351 = $13;
 $352 = $351 << 6;
 $353 = $350 | $352;
 $354 = $353&255;
 $355 = $2;
 $356 = ((($355)) + 28|0);
 HEAP8[$356>>0] = $354;
 $357 = $13;
 $358 = $357 >> 2;
 $359 = $358&255;
 $360 = $2;
 $361 = ((($360)) + 29|0);
 HEAP8[$361>>0] = $359;
 $362 = $13;
 $363 = $362 >> 10;
 $364 = $363&255;
 $365 = $2;
 $366 = ((($365)) + 30|0);
 HEAP8[$366>>0] = $364;
 $367 = $13;
 $368 = $367 >> 18;
 $369 = $368&255;
 $370 = $2;
 $371 = ((($370)) + 31|0);
 HEAP8[$371>>0] = $369;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _crypto_sign_ed25519_ref10_fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _crypto_sign_ed25519_ref10_fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 _crypto_sign_ed25519_ref10_fe_mul($17,$18,$19);
 $20 = $3;
 $21 = ((($20)) + 40|0);
 $22 = $3;
 $23 = ((($22)) + 40|0);
 $24 = $5;
 $25 = ((($24)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($21,$23,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 120|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($27,$29,$31);
 $32 = $3;
 $33 = $4;
 $34 = ((($33)) + 80|0);
 $35 = $5;
 $36 = ((($35)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_mul($32,$34,$36);
 $37 = $3;
 $38 = $3;
 _crypto_sign_ed25519_ref10_fe_add($6,$37,$38);
 $39 = $3;
 $40 = $3;
 $41 = ((($40)) + 80|0);
 $42 = $3;
 $43 = ((($42)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sub($39,$41,$43);
 $44 = $3;
 $45 = ((($44)) + 40|0);
 $46 = $3;
 $47 = ((($46)) + 80|0);
 $48 = $3;
 $49 = ((($48)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_add($45,$47,$49);
 $50 = $3;
 $51 = ((($50)) + 80|0);
 $52 = $3;
 $53 = ((($52)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_add($51,$6,$53);
 $54 = $3;
 $55 = ((($54)) + 120|0);
 $56 = $3;
 $57 = ((($56)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_sub($55,$6,$57);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_double_scalarmult_vartime($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2304|0);
 $8 = sp + 2040|0;
 $9 = sp + 1784|0;
 $10 = sp + 488|0;
 $11 = sp + 328|0;
 $12 = sp + 168|0;
 $13 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $15 = $5;
 _slide($8,$15);
 $16 = $7;
 _slide($9,$16);
 $17 = $6;
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($10,$17);
 $18 = $6;
 _crypto_sign_ed25519_ref10_ge_p3_dbl($11,$18);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($13,$11);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$10);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $19 = ((($10)) + 160|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($19,$12);
 $20 = ((($10)) + 160|0);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$20);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $21 = ((($10)) + 320|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($21,$12);
 $22 = ((($10)) + 320|0);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$22);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $23 = ((($10)) + 480|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($23,$12);
 $24 = ((($10)) + 480|0);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$24);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $25 = ((($10)) + 640|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($25,$12);
 $26 = ((($10)) + 640|0);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$26);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $27 = ((($10)) + 800|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($27,$12);
 $28 = ((($10)) + 800|0);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$28);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $29 = ((($10)) + 960|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($29,$12);
 $30 = ((($10)) + 960|0);
 _crypto_sign_ed25519_ref10_ge_add($11,$13,$30);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
 $31 = ((($10)) + 1120|0);
 _crypto_sign_ed25519_ref10_ge_p3_to_cached($31,$12);
 $32 = $4;
 _crypto_sign_ed25519_ref10_ge_p2_0($32);
 $14 = 255;
 while(1) {
  $33 = $14;
  $34 = ($33|0)>=(0);
  if (!($34)) {
   break;
  }
  $35 = $14;
  $36 = (($8) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)!=(0);
  if ($39) {
   break;
  }
  $40 = $14;
  $41 = (($9) + ($40)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = ($43|0)!=(0);
  if ($44) {
   break;
  }
  $45 = $14;
  $46 = (($45) + -1)|0;
  $14 = $46;
 }
 while(1) {
  $47 = $14;
  $48 = ($47|0)>=(0);
  if (!($48)) {
   break;
  }
  $49 = $4;
  _crypto_sign_ed25519_ref10_ge_p2_dbl($11,$49);
  $50 = $14;
  $51 = (($8) + ($50)|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = ($53|0)>(0);
  if ($54) {
   _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
   $55 = $14;
   $56 = (($8) + ($55)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 << 24 >> 24;
   $59 = (($58|0) / 2)&-1;
   $60 = (($10) + (($59*160)|0)|0);
   _crypto_sign_ed25519_ref10_ge_add($11,$12,$60);
  } else {
   $61 = $14;
   $62 = (($8) + ($61)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63 << 24 >> 24;
   $65 = ($64|0)<(0);
   if ($65) {
    _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
    $66 = $14;
    $67 = (($8) + ($66)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $70 = (0 - ($69))|0;
    $71 = (($70|0) / 2)&-1;
    $72 = (($10) + (($71*160)|0)|0);
    _crypto_sign_ed25519_ref10_ge_sub($11,$12,$72);
   }
  }
  $73 = $14;
  $74 = (($9) + ($73)|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75 << 24 >> 24;
  $77 = ($76|0)>(0);
  if ($77) {
   _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
   $78 = $14;
   $79 = (($9) + ($78)|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80 << 24 >> 24;
   $82 = (($81|0) / 2)&-1;
   $83 = (200 + (($82*120)|0)|0);
   _crypto_sign_ed25519_ref10_ge_madd($11,$12,$83);
  } else {
   $84 = $14;
   $85 = (($9) + ($84)|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86 << 24 >> 24;
   $88 = ($87|0)<(0);
   if ($88) {
    _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($12,$11);
    $89 = $14;
    $90 = (($9) + ($89)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91 << 24 >> 24;
    $93 = (0 - ($92))|0;
    $94 = (($93|0) / 2)&-1;
    $95 = (200 + (($94*120)|0)|0);
    _crypto_sign_ed25519_ref10_ge_msub($11,$12,$95);
   }
  }
  $96 = $4;
  _crypto_sign_ed25519_ref10_ge_p1p1_to_p2($96,$11);
  $97 = $14;
  $98 = (($97) + -1)|0;
  $14 = $98;
 }
 STACKTOP = sp;return;
}
function _slide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = ($7|0)<(256);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = $4;
  $11 = $10 >> 3;
  $12 = (($9) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $4;
  $16 = $15 & 7;
  $17 = $14 >> $16;
  $18 = 1 & $17;
  $19 = $18&255;
  $20 = $2;
  $21 = $4;
  $22 = (($20) + ($21)|0);
  HEAP8[$22>>0] = $19;
  $23 = $4;
  $24 = (($23) + 1)|0;
  $4 = $24;
 }
 $4 = 0;
 while(1) {
  $25 = $4;
  $26 = ($25|0)<(256);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = $4;
  $29 = (($27) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)!=(0);
  L8: do {
   if ($31) {
    $5 = 1;
    while(1) {
     $32 = $5;
     $33 = ($32|0)<=(6);
     if (!($33)) {
      break L8;
     }
     $34 = $4;
     $35 = $5;
     $36 = (($34) + ($35))|0;
     $37 = ($36|0)<(256);
     if (!($37)) {
      break L8;
     }
     $38 = $2;
     $39 = $4;
     $40 = $5;
     $41 = (($39) + ($40))|0;
     $42 = (($38) + ($41)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)!=(0);
     L14: do {
      if ($44) {
       $45 = $2;
       $46 = $4;
       $47 = (($45) + ($46)|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = $48 << 24 >> 24;
       $50 = $2;
       $51 = $4;
       $52 = $5;
       $53 = (($51) + ($52))|0;
       $54 = (($50) + ($53)|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = $55 << 24 >> 24;
       $57 = $5;
       $58 = $56 << $57;
       $59 = (($49) + ($58))|0;
       $60 = ($59|0)<=(15);
       $61 = $2;
       $62 = $4;
       if ($60) {
        $63 = $5;
        $64 = (($62) + ($63))|0;
        $65 = (($61) + ($64)|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = $66 << 24 >> 24;
        $68 = $5;
        $69 = $67 << $68;
        $70 = $2;
        $71 = $4;
        $72 = (($70) + ($71)|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = (($74) + ($69))|0;
        $76 = $75&255;
        HEAP8[$72>>0] = $76;
        $77 = $2;
        $78 = $4;
        $79 = $5;
        $80 = (($78) + ($79))|0;
        $81 = (($77) + ($80)|0);
        HEAP8[$81>>0] = 0;
        break;
       }
       $82 = (($61) + ($62)|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = $83 << 24 >> 24;
       $85 = $2;
       $86 = $4;
       $87 = $5;
       $88 = (($86) + ($87))|0;
       $89 = (($85) + ($88)|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = $90 << 24 >> 24;
       $92 = $5;
       $93 = $91 << $92;
       $94 = (($84) - ($93))|0;
       $95 = ($94|0)>=(-15);
       if (!($95)) {
        break L8;
       }
       $96 = $2;
       $97 = $4;
       $98 = $5;
       $99 = (($97) + ($98))|0;
       $100 = (($96) + ($99)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101 << 24 >> 24;
       $103 = $5;
       $104 = $102 << $103;
       $105 = $2;
       $106 = $4;
       $107 = (($105) + ($106)|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = $108 << 24 >> 24;
       $110 = (($109) - ($104))|0;
       $111 = $110&255;
       HEAP8[$107>>0] = $111;
       $112 = $4;
       $113 = $5;
       $114 = (($112) + ($113))|0;
       $6 = $114;
       while(1) {
        $115 = $6;
        $116 = ($115|0)<(256);
        if (!($116)) {
         break L14;
        }
        $117 = $2;
        $118 = $6;
        $119 = (($117) + ($118)|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120<<24>>24)!=(0);
        $122 = $2;
        $123 = $6;
        $124 = (($122) + ($123)|0);
        if (!($121)) {
         break;
        }
        HEAP8[$124>>0] = 0;
        $125 = $6;
        $126 = (($125) + 1)|0;
        $6 = $126;
       }
       HEAP8[$124>>0] = 1;
      }
     } while(0);
     $127 = $5;
     $128 = (($127) + 1)|0;
     $5 = $128;
    }
   }
  } while(0);
  $129 = $4;
  $130 = (($129) + 1)|0;
  $4 = $130;
 }
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_frombytes_negate_vartime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 160|0;
 $6 = sp + 120|0;
 $7 = sp + 80|0;
 $8 = sp + 40|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $4;
 _crypto_sign_ed25519_ref10_fe_frombytes($11,$12);
 $13 = $3;
 $14 = ((($13)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_1($14);
 $15 = $3;
 $16 = ((($15)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sq($5,$16);
 _crypto_sign_ed25519_ref10_fe_mul($6,$5,1160);
 $17 = $3;
 $18 = ((($17)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_sub($5,$5,$18);
 $19 = $3;
 $20 = ((($19)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_add($6,$6,$20);
 _crypto_sign_ed25519_ref10_fe_sq($7,$6);
 _crypto_sign_ed25519_ref10_fe_mul($7,$7,$6);
 $21 = $3;
 _crypto_sign_ed25519_ref10_fe_sq($21,$7);
 $22 = $3;
 $23 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($22,$23,$6);
 $24 = $3;
 $25 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($24,$25,$5);
 $26 = $3;
 $27 = $3;
 _crypto_sign_ed25519_ref10_fe_pow22523($26,$27);
 $28 = $3;
 $29 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($28,$29,$7);
 $30 = $3;
 $31 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($30,$31,$5);
 $32 = $3;
 _crypto_sign_ed25519_ref10_fe_sq($8,$32);
 _crypto_sign_ed25519_ref10_fe_mul($8,$8,$6);
 _crypto_sign_ed25519_ref10_fe_sub($9,$8,$5);
 $33 = (_crypto_sign_ed25519_ref10_fe_isnonzero($9)|0);
 $34 = ($33|0)!=(0);
 do {
  if ($34) {
   _crypto_sign_ed25519_ref10_fe_add($9,$8,$5);
   $35 = (_crypto_sign_ed25519_ref10_fe_isnonzero($9)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    $37 = $3;
    $38 = $3;
    _crypto_sign_ed25519_ref10_fe_mul($37,$38,1200);
    break;
   }
   $2 = -1;
   $54 = $2;
   STACKTOP = sp;return ($54|0);
  }
 } while(0);
 $39 = $3;
 $40 = (_crypto_sign_ed25519_ref10_fe_isnegative($39)|0);
 $41 = $4;
 $42 = ((($41)) + 31|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 >> 7;
 $46 = ($40|0)==($45|0);
 if ($46) {
  $47 = $3;
  $48 = $3;
  _crypto_sign_ed25519_ref10_fe_neg($47,$48);
 }
 $49 = $3;
 $50 = ((($49)) + 120|0);
 $51 = $3;
 $52 = $3;
 $53 = ((($52)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($50,$51,$53);
 $2 = 0;
 $54 = $2;
 STACKTOP = sp;return ($54|0);
}
function _crypto_sign_ed25519_ref10_ge_madd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _crypto_sign_ed25519_ref10_fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _crypto_sign_ed25519_ref10_fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 _crypto_sign_ed25519_ref10_fe_mul($17,$18,$19);
 $20 = $3;
 $21 = ((($20)) + 40|0);
 $22 = $3;
 $23 = ((($22)) + 40|0);
 $24 = $5;
 $25 = ((($24)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($21,$23,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 80|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($27,$29,$31);
 $32 = $4;
 $33 = ((($32)) + 80|0);
 $34 = $4;
 $35 = ((($34)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_add($6,$33,$35);
 $36 = $3;
 $37 = $3;
 $38 = ((($37)) + 80|0);
 $39 = $3;
 $40 = ((($39)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sub($36,$38,$40);
 $41 = $3;
 $42 = ((($41)) + 40|0);
 $43 = $3;
 $44 = ((($43)) + 80|0);
 $45 = $3;
 $46 = ((($45)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_add($42,$44,$46);
 $47 = $3;
 $48 = ((($47)) + 80|0);
 $49 = $3;
 $50 = ((($49)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_add($48,$6,$50);
 $51 = $3;
 $52 = ((($51)) + 120|0);
 $53 = $3;
 $54 = ((($53)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_sub($52,$6,$54);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_msub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _crypto_sign_ed25519_ref10_fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _crypto_sign_ed25519_ref10_fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 $20 = ((($19)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($17,$18,$20);
 $21 = $3;
 $22 = ((($21)) + 40|0);
 $23 = $3;
 $24 = ((($23)) + 40|0);
 $25 = $5;
 _crypto_sign_ed25519_ref10_fe_mul($22,$24,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 80|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($27,$29,$31);
 $32 = $4;
 $33 = ((($32)) + 80|0);
 $34 = $4;
 $35 = ((($34)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_add($6,$33,$35);
 $36 = $3;
 $37 = $3;
 $38 = ((($37)) + 80|0);
 $39 = $3;
 $40 = ((($39)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sub($36,$38,$40);
 $41 = $3;
 $42 = ((($41)) + 40|0);
 $43 = $3;
 $44 = ((($43)) + 80|0);
 $45 = $3;
 $46 = ((($45)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_add($42,$44,$46);
 $47 = $3;
 $48 = ((($47)) + 80|0);
 $49 = $3;
 $50 = ((($49)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_sub($48,$6,$50);
 $51 = $3;
 $52 = ((($51)) + 120|0);
 $53 = $3;
 $54 = ((($53)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_add($52,$6,$54);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p1p1_to_p2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = ((($6)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($4,$5,$7);
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $3;
 $13 = ((($12)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_mul($9,$11,$13);
 $14 = $2;
 $15 = ((($14)) + 80|0);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = ((($18)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($15,$17,$19);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = ((($6)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($4,$5,$7);
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $3;
 $13 = ((($12)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_mul($9,$11,$13);
 $14 = $2;
 $15 = ((($14)) + 80|0);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = ((($18)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($15,$17,$19);
 $20 = $2;
 $21 = ((($20)) + 120|0);
 $22 = $3;
 $23 = $3;
 $24 = ((($23)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($21,$22,$24);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p2_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _crypto_sign_ed25519_ref10_fe_0($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_1($6);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p2_dbl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _crypto_sign_ed25519_ref10_fe_sq($5,$6);
 $7 = $2;
 $8 = ((($7)) + 80|0);
 $9 = $3;
 $10 = ((($9)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sq($8,$10);
 $11 = $2;
 $12 = ((($11)) + 120|0);
 $13 = $3;
 $14 = ((($13)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_sq2($12,$14);
 $15 = $2;
 $16 = ((($15)) + 40|0);
 $17 = $3;
 $18 = $3;
 $19 = ((($18)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_add($16,$17,$19);
 $20 = $2;
 $21 = ((($20)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sq($4,$21);
 $22 = $2;
 $23 = ((($22)) + 40|0);
 $24 = $2;
 $25 = ((($24)) + 80|0);
 $26 = $2;
 _crypto_sign_ed25519_ref10_fe_add($23,$25,$26);
 $27 = $2;
 $28 = ((($27)) + 80|0);
 $29 = $2;
 $30 = ((($29)) + 80|0);
 $31 = $2;
 _crypto_sign_ed25519_ref10_fe_sub($28,$30,$31);
 $32 = $2;
 $33 = $2;
 $34 = ((($33)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sub($32,$4,$34);
 $35 = $2;
 $36 = ((($35)) + 120|0);
 $37 = $2;
 $38 = ((($37)) + 120|0);
 $39 = $2;
 $40 = ((($39)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_sub($36,$38,$40);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p3_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _crypto_sign_ed25519_ref10_fe_0($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_1($6);
 $7 = $1;
 $8 = ((($7)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_0($8);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p3_dbl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 _crypto_sign_ed25519_ref10_ge_p3_to_p2($4,$5);
 $6 = $2;
 _crypto_sign_ed25519_ref10_ge_p2_dbl($6,$4);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p3_to_cached($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ((($5)) + 40|0);
 $7 = $3;
 _crypto_sign_ed25519_ref10_fe_add($4,$6,$7);
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $3;
 _crypto_sign_ed25519_ref10_fe_sub($9,$11,$12);
 $13 = $2;
 $14 = ((($13)) + 80|0);
 $15 = $3;
 $16 = ((($15)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_copy($14,$16);
 $17 = $2;
 $18 = ((($17)) + 120|0);
 $19 = $3;
 $20 = ((($19)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($18,$20,1240);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p3_to_p2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _crypto_sign_ed25519_ref10_fe_copy($4,$5);
 $6 = $2;
 $7 = ((($6)) + 40|0);
 $8 = $3;
 $9 = ((($8)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_copy($7,$9);
 $10 = $2;
 $11 = ((($10)) + 80|0);
 $12 = $3;
 $13 = ((($12)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_copy($11,$13);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_p3_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 80|0;
 $5 = sp + 40|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_invert($4,$8);
 $9 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($5,$9,$4);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($6,$11,$4);
 $12 = $2;
 _crypto_sign_ed25519_ref10_fe_tobytes($12,$6);
 $13 = (_crypto_sign_ed25519_ref10_fe_isnegative($5)|0);
 $14 = $13 << 7;
 $15 = $2;
 $16 = ((($15)) + 31|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 ^ $14;
 $20 = $19&255;
 HEAP8[$16>>0] = $20;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_precomp_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _crypto_sign_ed25519_ref10_fe_1($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_0($6);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_scalarmult_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $4 = sp + 424|0;
 $6 = sp + 248|0;
 $7 = sp + 128|0;
 $8 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $9 = 0;
 while(1) {
  $10 = $9;
  $11 = ($10|0)<(32);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = $9;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 >> 0;
  $18 = $17 & 15;
  $19 = $18&255;
  $20 = $9;
  $21 = $20<<1;
  $22 = (($21) + 0)|0;
  $23 = (($4) + ($22)|0);
  HEAP8[$23>>0] = $19;
  $24 = $3;
  $25 = $9;
  $26 = (($24) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 >> 4;
  $30 = $29 & 15;
  $31 = $30&255;
  $32 = $9;
  $33 = $32<<1;
  $34 = (($33) + 1)|0;
  $35 = (($4) + ($34)|0);
  HEAP8[$35>>0] = $31;
  $36 = $9;
  $37 = (($36) + 1)|0;
  $9 = $37;
 }
 $5 = 0;
 $9 = 0;
 while(1) {
  $38 = $9;
  $39 = ($38|0)<(63);
  $40 = $5;
  $41 = $40 << 24 >> 24;
  if (!($39)) {
   break;
  }
  $42 = $9;
  $43 = (($4) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = (($45) + ($41))|0;
  $47 = $46&255;
  HEAP8[$43>>0] = $47;
  $48 = $9;
  $49 = (($4) + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (($51) + 8)|0;
  $53 = $52&255;
  $5 = $53;
  $54 = $5;
  $55 = $54 << 24 >> 24;
  $56 = $55 >> 4;
  $57 = $56&255;
  $5 = $57;
  $58 = $5;
  $59 = $58 << 24 >> 24;
  $60 = $59 << 4;
  $61 = $9;
  $62 = (($4) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = (($64) - ($60))|0;
  $66 = $65&255;
  HEAP8[$62>>0] = $66;
  $67 = $9;
  $68 = (($67) + 1)|0;
  $9 = $68;
 }
 $69 = ((($4)) + 63|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = (($71) + ($41))|0;
 $73 = $72&255;
 HEAP8[$69>>0] = $73;
 $74 = $2;
 _crypto_sign_ed25519_ref10_ge_p3_0($74);
 $9 = 1;
 while(1) {
  $75 = $9;
  $76 = ($75|0)<(64);
  if (!($76)) {
   break;
  }
  $77 = $9;
  $78 = (($77|0) / 2)&-1;
  $79 = $9;
  $80 = (($4) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  _select_22($8,$78,$81);
  $82 = $2;
  _crypto_sign_ed25519_ref10_ge_madd($6,$82,$8);
  $83 = $2;
  _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($83,$6);
  $84 = $9;
  $85 = (($84) + 2)|0;
  $9 = $85;
 }
 $86 = $2;
 _crypto_sign_ed25519_ref10_ge_p3_dbl($6,$86);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p2($7,$6);
 _crypto_sign_ed25519_ref10_ge_p2_dbl($6,$7);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p2($7,$6);
 _crypto_sign_ed25519_ref10_ge_p2_dbl($6,$7);
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p2($7,$6);
 _crypto_sign_ed25519_ref10_ge_p2_dbl($6,$7);
 $87 = $2;
 _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($87,$6);
 $9 = 0;
 while(1) {
  $88 = $9;
  $89 = ($88|0)<(64);
  if (!($89)) {
   break;
  }
  $90 = $9;
  $91 = (($90|0) / 2)&-1;
  $92 = $9;
  $93 = (($4) + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  _select_22($8,$91,$94);
  $95 = $2;
  _crypto_sign_ed25519_ref10_ge_madd($6,$95,$8);
  $96 = $2;
  _crypto_sign_ed25519_ref10_ge_p1p1_to_p3($96,$6);
  $97 = $9;
  $98 = (($97) + 2)|0;
  $9 = $98;
 }
 STACKTOP = sp;return;
}
function _select_22($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = (_negative($9)|0);
 $7 = $10;
 $11 = $5;
 $12 = $11 << 24 >> 24;
 $13 = $7;
 $14 = $13&255;
 $15 = (0 - ($14))|0;
 $16 = $5;
 $17 = $16 << 24 >> 24;
 $18 = $15 & $17;
 $19 = $18 << 1;
 $20 = (($12) - ($19))|0;
 $21 = $20&255;
 $8 = $21;
 $22 = $3;
 _crypto_sign_ed25519_ref10_ge_precomp_0($22);
 $23 = $3;
 $24 = $4;
 $25 = (1280 + (($24*960)|0)|0);
 $26 = $8;
 $27 = (_equal($26,1)|0);
 _cmov($23,$25,$27);
 $28 = $3;
 $29 = $4;
 $30 = (1280 + (($29*960)|0)|0);
 $31 = ((($30)) + 120|0);
 $32 = $8;
 $33 = (_equal($32,2)|0);
 _cmov($28,$31,$33);
 $34 = $3;
 $35 = $4;
 $36 = (1280 + (($35*960)|0)|0);
 $37 = ((($36)) + 240|0);
 $38 = $8;
 $39 = (_equal($38,3)|0);
 _cmov($34,$37,$39);
 $40 = $3;
 $41 = $4;
 $42 = (1280 + (($41*960)|0)|0);
 $43 = ((($42)) + 360|0);
 $44 = $8;
 $45 = (_equal($44,4)|0);
 _cmov($40,$43,$45);
 $46 = $3;
 $47 = $4;
 $48 = (1280 + (($47*960)|0)|0);
 $49 = ((($48)) + 480|0);
 $50 = $8;
 $51 = (_equal($50,5)|0);
 _cmov($46,$49,$51);
 $52 = $3;
 $53 = $4;
 $54 = (1280 + (($53*960)|0)|0);
 $55 = ((($54)) + 600|0);
 $56 = $8;
 $57 = (_equal($56,6)|0);
 _cmov($52,$55,$57);
 $58 = $3;
 $59 = $4;
 $60 = (1280 + (($59*960)|0)|0);
 $61 = ((($60)) + 720|0);
 $62 = $8;
 $63 = (_equal($62,7)|0);
 _cmov($58,$61,$63);
 $64 = $3;
 $65 = $4;
 $66 = (1280 + (($65*960)|0)|0);
 $67 = ((($66)) + 840|0);
 $68 = $8;
 $69 = (_equal($68,8)|0);
 _cmov($64,$67,$69);
 $70 = $3;
 $71 = ((($70)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_copy($6,$71);
 $72 = ((($6)) + 40|0);
 $73 = $3;
 _crypto_sign_ed25519_ref10_fe_copy($72,$73);
 $74 = ((($6)) + 80|0);
 $75 = $3;
 $76 = ((($75)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_neg($74,$76);
 $77 = $3;
 $78 = $7;
 _cmov($77,$6,$78);
 STACKTOP = sp;return;
}
function _negative($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = $2;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = $2;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (_bitshift64Lshr(($13|0),($16|0),63)|0);
 $18 = tempRet0;
 $19 = $2;
 $20 = $19;
 HEAP32[$20>>2] = $17;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 $23 = $2;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25&255;
 STACKTOP = sp;return ($29|0);
}
function _equal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $3;
 $5 = $9;
 $10 = $4;
 $11 = $10&255;
 $12 = $5;
 $13 = $12&255;
 $14 = $11 ^ $13;
 $15 = $14&255;
 $6 = $15;
 $16 = $6;
 $17 = $16&255;
 $7 = $17;
 $18 = $7;
 $19 = (($18) - 1)|0;
 $7 = $19;
 $20 = $7;
 $21 = $20 >>> 31;
 $7 = $21;
 $22 = $7;
 $23 = $22&255;
 STACKTOP = sp;return ($23|0);
}
function _cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = $8&255;
 _crypto_sign_ed25519_ref10_fe_cmov($6,$7,$9);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $4;
 $13 = ((($12)) + 40|0);
 $14 = $5;
 $15 = $14&255;
 _crypto_sign_ed25519_ref10_fe_cmov($11,$13,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $4;
 $19 = ((($18)) + 80|0);
 $20 = $5;
 $21 = $20&255;
 _crypto_sign_ed25519_ref10_fe_cmov($17,$19,$21);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _crypto_sign_ed25519_ref10_fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _crypto_sign_ed25519_ref10_fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 $20 = ((($19)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($17,$18,$20);
 $21 = $3;
 $22 = ((($21)) + 40|0);
 $23 = $3;
 $24 = ((($23)) + 40|0);
 $25 = $5;
 _crypto_sign_ed25519_ref10_fe_mul($22,$24,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 120|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_mul($27,$29,$31);
 $32 = $3;
 $33 = $4;
 $34 = ((($33)) + 80|0);
 $35 = $5;
 $36 = ((($35)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_mul($32,$34,$36);
 $37 = $3;
 $38 = $3;
 _crypto_sign_ed25519_ref10_fe_add($6,$37,$38);
 $39 = $3;
 $40 = $3;
 $41 = ((($40)) + 80|0);
 $42 = $3;
 $43 = ((($42)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_sub($39,$41,$43);
 $44 = $3;
 $45 = ((($44)) + 40|0);
 $46 = $3;
 $47 = ((($46)) + 80|0);
 $48 = $3;
 $49 = ((($48)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_add($45,$47,$49);
 $50 = $3;
 $51 = ((($50)) + 80|0);
 $52 = $3;
 $53 = ((($52)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_sub($51,$6,$53);
 $54 = $3;
 $55 = ((($54)) + 120|0);
 $56 = $3;
 $57 = ((($56)) + 120|0);
 _crypto_sign_ed25519_ref10_fe_add($55,$6,$57);
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_ge_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 80|0;
 $5 = sp + 40|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 80|0);
 _crypto_sign_ed25519_ref10_fe_invert($4,$8);
 $9 = $3;
 _crypto_sign_ed25519_ref10_fe_mul($5,$9,$4);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 _crypto_sign_ed25519_ref10_fe_mul($6,$11,$4);
 $12 = $2;
 _crypto_sign_ed25519_ref10_fe_tobytes($12,$6);
 $13 = (_crypto_sign_ed25519_ref10_fe_isnegative($5)|0);
 $14 = $13 << 7;
 $15 = $2;
 $16 = ((($15)) + 31|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 ^ $14;
 $20 = $19&255;
 HEAP8[$16>>0] = $20;
 STACKTOP = sp;return;
}
function _crypto_sign_ed25519_ref10_sc_muladd($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0;
 var $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0;
 var $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0;
 var $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0;
 var $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0;
 var $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0;
 var $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0;
 var $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0;
 var $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0;
 var $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0;
 var $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0;
 var $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0;
 var $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0;
 var $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0;
 var $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0;
 var $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0;
 var $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0;
 var $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0;
 var $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0;
 var $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0;
 var $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0;
 var $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0;
 var $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0;
 var $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0;
 var $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0;
 var $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0;
 var $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0;
 var $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0;
 var $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0;
 var $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0;
 var $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0;
 var $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0;
 var $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0;
 var $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0;
 var $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0;
 var $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0;
 var $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0;
 var $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0;
 var $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0;
 var $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0;
 var $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0;
 var $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0;
 var $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0;
 var $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0;
 var $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0;
 var $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0;
 var $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0;
 var $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0;
 var $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0;
 var $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0;
 var $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0;
 var $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0;
 var $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0;
 var $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0;
 var $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0;
 var $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0;
 var $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0;
 var $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0;
 var $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0;
 var $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0;
 var $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0;
 var $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0;
 var $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0;
 var $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0;
 var $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0;
 var $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0;
 var $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0;
 var $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0;
 var $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0;
 var $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0;
 var $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0;
 var $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0;
 var $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0;
 var $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0;
 var $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0;
 var $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0;
 var $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0;
 var $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0;
 var $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0;
 var $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0;
 var $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0;
 var $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0;
 var $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0;
 var $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0;
 var $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0;
 var $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0;
 var $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0;
 var $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0;
 var $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0;
 var $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0;
 var $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0;
 var $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0;
 var $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0;
 var $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0;
 var $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0;
 var $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0;
 var $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0;
 var $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0;
 var $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0;
 var $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0;
 var $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0, $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0;
 var $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0, $4821 = 0, $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0, $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0;
 var $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0, $484 = 0, $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0, $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0;
 var $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0, $4858 = 0, $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0;
 var $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0, $4876 = 0, $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0, $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0;
 var $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0, $4894 = 0, $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0, $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0;
 var $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0, $4911 = 0, $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0, $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0;
 var $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0, $493 = 0, $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0, $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0;
 var $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0, $4948 = 0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0;
 var $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0, $4966 = 0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0;
 var $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0, $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0;
 var $4999 = 0, $5 = 0, $50 = 0, $500 = 0, $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0, $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0;
 var $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0, $5019 = 0, $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0;
 var $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0, $5037 = 0, $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0, $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0;
 var $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0, $5055 = 0, $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0, $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0;
 var $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0, $5073 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0, $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0;
 var $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0, $5091 = 0, $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0, $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0;
 var $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0, $5109 = 0, $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0, $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0;
 var $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0, $5127 = 0, $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0, $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0;
 var $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0, $5145 = 0, $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0, $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0;
 var $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0, $5163 = 0, $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0, $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0;
 var $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0, $5181 = 0, $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0, $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0;
 var $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0, $52 = 0, $520 = 0, $5200 = 0, $5201 = 0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0, $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0;
 var $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0, $5217 = 0, $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0, $5227 = 0, $5228 = 0, $5229 = 0, $523 = 0, $5230 = 0;
 var $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0, $5235 = 0, $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $5244 = 0, $5245 = 0, $5246 = 0, $5247 = 0, $5248 = 0, $5249 = 0;
 var $525 = 0, $5250 = 0, $5251 = 0, $5252 = 0, $5253 = 0, $5254 = 0, $5255 = 0, $5256 = 0, $5257 = 0, $5258 = 0, $5259 = 0, $526 = 0, $5260 = 0, $5261 = 0, $5262 = 0, $5263 = 0, $5264 = 0, $5265 = 0, $5266 = 0, $5267 = 0;
 var $5268 = 0, $5269 = 0, $527 = 0, $5270 = 0, $5271 = 0, $5272 = 0, $5273 = 0, $5274 = 0, $5275 = 0, $5276 = 0, $5277 = 0, $5278 = 0, $5279 = 0, $528 = 0, $5280 = 0, $5281 = 0, $5282 = 0, $5283 = 0, $5284 = 0, $5285 = 0;
 var $5286 = 0, $5287 = 0, $5288 = 0, $5289 = 0, $529 = 0, $5290 = 0, $5291 = 0, $5292 = 0, $5293 = 0, $5294 = 0, $5295 = 0, $5296 = 0, $5297 = 0, $5298 = 0, $5299 = 0, $53 = 0, $530 = 0, $5300 = 0, $5301 = 0, $5302 = 0;
 var $5303 = 0, $5304 = 0, $5305 = 0, $5306 = 0, $5307 = 0, $5308 = 0, $5309 = 0, $531 = 0, $5310 = 0, $5311 = 0, $5312 = 0, $5313 = 0, $5314 = 0, $5315 = 0, $5316 = 0, $5317 = 0, $5318 = 0, $5319 = 0, $532 = 0, $5320 = 0;
 var $5321 = 0, $5322 = 0, $5323 = 0, $5324 = 0, $5325 = 0, $5326 = 0, $5327 = 0, $5328 = 0, $5329 = 0, $533 = 0, $5330 = 0, $5331 = 0, $5332 = 0, $5333 = 0, $5334 = 0, $5335 = 0, $5336 = 0, $5337 = 0, $5338 = 0, $5339 = 0;
 var $534 = 0, $5340 = 0, $5341 = 0, $5342 = 0, $5343 = 0, $5344 = 0, $5345 = 0, $5346 = 0, $5347 = 0, $5348 = 0, $5349 = 0, $535 = 0, $5350 = 0, $5351 = 0, $5352 = 0, $5353 = 0, $5354 = 0, $5355 = 0, $5356 = 0, $5357 = 0;
 var $5358 = 0, $5359 = 0, $536 = 0, $5360 = 0, $5361 = 0, $5362 = 0, $5363 = 0, $5364 = 0, $5365 = 0, $5366 = 0, $5367 = 0, $5368 = 0, $5369 = 0, $537 = 0, $5370 = 0, $5371 = 0, $5372 = 0, $5373 = 0, $5374 = 0, $5375 = 0;
 var $5376 = 0, $5377 = 0, $5378 = 0, $5379 = 0, $538 = 0, $5380 = 0, $5381 = 0, $5382 = 0, $5383 = 0, $5384 = 0, $5385 = 0, $5386 = 0, $5387 = 0, $5388 = 0, $5389 = 0, $539 = 0, $5390 = 0, $5391 = 0, $5392 = 0, $5393 = 0;
 var $5394 = 0, $5395 = 0, $5396 = 0, $5397 = 0, $5398 = 0, $5399 = 0, $54 = 0, $540 = 0, $5400 = 0, $5401 = 0, $5402 = 0, $5403 = 0, $5404 = 0, $5405 = 0, $5406 = 0, $5407 = 0, $5408 = 0, $5409 = 0, $541 = 0, $5410 = 0;
 var $5411 = 0, $5412 = 0, $5413 = 0, $5414 = 0, $5415 = 0, $5416 = 0, $5417 = 0, $5418 = 0, $5419 = 0, $542 = 0, $5420 = 0, $5421 = 0, $5422 = 0, $5423 = 0, $5424 = 0, $5425 = 0, $5426 = 0, $5427 = 0, $5428 = 0, $5429 = 0;
 var $543 = 0, $5430 = 0, $5431 = 0, $5432 = 0, $5433 = 0, $5434 = 0, $5435 = 0, $5436 = 0, $5437 = 0, $5438 = 0, $5439 = 0, $544 = 0, $5440 = 0, $5441 = 0, $5442 = 0, $5443 = 0, $5444 = 0, $5445 = 0, $5446 = 0, $5447 = 0;
 var $5448 = 0, $5449 = 0, $545 = 0, $5450 = 0, $5451 = 0, $5452 = 0, $5453 = 0, $5454 = 0, $5455 = 0, $5456 = 0, $5457 = 0, $5458 = 0, $5459 = 0, $546 = 0, $5460 = 0, $5461 = 0, $5462 = 0, $5463 = 0, $5464 = 0, $5465 = 0;
 var $5466 = 0, $5467 = 0, $5468 = 0, $5469 = 0, $547 = 0, $5470 = 0, $5471 = 0, $5472 = 0, $5473 = 0, $5474 = 0, $5475 = 0, $5476 = 0, $5477 = 0, $5478 = 0, $5479 = 0, $548 = 0, $5480 = 0, $5481 = 0, $5482 = 0, $5483 = 0;
 var $5484 = 0, $5485 = 0, $5486 = 0, $5487 = 0, $5488 = 0, $5489 = 0, $549 = 0, $5490 = 0, $5491 = 0, $5492 = 0, $5493 = 0, $5494 = 0, $5495 = 0, $5496 = 0, $5497 = 0, $5498 = 0, $5499 = 0, $55 = 0, $550 = 0, $5500 = 0;
 var $5501 = 0, $5502 = 0, $5503 = 0, $5504 = 0, $5505 = 0, $5506 = 0, $5507 = 0, $5508 = 0, $5509 = 0, $551 = 0, $5510 = 0, $5511 = 0, $5512 = 0, $5513 = 0, $5514 = 0, $5515 = 0, $5516 = 0, $5517 = 0, $5518 = 0, $5519 = 0;
 var $552 = 0, $5520 = 0, $5521 = 0, $5522 = 0, $5523 = 0, $5524 = 0, $5525 = 0, $5526 = 0, $5527 = 0, $5528 = 0, $5529 = 0, $553 = 0, $5530 = 0, $5531 = 0, $5532 = 0, $5533 = 0, $5534 = 0, $5535 = 0, $5536 = 0, $5537 = 0;
 var $5538 = 0, $5539 = 0, $554 = 0, $5540 = 0, $5541 = 0, $5542 = 0, $5543 = 0, $5544 = 0, $5545 = 0, $5546 = 0, $5547 = 0, $5548 = 0, $5549 = 0, $555 = 0, $5550 = 0, $5551 = 0, $5552 = 0, $5553 = 0, $5554 = 0, $5555 = 0;
 var $5556 = 0, $5557 = 0, $5558 = 0, $5559 = 0, $556 = 0, $5560 = 0, $5561 = 0, $5562 = 0, $5563 = 0, $5564 = 0, $5565 = 0, $5566 = 0, $5567 = 0, $5568 = 0, $5569 = 0, $557 = 0, $5570 = 0, $5571 = 0, $5572 = 0, $5573 = 0;
 var $5574 = 0, $5575 = 0, $5576 = 0, $5577 = 0, $5578 = 0, $5579 = 0, $558 = 0, $5580 = 0, $5581 = 0, $5582 = 0, $5583 = 0, $5584 = 0, $5585 = 0, $5586 = 0, $5587 = 0, $5588 = 0, $5589 = 0, $559 = 0, $5590 = 0, $5591 = 0;
 var $5592 = 0, $5593 = 0, $5594 = 0, $5595 = 0, $5596 = 0, $5597 = 0, $5598 = 0, $5599 = 0, $56 = 0, $560 = 0, $5600 = 0, $5601 = 0, $5602 = 0, $5603 = 0, $5604 = 0, $5605 = 0, $5606 = 0, $5607 = 0, $5608 = 0, $5609 = 0;
 var $561 = 0, $5610 = 0, $5611 = 0, $5612 = 0, $5613 = 0, $5614 = 0, $5615 = 0, $5616 = 0, $5617 = 0, $5618 = 0, $5619 = 0, $562 = 0, $5620 = 0, $5621 = 0, $5622 = 0, $5623 = 0, $5624 = 0, $5625 = 0, $5626 = 0, $5627 = 0;
 var $5628 = 0, $5629 = 0, $563 = 0, $5630 = 0, $5631 = 0, $5632 = 0, $5633 = 0, $5634 = 0, $5635 = 0, $5636 = 0, $5637 = 0, $5638 = 0, $5639 = 0, $564 = 0, $5640 = 0, $5641 = 0, $5642 = 0, $5643 = 0, $5644 = 0, $5645 = 0;
 var $5646 = 0, $5647 = 0, $5648 = 0, $5649 = 0, $565 = 0, $5650 = 0, $5651 = 0, $5652 = 0, $5653 = 0, $5654 = 0, $5655 = 0, $5656 = 0, $5657 = 0, $5658 = 0, $5659 = 0, $566 = 0, $5660 = 0, $5661 = 0, $5662 = 0, $5663 = 0;
 var $5664 = 0, $5665 = 0, $5666 = 0, $5667 = 0, $5668 = 0, $5669 = 0, $567 = 0, $5670 = 0, $5671 = 0, $5672 = 0, $5673 = 0, $5674 = 0, $5675 = 0, $5676 = 0, $5677 = 0, $5678 = 0, $5679 = 0, $568 = 0, $5680 = 0, $5681 = 0;
 var $5682 = 0, $5683 = 0, $5684 = 0, $5685 = 0, $5686 = 0, $5687 = 0, $5688 = 0, $5689 = 0, $569 = 0, $5690 = 0, $5691 = 0, $5692 = 0, $5693 = 0, $5694 = 0, $5695 = 0, $5696 = 0, $5697 = 0, $5698 = 0, $5699 = 0, $57 = 0;
 var $570 = 0, $5700 = 0, $5701 = 0, $5702 = 0, $5703 = 0, $5704 = 0, $5705 = 0, $5706 = 0, $5707 = 0, $5708 = 0, $5709 = 0, $571 = 0, $5710 = 0, $5711 = 0, $5712 = 0, $5713 = 0, $5714 = 0, $5715 = 0, $5716 = 0, $5717 = 0;
 var $5718 = 0, $5719 = 0, $572 = 0, $5720 = 0, $5721 = 0, $5722 = 0, $5723 = 0, $5724 = 0, $5725 = 0, $5726 = 0, $5727 = 0, $5728 = 0, $5729 = 0, $573 = 0, $5730 = 0, $5731 = 0, $5732 = 0, $5733 = 0, $5734 = 0, $5735 = 0;
 var $5736 = 0, $5737 = 0, $5738 = 0, $5739 = 0, $574 = 0, $5740 = 0, $5741 = 0, $5742 = 0, $5743 = 0, $5744 = 0, $5745 = 0, $5746 = 0, $5747 = 0, $5748 = 0, $5749 = 0, $575 = 0, $5750 = 0, $5751 = 0, $5752 = 0, $5753 = 0;
 var $5754 = 0, $5755 = 0, $5756 = 0, $5757 = 0, $5758 = 0, $5759 = 0, $576 = 0, $5760 = 0, $5761 = 0, $5762 = 0, $5763 = 0, $5764 = 0, $5765 = 0, $5766 = 0, $5767 = 0, $5768 = 0, $5769 = 0, $577 = 0, $5770 = 0, $5771 = 0;
 var $5772 = 0, $5773 = 0, $5774 = 0, $5775 = 0, $5776 = 0, $5777 = 0, $5778 = 0, $5779 = 0, $578 = 0, $5780 = 0, $5781 = 0, $5782 = 0, $5783 = 0, $5784 = 0, $5785 = 0, $5786 = 0, $5787 = 0, $5788 = 0, $5789 = 0, $579 = 0;
 var $5790 = 0, $5791 = 0, $5792 = 0, $5793 = 0, $5794 = 0, $5795 = 0, $5796 = 0, $5797 = 0, $5798 = 0, $5799 = 0, $58 = 0, $580 = 0, $5800 = 0, $5801 = 0, $5802 = 0, $5803 = 0, $5804 = 0, $5805 = 0, $5806 = 0, $5807 = 0;
 var $5808 = 0, $5809 = 0, $581 = 0, $5810 = 0, $5811 = 0, $5812 = 0, $5813 = 0, $5814 = 0, $5815 = 0, $5816 = 0, $5817 = 0, $5818 = 0, $5819 = 0, $582 = 0, $5820 = 0, $5821 = 0, $5822 = 0, $5823 = 0, $5824 = 0, $5825 = 0;
 var $5826 = 0, $5827 = 0, $5828 = 0, $5829 = 0, $583 = 0, $5830 = 0, $5831 = 0, $5832 = 0, $5833 = 0, $5834 = 0, $5835 = 0, $5836 = 0, $5837 = 0, $5838 = 0, $5839 = 0, $584 = 0, $5840 = 0, $5841 = 0, $5842 = 0, $5843 = 0;
 var $5844 = 0, $5845 = 0, $5846 = 0, $5847 = 0, $5848 = 0, $5849 = 0, $585 = 0, $5850 = 0, $5851 = 0, $5852 = 0, $5853 = 0, $5854 = 0, $5855 = 0, $5856 = 0, $5857 = 0, $5858 = 0, $5859 = 0, $586 = 0, $5860 = 0, $5861 = 0;
 var $5862 = 0, $5863 = 0, $5864 = 0, $5865 = 0, $5866 = 0, $5867 = 0, $5868 = 0, $5869 = 0, $587 = 0, $5870 = 0, $5871 = 0, $5872 = 0, $5873 = 0, $5874 = 0, $5875 = 0, $5876 = 0, $5877 = 0, $5878 = 0, $5879 = 0, $588 = 0;
 var $5880 = 0, $5881 = 0, $5882 = 0, $5883 = 0, $5884 = 0, $5885 = 0, $5886 = 0, $5887 = 0, $5888 = 0, $5889 = 0, $589 = 0, $5890 = 0, $5891 = 0, $5892 = 0, $5893 = 0, $5894 = 0, $5895 = 0, $5896 = 0, $5897 = 0, $5898 = 0;
 var $5899 = 0, $59 = 0, $590 = 0, $5900 = 0, $5901 = 0, $5902 = 0, $5903 = 0, $5904 = 0, $5905 = 0, $5906 = 0, $5907 = 0, $5908 = 0, $5909 = 0, $591 = 0, $5910 = 0, $5911 = 0, $5912 = 0, $5913 = 0, $5914 = 0, $5915 = 0;
 var $5916 = 0, $5917 = 0, $5918 = 0, $5919 = 0, $592 = 0, $5920 = 0, $5921 = 0, $5922 = 0, $5923 = 0, $5924 = 0, $5925 = 0, $5926 = 0, $5927 = 0, $5928 = 0, $5929 = 0, $593 = 0, $5930 = 0, $5931 = 0, $5932 = 0, $5933 = 0;
 var $5934 = 0, $5935 = 0, $5936 = 0, $5937 = 0, $5938 = 0, $5939 = 0, $594 = 0, $5940 = 0, $5941 = 0, $5942 = 0, $5943 = 0, $5944 = 0, $5945 = 0, $5946 = 0, $5947 = 0, $5948 = 0, $5949 = 0, $595 = 0, $5950 = 0, $5951 = 0;
 var $5952 = 0, $5953 = 0, $5954 = 0, $5955 = 0, $5956 = 0, $5957 = 0, $5958 = 0, $5959 = 0, $596 = 0, $5960 = 0, $5961 = 0, $5962 = 0, $5963 = 0, $5964 = 0, $5965 = 0, $5966 = 0, $5967 = 0, $5968 = 0, $5969 = 0, $597 = 0;
 var $5970 = 0, $5971 = 0, $5972 = 0, $5973 = 0, $5974 = 0, $5975 = 0, $5976 = 0, $5977 = 0, $5978 = 0, $5979 = 0, $598 = 0, $5980 = 0, $5981 = 0, $5982 = 0, $5983 = 0, $5984 = 0, $5985 = 0, $5986 = 0, $5987 = 0, $5988 = 0;
 var $5989 = 0, $599 = 0, $5990 = 0, $5991 = 0, $5992 = 0, $5993 = 0, $5994 = 0, $5995 = 0, $5996 = 0, $5997 = 0, $5998 = 0, $5999 = 0, $6 = 0, $60 = 0, $600 = 0, $6000 = 0, $6001 = 0, $6002 = 0, $6003 = 0, $6004 = 0;
 var $6005 = 0, $6006 = 0, $6007 = 0, $6008 = 0, $6009 = 0, $601 = 0, $6010 = 0, $6011 = 0, $6012 = 0, $6013 = 0, $6014 = 0, $6015 = 0, $6016 = 0, $6017 = 0, $6018 = 0, $6019 = 0, $602 = 0, $6020 = 0, $6021 = 0, $6022 = 0;
 var $6023 = 0, $6024 = 0, $6025 = 0, $6026 = 0, $6027 = 0, $6028 = 0, $6029 = 0, $603 = 0, $6030 = 0, $6031 = 0, $6032 = 0, $6033 = 0, $6034 = 0, $6035 = 0, $6036 = 0, $6037 = 0, $6038 = 0, $6039 = 0, $604 = 0, $6040 = 0;
 var $6041 = 0, $6042 = 0, $6043 = 0, $6044 = 0, $6045 = 0, $6046 = 0, $6047 = 0, $6048 = 0, $6049 = 0, $605 = 0, $6050 = 0, $6051 = 0, $6052 = 0, $6053 = 0, $6054 = 0, $6055 = 0, $6056 = 0, $6057 = 0, $6058 = 0, $6059 = 0;
 var $606 = 0, $6060 = 0, $6061 = 0, $6062 = 0, $6063 = 0, $6064 = 0, $6065 = 0, $6066 = 0, $6067 = 0, $6068 = 0, $6069 = 0, $607 = 0, $6070 = 0, $6071 = 0, $6072 = 0, $6073 = 0, $6074 = 0, $6075 = 0, $6076 = 0, $6077 = 0;
 var $6078 = 0, $6079 = 0, $608 = 0, $6080 = 0, $6081 = 0, $6082 = 0, $6083 = 0, $6084 = 0, $6085 = 0, $6086 = 0, $6087 = 0, $6088 = 0, $6089 = 0, $609 = 0, $6090 = 0, $6091 = 0, $6092 = 0, $6093 = 0, $6094 = 0, $6095 = 0;
 var $6096 = 0, $6097 = 0, $6098 = 0, $6099 = 0, $61 = 0, $610 = 0, $6100 = 0, $6101 = 0, $6102 = 0, $6103 = 0, $6104 = 0, $6105 = 0, $6106 = 0, $6107 = 0, $6108 = 0, $6109 = 0, $611 = 0, $6110 = 0, $6111 = 0, $6112 = 0;
 var $6113 = 0, $6114 = 0, $6115 = 0, $6116 = 0, $6117 = 0, $6118 = 0, $6119 = 0, $612 = 0, $6120 = 0, $6121 = 0, $6122 = 0, $6123 = 0, $6124 = 0, $6125 = 0, $6126 = 0, $6127 = 0, $6128 = 0, $6129 = 0, $613 = 0, $6130 = 0;
 var $6131 = 0, $6132 = 0, $6133 = 0, $6134 = 0, $6135 = 0, $6136 = 0, $6137 = 0, $6138 = 0, $6139 = 0, $614 = 0, $6140 = 0, $6141 = 0, $6142 = 0, $6143 = 0, $6144 = 0, $6145 = 0, $6146 = 0, $6147 = 0, $6148 = 0, $6149 = 0;
 var $615 = 0, $6150 = 0, $6151 = 0, $6152 = 0, $6153 = 0, $6154 = 0, $6155 = 0, $6156 = 0, $6157 = 0, $6158 = 0, $6159 = 0, $616 = 0, $6160 = 0, $6161 = 0, $6162 = 0, $6163 = 0, $6164 = 0, $6165 = 0, $6166 = 0, $6167 = 0;
 var $6168 = 0, $6169 = 0, $617 = 0, $6170 = 0, $6171 = 0, $6172 = 0, $6173 = 0, $6174 = 0, $6175 = 0, $6176 = 0, $6177 = 0, $6178 = 0, $6179 = 0, $618 = 0, $6180 = 0, $6181 = 0, $6182 = 0, $6183 = 0, $6184 = 0, $6185 = 0;
 var $6186 = 0, $6187 = 0, $6188 = 0, $6189 = 0, $619 = 0, $6190 = 0, $6191 = 0, $6192 = 0, $6193 = 0, $6194 = 0, $6195 = 0, $6196 = 0, $6197 = 0, $6198 = 0, $6199 = 0, $62 = 0, $620 = 0, $6200 = 0, $6201 = 0, $6202 = 0;
 var $6203 = 0, $6204 = 0, $6205 = 0, $6206 = 0, $6207 = 0, $6208 = 0, $6209 = 0, $621 = 0, $6210 = 0, $6211 = 0, $6212 = 0, $6213 = 0, $6214 = 0, $6215 = 0, $6216 = 0, $6217 = 0, $6218 = 0, $6219 = 0, $622 = 0, $6220 = 0;
 var $6221 = 0, $6222 = 0, $6223 = 0, $6224 = 0, $6225 = 0, $6226 = 0, $6227 = 0, $6228 = 0, $6229 = 0, $623 = 0, $6230 = 0, $6231 = 0, $6232 = 0, $6233 = 0, $6234 = 0, $6235 = 0, $6236 = 0, $6237 = 0, $6238 = 0, $6239 = 0;
 var $624 = 0, $6240 = 0, $6241 = 0, $6242 = 0, $6243 = 0, $6244 = 0, $6245 = 0, $6246 = 0, $6247 = 0, $6248 = 0, $6249 = 0, $625 = 0, $6250 = 0, $6251 = 0, $6252 = 0, $6253 = 0, $6254 = 0, $6255 = 0, $6256 = 0, $6257 = 0;
 var $6258 = 0, $6259 = 0, $626 = 0, $6260 = 0, $6261 = 0, $6262 = 0, $6263 = 0, $6264 = 0, $6265 = 0, $6266 = 0, $6267 = 0, $6268 = 0, $6269 = 0, $627 = 0, $6270 = 0, $6271 = 0, $6272 = 0, $6273 = 0, $6274 = 0, $6275 = 0;
 var $6276 = 0, $6277 = 0, $6278 = 0, $6279 = 0, $628 = 0, $6280 = 0, $6281 = 0, $6282 = 0, $6283 = 0, $6284 = 0, $6285 = 0, $6286 = 0, $6287 = 0, $6288 = 0, $6289 = 0, $629 = 0, $6290 = 0, $6291 = 0, $6292 = 0, $6293 = 0;
 var $6294 = 0, $6295 = 0, $6296 = 0, $6297 = 0, $6298 = 0, $6299 = 0, $63 = 0, $630 = 0, $6300 = 0, $6301 = 0, $6302 = 0, $6303 = 0, $6304 = 0, $6305 = 0, $6306 = 0, $6307 = 0, $6308 = 0, $6309 = 0, $631 = 0, $6310 = 0;
 var $6311 = 0, $6312 = 0, $6313 = 0, $6314 = 0, $6315 = 0, $6316 = 0, $6317 = 0, $6318 = 0, $6319 = 0, $632 = 0, $6320 = 0, $6321 = 0, $6322 = 0, $6323 = 0, $6324 = 0, $6325 = 0, $6326 = 0, $6327 = 0, $6328 = 0, $6329 = 0;
 var $633 = 0, $6330 = 0, $6331 = 0, $6332 = 0, $6333 = 0, $6334 = 0, $6335 = 0, $6336 = 0, $6337 = 0, $6338 = 0, $6339 = 0, $634 = 0, $6340 = 0, $6341 = 0, $6342 = 0, $6343 = 0, $6344 = 0, $6345 = 0, $6346 = 0, $6347 = 0;
 var $6348 = 0, $6349 = 0, $635 = 0, $6350 = 0, $6351 = 0, $6352 = 0, $6353 = 0, $6354 = 0, $6355 = 0, $6356 = 0, $6357 = 0, $6358 = 0, $6359 = 0, $636 = 0, $6360 = 0, $6361 = 0, $6362 = 0, $6363 = 0, $6364 = 0, $6365 = 0;
 var $6366 = 0, $6367 = 0, $6368 = 0, $6369 = 0, $637 = 0, $6370 = 0, $6371 = 0, $6372 = 0, $6373 = 0, $6374 = 0, $6375 = 0, $6376 = 0, $6377 = 0, $6378 = 0, $6379 = 0, $638 = 0, $6380 = 0, $6381 = 0, $6382 = 0, $6383 = 0;
 var $6384 = 0, $6385 = 0, $6386 = 0, $6387 = 0, $6388 = 0, $6389 = 0, $639 = 0, $6390 = 0, $6391 = 0, $6392 = 0, $6393 = 0, $6394 = 0, $6395 = 0, $6396 = 0, $6397 = 0, $6398 = 0, $6399 = 0, $64 = 0, $640 = 0, $6400 = 0;
 var $6401 = 0, $6402 = 0, $6403 = 0, $6404 = 0, $6405 = 0, $6406 = 0, $6407 = 0, $6408 = 0, $6409 = 0, $641 = 0, $6410 = 0, $6411 = 0, $6412 = 0, $6413 = 0, $6414 = 0, $6415 = 0, $6416 = 0, $6417 = 0, $6418 = 0, $6419 = 0;
 var $642 = 0, $6420 = 0, $6421 = 0, $6422 = 0, $6423 = 0, $6424 = 0, $6425 = 0, $6426 = 0, $6427 = 0, $6428 = 0, $6429 = 0, $643 = 0, $6430 = 0, $6431 = 0, $6432 = 0, $6433 = 0, $6434 = 0, $6435 = 0, $6436 = 0, $6437 = 0;
 var $6438 = 0, $6439 = 0, $644 = 0, $6440 = 0, $6441 = 0, $6442 = 0, $6443 = 0, $6444 = 0, $6445 = 0, $6446 = 0, $6447 = 0, $6448 = 0, $6449 = 0, $645 = 0, $6450 = 0, $6451 = 0, $6452 = 0, $6453 = 0, $6454 = 0, $6455 = 0;
 var $6456 = 0, $6457 = 0, $6458 = 0, $6459 = 0, $646 = 0, $6460 = 0, $6461 = 0, $6462 = 0, $6463 = 0, $6464 = 0, $6465 = 0, $6466 = 0, $6467 = 0, $6468 = 0, $6469 = 0, $647 = 0, $6470 = 0, $6471 = 0, $6472 = 0, $6473 = 0;
 var $6474 = 0, $6475 = 0, $6476 = 0, $6477 = 0, $6478 = 0, $6479 = 0, $648 = 0, $6480 = 0, $6481 = 0, $6482 = 0, $6483 = 0, $6484 = 0, $6485 = 0, $6486 = 0, $6487 = 0, $6488 = 0, $6489 = 0, $649 = 0, $6490 = 0, $6491 = 0;
 var $6492 = 0, $6493 = 0, $6494 = 0, $6495 = 0, $6496 = 0, $6497 = 0, $6498 = 0, $6499 = 0, $65 = 0, $650 = 0, $6500 = 0, $6501 = 0, $6502 = 0, $6503 = 0, $6504 = 0, $6505 = 0, $6506 = 0, $6507 = 0, $6508 = 0, $6509 = 0;
 var $651 = 0, $6510 = 0, $6511 = 0, $6512 = 0, $6513 = 0, $6514 = 0, $6515 = 0, $6516 = 0, $6517 = 0, $6518 = 0, $6519 = 0, $652 = 0, $6520 = 0, $6521 = 0, $6522 = 0, $6523 = 0, $6524 = 0, $6525 = 0, $6526 = 0, $6527 = 0;
 var $6528 = 0, $6529 = 0, $653 = 0, $6530 = 0, $6531 = 0, $6532 = 0, $6533 = 0, $6534 = 0, $6535 = 0, $6536 = 0, $6537 = 0, $6538 = 0, $6539 = 0, $654 = 0, $6540 = 0, $6541 = 0, $6542 = 0, $6543 = 0, $6544 = 0, $6545 = 0;
 var $6546 = 0, $6547 = 0, $6548 = 0, $6549 = 0, $655 = 0, $6550 = 0, $6551 = 0, $6552 = 0, $6553 = 0, $6554 = 0, $6555 = 0, $6556 = 0, $6557 = 0, $6558 = 0, $6559 = 0, $656 = 0, $6560 = 0, $6561 = 0, $6562 = 0, $6563 = 0;
 var $6564 = 0, $6565 = 0, $6566 = 0, $6567 = 0, $6568 = 0, $6569 = 0, $657 = 0, $6570 = 0, $6571 = 0, $6572 = 0, $6573 = 0, $6574 = 0, $6575 = 0, $6576 = 0, $6577 = 0, $6578 = 0, $6579 = 0, $658 = 0, $6580 = 0, $6581 = 0;
 var $6582 = 0, $6583 = 0, $6584 = 0, $6585 = 0, $6586 = 0, $6587 = 0, $6588 = 0, $6589 = 0, $659 = 0, $6590 = 0, $6591 = 0, $6592 = 0, $6593 = 0, $6594 = 0, $6595 = 0, $6596 = 0, $6597 = 0, $6598 = 0, $6599 = 0, $66 = 0;
 var $660 = 0, $6600 = 0, $6601 = 0, $6602 = 0, $6603 = 0, $6604 = 0, $6605 = 0, $6606 = 0, $6607 = 0, $6608 = 0, $6609 = 0, $661 = 0, $6610 = 0, $6611 = 0, $6612 = 0, $6613 = 0, $6614 = 0, $6615 = 0, $6616 = 0, $6617 = 0;
 var $6618 = 0, $6619 = 0, $662 = 0, $6620 = 0, $6621 = 0, $6622 = 0, $6623 = 0, $6624 = 0, $6625 = 0, $6626 = 0, $6627 = 0, $6628 = 0, $6629 = 0, $663 = 0, $6630 = 0, $6631 = 0, $6632 = 0, $6633 = 0, $6634 = 0, $6635 = 0;
 var $6636 = 0, $6637 = 0, $6638 = 0, $6639 = 0, $664 = 0, $6640 = 0, $6641 = 0, $6642 = 0, $6643 = 0, $6644 = 0, $6645 = 0, $6646 = 0, $6647 = 0, $6648 = 0, $6649 = 0, $665 = 0, $6650 = 0, $6651 = 0, $6652 = 0, $6653 = 0;
 var $6654 = 0, $6655 = 0, $6656 = 0, $6657 = 0, $6658 = 0, $6659 = 0, $666 = 0, $6660 = 0, $6661 = 0, $6662 = 0, $6663 = 0, $6664 = 0, $6665 = 0, $6666 = 0, $6667 = 0, $6668 = 0, $6669 = 0, $667 = 0, $6670 = 0, $6671 = 0;
 var $6672 = 0, $6673 = 0, $6674 = 0, $6675 = 0, $6676 = 0, $6677 = 0, $6678 = 0, $6679 = 0, $668 = 0, $6680 = 0, $6681 = 0, $6682 = 0, $6683 = 0, $6684 = 0, $6685 = 0, $6686 = 0, $6687 = 0, $6688 = 0, $6689 = 0, $669 = 0;
 var $6690 = 0, $6691 = 0, $6692 = 0, $6693 = 0, $6694 = 0, $6695 = 0, $6696 = 0, $6697 = 0, $6698 = 0, $6699 = 0, $67 = 0, $670 = 0, $6700 = 0, $6701 = 0, $6702 = 0, $6703 = 0, $6704 = 0, $6705 = 0, $6706 = 0, $6707 = 0;
 var $6708 = 0, $6709 = 0, $671 = 0, $6710 = 0, $6711 = 0, $6712 = 0, $6713 = 0, $6714 = 0, $6715 = 0, $6716 = 0, $6717 = 0, $6718 = 0, $6719 = 0, $672 = 0, $6720 = 0, $6721 = 0, $6722 = 0, $6723 = 0, $6724 = 0, $6725 = 0;
 var $6726 = 0, $6727 = 0, $6728 = 0, $6729 = 0, $673 = 0, $6730 = 0, $6731 = 0, $6732 = 0, $6733 = 0, $6734 = 0, $6735 = 0, $6736 = 0, $6737 = 0, $6738 = 0, $6739 = 0, $674 = 0, $6740 = 0, $6741 = 0, $6742 = 0, $6743 = 0;
 var $6744 = 0, $6745 = 0, $6746 = 0, $6747 = 0, $6748 = 0, $6749 = 0, $675 = 0, $6750 = 0, $6751 = 0, $6752 = 0, $6753 = 0, $6754 = 0, $6755 = 0, $6756 = 0, $6757 = 0, $6758 = 0, $6759 = 0, $676 = 0, $6760 = 0, $6761 = 0;
 var $6762 = 0, $6763 = 0, $6764 = 0, $6765 = 0, $6766 = 0, $6767 = 0, $6768 = 0, $6769 = 0, $677 = 0, $6770 = 0, $6771 = 0, $6772 = 0, $6773 = 0, $6774 = 0, $6775 = 0, $6776 = 0, $6777 = 0, $6778 = 0, $6779 = 0, $678 = 0;
 var $6780 = 0, $6781 = 0, $6782 = 0, $6783 = 0, $6784 = 0, $6785 = 0, $6786 = 0, $6787 = 0, $6788 = 0, $6789 = 0, $679 = 0, $6790 = 0, $6791 = 0, $6792 = 0, $6793 = 0, $6794 = 0, $6795 = 0, $6796 = 0, $6797 = 0, $6798 = 0;
 var $6799 = 0, $68 = 0, $680 = 0, $6800 = 0, $6801 = 0, $6802 = 0, $6803 = 0, $6804 = 0, $6805 = 0, $6806 = 0, $6807 = 0, $6808 = 0, $6809 = 0, $681 = 0, $6810 = 0, $6811 = 0, $6812 = 0, $6813 = 0, $6814 = 0, $6815 = 0;
 var $6816 = 0, $6817 = 0, $6818 = 0, $6819 = 0, $682 = 0, $6820 = 0, $6821 = 0, $6822 = 0, $6823 = 0, $6824 = 0, $6825 = 0, $6826 = 0, $6827 = 0, $6828 = 0, $6829 = 0, $683 = 0, $6830 = 0, $6831 = 0, $6832 = 0, $6833 = 0;
 var $6834 = 0, $6835 = 0, $6836 = 0, $6837 = 0, $6838 = 0, $6839 = 0, $684 = 0, $6840 = 0, $6841 = 0, $6842 = 0, $6843 = 0, $6844 = 0, $6845 = 0, $6846 = 0, $6847 = 0, $6848 = 0, $6849 = 0, $685 = 0, $6850 = 0, $6851 = 0;
 var $6852 = 0, $6853 = 0, $6854 = 0, $6855 = 0, $6856 = 0, $6857 = 0, $6858 = 0, $6859 = 0, $686 = 0, $6860 = 0, $6861 = 0, $6862 = 0, $6863 = 0, $6864 = 0, $6865 = 0, $6866 = 0, $6867 = 0, $6868 = 0, $6869 = 0, $687 = 0;
 var $6870 = 0, $6871 = 0, $6872 = 0, $6873 = 0, $6874 = 0, $6875 = 0, $6876 = 0, $6877 = 0, $6878 = 0, $6879 = 0, $688 = 0, $6880 = 0, $6881 = 0, $6882 = 0, $6883 = 0, $6884 = 0, $6885 = 0, $6886 = 0, $6887 = 0, $6888 = 0;
 var $6889 = 0, $689 = 0, $6890 = 0, $6891 = 0, $6892 = 0, $6893 = 0, $6894 = 0, $6895 = 0, $6896 = 0, $6897 = 0, $6898 = 0, $6899 = 0, $69 = 0, $690 = 0, $6900 = 0, $6901 = 0, $6902 = 0, $6903 = 0, $6904 = 0, $6905 = 0;
 var $6906 = 0, $6907 = 0, $6908 = 0, $6909 = 0, $691 = 0, $6910 = 0, $6911 = 0, $6912 = 0, $6913 = 0, $6914 = 0, $6915 = 0, $6916 = 0, $6917 = 0, $6918 = 0, $6919 = 0, $692 = 0, $6920 = 0, $6921 = 0, $6922 = 0, $6923 = 0;
 var $6924 = 0, $6925 = 0, $6926 = 0, $6927 = 0, $6928 = 0, $6929 = 0, $693 = 0, $6930 = 0, $6931 = 0, $6932 = 0, $6933 = 0, $6934 = 0, $6935 = 0, $6936 = 0, $6937 = 0, $6938 = 0, $6939 = 0, $694 = 0, $6940 = 0, $6941 = 0;
 var $6942 = 0, $6943 = 0, $6944 = 0, $6945 = 0, $6946 = 0, $6947 = 0, $6948 = 0, $6949 = 0, $695 = 0, $6950 = 0, $6951 = 0, $6952 = 0, $6953 = 0, $6954 = 0, $6955 = 0, $6956 = 0, $6957 = 0, $6958 = 0, $6959 = 0, $696 = 0;
 var $6960 = 0, $6961 = 0, $6962 = 0, $6963 = 0, $6964 = 0, $6965 = 0, $6966 = 0, $6967 = 0, $6968 = 0, $6969 = 0, $697 = 0, $6970 = 0, $6971 = 0, $6972 = 0, $6973 = 0, $6974 = 0, $6975 = 0, $6976 = 0, $6977 = 0, $6978 = 0;
 var $6979 = 0, $698 = 0, $6980 = 0, $6981 = 0, $6982 = 0, $6983 = 0, $6984 = 0, $6985 = 0, $6986 = 0, $6987 = 0, $6988 = 0, $6989 = 0, $699 = 0, $6990 = 0, $6991 = 0, $6992 = 0, $6993 = 0, $6994 = 0, $6995 = 0, $6996 = 0;
 var $6997 = 0, $6998 = 0, $6999 = 0, $7 = 0, $70 = 0, $700 = 0, $7000 = 0, $7001 = 0, $7002 = 0, $7003 = 0, $7004 = 0, $7005 = 0, $7006 = 0, $7007 = 0, $7008 = 0, $7009 = 0, $701 = 0, $7010 = 0, $7011 = 0, $7012 = 0;
 var $7013 = 0, $7014 = 0, $7015 = 0, $7016 = 0, $7017 = 0, $7018 = 0, $7019 = 0, $702 = 0, $7020 = 0, $7021 = 0, $7022 = 0, $7023 = 0, $7024 = 0, $7025 = 0, $7026 = 0, $7027 = 0, $7028 = 0, $7029 = 0, $703 = 0, $7030 = 0;
 var $7031 = 0, $7032 = 0, $7033 = 0, $7034 = 0, $7035 = 0, $7036 = 0, $7037 = 0, $7038 = 0, $7039 = 0, $704 = 0, $7040 = 0, $7041 = 0, $7042 = 0, $7043 = 0, $7044 = 0, $7045 = 0, $7046 = 0, $7047 = 0, $7048 = 0, $7049 = 0;
 var $705 = 0, $7050 = 0, $7051 = 0, $7052 = 0, $7053 = 0, $7054 = 0, $7055 = 0, $7056 = 0, $7057 = 0, $7058 = 0, $7059 = 0, $706 = 0, $7060 = 0, $7061 = 0, $7062 = 0, $7063 = 0, $7064 = 0, $7065 = 0, $7066 = 0, $7067 = 0;
 var $7068 = 0, $7069 = 0, $707 = 0, $7070 = 0, $7071 = 0, $7072 = 0, $7073 = 0, $7074 = 0, $7075 = 0, $7076 = 0, $7077 = 0, $7078 = 0, $7079 = 0, $708 = 0, $7080 = 0, $7081 = 0, $7082 = 0, $7083 = 0, $7084 = 0, $7085 = 0;
 var $7086 = 0, $7087 = 0, $7088 = 0, $7089 = 0, $709 = 0, $7090 = 0, $7091 = 0, $7092 = 0, $7093 = 0, $7094 = 0, $7095 = 0, $7096 = 0, $7097 = 0, $7098 = 0, $7099 = 0, $71 = 0, $710 = 0, $7100 = 0, $7101 = 0, $7102 = 0;
 var $7103 = 0, $7104 = 0, $7105 = 0, $7106 = 0, $7107 = 0, $7108 = 0, $7109 = 0, $711 = 0, $7110 = 0, $7111 = 0, $7112 = 0, $7113 = 0, $7114 = 0, $7115 = 0, $7116 = 0, $7117 = 0, $7118 = 0, $7119 = 0, $712 = 0, $7120 = 0;
 var $7121 = 0, $7122 = 0, $7123 = 0, $7124 = 0, $7125 = 0, $7126 = 0, $7127 = 0, $7128 = 0, $7129 = 0, $713 = 0, $7130 = 0, $7131 = 0, $7132 = 0, $7133 = 0, $7134 = 0, $7135 = 0, $7136 = 0, $7137 = 0, $7138 = 0, $7139 = 0;
 var $714 = 0, $7140 = 0, $7141 = 0, $7142 = 0, $7143 = 0, $7144 = 0, $7145 = 0, $7146 = 0, $7147 = 0, $7148 = 0, $7149 = 0, $715 = 0, $7150 = 0, $7151 = 0, $7152 = 0, $7153 = 0, $7154 = 0, $7155 = 0, $7156 = 0, $7157 = 0;
 var $7158 = 0, $7159 = 0, $716 = 0, $7160 = 0, $7161 = 0, $7162 = 0, $7163 = 0, $7164 = 0, $7165 = 0, $7166 = 0, $7167 = 0, $7168 = 0, $7169 = 0, $717 = 0, $7170 = 0, $7171 = 0, $7172 = 0, $7173 = 0, $7174 = 0, $7175 = 0;
 var $7176 = 0, $7177 = 0, $7178 = 0, $7179 = 0, $718 = 0, $7180 = 0, $7181 = 0, $7182 = 0, $7183 = 0, $7184 = 0, $7185 = 0, $7186 = 0, $7187 = 0, $7188 = 0, $7189 = 0, $719 = 0, $7190 = 0, $7191 = 0, $7192 = 0, $7193 = 0;
 var $7194 = 0, $7195 = 0, $7196 = 0, $7197 = 0, $7198 = 0, $7199 = 0, $72 = 0, $720 = 0, $7200 = 0, $7201 = 0, $7202 = 0, $7203 = 0, $7204 = 0, $7205 = 0, $7206 = 0, $7207 = 0, $7208 = 0, $7209 = 0, $721 = 0, $7210 = 0;
 var $7211 = 0, $7212 = 0, $7213 = 0, $7214 = 0, $7215 = 0, $7216 = 0, $7217 = 0, $7218 = 0, $7219 = 0, $722 = 0, $7220 = 0, $7221 = 0, $7222 = 0, $7223 = 0, $7224 = 0, $7225 = 0, $7226 = 0, $7227 = 0, $7228 = 0, $7229 = 0;
 var $723 = 0, $7230 = 0, $7231 = 0, $7232 = 0, $7233 = 0, $7234 = 0, $7235 = 0, $7236 = 0, $7237 = 0, $7238 = 0, $7239 = 0, $724 = 0, $7240 = 0, $7241 = 0, $7242 = 0, $7243 = 0, $7244 = 0, $7245 = 0, $7246 = 0, $7247 = 0;
 var $7248 = 0, $7249 = 0, $725 = 0, $7250 = 0, $7251 = 0, $7252 = 0, $7253 = 0, $7254 = 0, $7255 = 0, $7256 = 0, $7257 = 0, $7258 = 0, $7259 = 0, $726 = 0, $7260 = 0, $7261 = 0, $7262 = 0, $7263 = 0, $7264 = 0, $7265 = 0;
 var $7266 = 0, $7267 = 0, $7268 = 0, $7269 = 0, $727 = 0, $7270 = 0, $7271 = 0, $7272 = 0, $7273 = 0, $7274 = 0, $7275 = 0, $7276 = 0, $7277 = 0, $7278 = 0, $7279 = 0, $728 = 0, $7280 = 0, $7281 = 0, $7282 = 0, $7283 = 0;
 var $7284 = 0, $7285 = 0, $7286 = 0, $7287 = 0, $7288 = 0, $7289 = 0, $729 = 0, $7290 = 0, $7291 = 0, $7292 = 0, $7293 = 0, $7294 = 0, $7295 = 0, $7296 = 0, $7297 = 0, $7298 = 0, $7299 = 0, $73 = 0, $730 = 0, $7300 = 0;
 var $7301 = 0, $7302 = 0, $7303 = 0, $7304 = 0, $7305 = 0, $7306 = 0, $7307 = 0, $7308 = 0, $7309 = 0, $731 = 0, $7310 = 0, $7311 = 0, $7312 = 0, $7313 = 0, $7314 = 0, $7315 = 0, $7316 = 0, $7317 = 0, $7318 = 0, $7319 = 0;
 var $732 = 0, $7320 = 0, $7321 = 0, $7322 = 0, $7323 = 0, $7324 = 0, $7325 = 0, $7326 = 0, $7327 = 0, $7328 = 0, $7329 = 0, $733 = 0, $7330 = 0, $7331 = 0, $7332 = 0, $7333 = 0, $7334 = 0, $7335 = 0, $7336 = 0, $7337 = 0;
 var $7338 = 0, $7339 = 0, $734 = 0, $7340 = 0, $7341 = 0, $7342 = 0, $7343 = 0, $7344 = 0, $7345 = 0, $7346 = 0, $7347 = 0, $7348 = 0, $7349 = 0, $735 = 0, $7350 = 0, $7351 = 0, $7352 = 0, $7353 = 0, $7354 = 0, $7355 = 0;
 var $7356 = 0, $7357 = 0, $7358 = 0, $7359 = 0, $736 = 0, $7360 = 0, $7361 = 0, $7362 = 0, $7363 = 0, $7364 = 0, $7365 = 0, $7366 = 0, $7367 = 0, $7368 = 0, $7369 = 0, $737 = 0, $7370 = 0, $7371 = 0, $7372 = 0, $7373 = 0;
 var $7374 = 0, $7375 = 0, $7376 = 0, $7377 = 0, $7378 = 0, $7379 = 0, $738 = 0, $7380 = 0, $7381 = 0, $7382 = 0, $7383 = 0, $7384 = 0, $7385 = 0, $7386 = 0, $7387 = 0, $7388 = 0, $7389 = 0, $739 = 0, $7390 = 0, $7391 = 0;
 var $7392 = 0, $7393 = 0, $7394 = 0, $7395 = 0, $7396 = 0, $7397 = 0, $7398 = 0, $7399 = 0, $74 = 0, $740 = 0, $7400 = 0, $7401 = 0, $7402 = 0, $7403 = 0, $7404 = 0, $7405 = 0, $7406 = 0, $7407 = 0, $7408 = 0, $7409 = 0;
 var $741 = 0, $7410 = 0, $7411 = 0, $7412 = 0, $7413 = 0, $7414 = 0, $7415 = 0, $7416 = 0, $7417 = 0, $7418 = 0, $7419 = 0, $742 = 0, $7420 = 0, $7421 = 0, $7422 = 0, $7423 = 0, $7424 = 0, $7425 = 0, $7426 = 0, $7427 = 0;
 var $7428 = 0, $7429 = 0, $743 = 0, $7430 = 0, $7431 = 0, $7432 = 0, $7433 = 0, $7434 = 0, $7435 = 0, $7436 = 0, $7437 = 0, $7438 = 0, $7439 = 0, $744 = 0, $7440 = 0, $7441 = 0, $7442 = 0, $7443 = 0, $7444 = 0, $7445 = 0;
 var $7446 = 0, $7447 = 0, $7448 = 0, $7449 = 0, $745 = 0, $7450 = 0, $7451 = 0, $7452 = 0, $7453 = 0, $7454 = 0, $7455 = 0, $7456 = 0, $7457 = 0, $7458 = 0, $7459 = 0, $746 = 0, $7460 = 0, $7461 = 0, $7462 = 0, $7463 = 0;
 var $7464 = 0, $7465 = 0, $7466 = 0, $7467 = 0, $7468 = 0, $7469 = 0, $747 = 0, $7470 = 0, $7471 = 0, $7472 = 0, $7473 = 0, $7474 = 0, $7475 = 0, $7476 = 0, $7477 = 0, $7478 = 0, $7479 = 0, $748 = 0, $7480 = 0, $7481 = 0;
 var $7482 = 0, $7483 = 0, $7484 = 0, $7485 = 0, $7486 = 0, $7487 = 0, $7488 = 0, $7489 = 0, $749 = 0, $7490 = 0, $7491 = 0, $7492 = 0, $7493 = 0, $7494 = 0, $7495 = 0, $7496 = 0, $7497 = 0, $7498 = 0, $7499 = 0, $75 = 0;
 var $750 = 0, $7500 = 0, $7501 = 0, $7502 = 0, $7503 = 0, $7504 = 0, $7505 = 0, $7506 = 0, $7507 = 0, $7508 = 0, $7509 = 0, $751 = 0, $7510 = 0, $7511 = 0, $7512 = 0, $7513 = 0, $7514 = 0, $7515 = 0, $7516 = 0, $7517 = 0;
 var $7518 = 0, $7519 = 0, $752 = 0, $7520 = 0, $7521 = 0, $7522 = 0, $7523 = 0, $7524 = 0, $7525 = 0, $7526 = 0, $7527 = 0, $7528 = 0, $7529 = 0, $753 = 0, $7530 = 0, $7531 = 0, $7532 = 0, $7533 = 0, $7534 = 0, $7535 = 0;
 var $7536 = 0, $7537 = 0, $7538 = 0, $7539 = 0, $754 = 0, $7540 = 0, $7541 = 0, $7542 = 0, $7543 = 0, $7544 = 0, $7545 = 0, $7546 = 0, $7547 = 0, $7548 = 0, $7549 = 0, $755 = 0, $7550 = 0, $7551 = 0, $7552 = 0, $7553 = 0;
 var $7554 = 0, $7555 = 0, $7556 = 0, $7557 = 0, $7558 = 0, $7559 = 0, $756 = 0, $7560 = 0, $7561 = 0, $7562 = 0, $7563 = 0, $7564 = 0, $7565 = 0, $7566 = 0, $7567 = 0, $7568 = 0, $7569 = 0, $757 = 0, $7570 = 0, $7571 = 0;
 var $7572 = 0, $7573 = 0, $7574 = 0, $7575 = 0, $7576 = 0, $7577 = 0, $7578 = 0, $7579 = 0, $758 = 0, $7580 = 0, $7581 = 0, $7582 = 0, $7583 = 0, $7584 = 0, $7585 = 0, $7586 = 0, $7587 = 0, $7588 = 0, $7589 = 0, $759 = 0;
 var $7590 = 0, $7591 = 0, $7592 = 0, $7593 = 0, $7594 = 0, $7595 = 0, $7596 = 0, $7597 = 0, $7598 = 0, $7599 = 0, $76 = 0, $760 = 0, $7600 = 0, $7601 = 0, $7602 = 0, $7603 = 0, $7604 = 0, $7605 = 0, $7606 = 0, $7607 = 0;
 var $7608 = 0, $7609 = 0, $761 = 0, $7610 = 0, $7611 = 0, $7612 = 0, $7613 = 0, $7614 = 0, $7615 = 0, $7616 = 0, $7617 = 0, $7618 = 0, $7619 = 0, $762 = 0, $7620 = 0, $7621 = 0, $7622 = 0, $7623 = 0, $7624 = 0, $7625 = 0;
 var $7626 = 0, $7627 = 0, $7628 = 0, $7629 = 0, $763 = 0, $7630 = 0, $7631 = 0, $7632 = 0, $7633 = 0, $7634 = 0, $7635 = 0, $7636 = 0, $7637 = 0, $7638 = 0, $7639 = 0, $764 = 0, $7640 = 0, $7641 = 0, $7642 = 0, $7643 = 0;
 var $7644 = 0, $7645 = 0, $7646 = 0, $7647 = 0, $7648 = 0, $7649 = 0, $765 = 0, $7650 = 0, $7651 = 0, $7652 = 0, $7653 = 0, $7654 = 0, $7655 = 0, $7656 = 0, $7657 = 0, $7658 = 0, $7659 = 0, $766 = 0, $7660 = 0, $7661 = 0;
 var $7662 = 0, $7663 = 0, $7664 = 0, $7665 = 0, $7666 = 0, $7667 = 0, $7668 = 0, $7669 = 0, $767 = 0, $7670 = 0, $7671 = 0, $7672 = 0, $7673 = 0, $7674 = 0, $7675 = 0, $7676 = 0, $7677 = 0, $7678 = 0, $7679 = 0, $768 = 0;
 var $7680 = 0, $7681 = 0, $7682 = 0, $7683 = 0, $7684 = 0, $7685 = 0, $7686 = 0, $7687 = 0, $7688 = 0, $7689 = 0, $769 = 0, $7690 = 0, $7691 = 0, $7692 = 0, $7693 = 0, $7694 = 0, $7695 = 0, $7696 = 0, $7697 = 0, $7698 = 0;
 var $7699 = 0, $77 = 0, $770 = 0, $7700 = 0, $7701 = 0, $7702 = 0, $7703 = 0, $7704 = 0, $7705 = 0, $7706 = 0, $7707 = 0, $7708 = 0, $7709 = 0, $771 = 0, $7710 = 0, $7711 = 0, $7712 = 0, $7713 = 0, $7714 = 0, $7715 = 0;
 var $7716 = 0, $7717 = 0, $7718 = 0, $7719 = 0, $772 = 0, $7720 = 0, $7721 = 0, $7722 = 0, $7723 = 0, $7724 = 0, $7725 = 0, $7726 = 0, $7727 = 0, $7728 = 0, $7729 = 0, $773 = 0, $7730 = 0, $7731 = 0, $7732 = 0, $7733 = 0;
 var $7734 = 0, $7735 = 0, $7736 = 0, $7737 = 0, $7738 = 0, $7739 = 0, $774 = 0, $7740 = 0, $7741 = 0, $7742 = 0, $7743 = 0, $7744 = 0, $7745 = 0, $7746 = 0, $7747 = 0, $7748 = 0, $7749 = 0, $775 = 0, $7750 = 0, $7751 = 0;
 var $7752 = 0, $7753 = 0, $7754 = 0, $7755 = 0, $7756 = 0, $7757 = 0, $7758 = 0, $7759 = 0, $776 = 0, $7760 = 0, $7761 = 0, $7762 = 0, $7763 = 0, $7764 = 0, $7765 = 0, $7766 = 0, $7767 = 0, $7768 = 0, $7769 = 0, $777 = 0;
 var $7770 = 0, $7771 = 0, $7772 = 0, $7773 = 0, $7774 = 0, $7775 = 0, $7776 = 0, $7777 = 0, $7778 = 0, $7779 = 0, $778 = 0, $7780 = 0, $7781 = 0, $7782 = 0, $7783 = 0, $7784 = 0, $7785 = 0, $7786 = 0, $7787 = 0, $7788 = 0;
 var $7789 = 0, $779 = 0, $7790 = 0, $7791 = 0, $7792 = 0, $7793 = 0, $7794 = 0, $7795 = 0, $7796 = 0, $7797 = 0, $7798 = 0, $7799 = 0, $78 = 0, $780 = 0, $7800 = 0, $7801 = 0, $7802 = 0, $7803 = 0, $7804 = 0, $7805 = 0;
 var $7806 = 0, $7807 = 0, $7808 = 0, $7809 = 0, $781 = 0, $7810 = 0, $7811 = 0, $7812 = 0, $7813 = 0, $7814 = 0, $7815 = 0, $7816 = 0, $7817 = 0, $7818 = 0, $7819 = 0, $782 = 0, $7820 = 0, $7821 = 0, $7822 = 0, $7823 = 0;
 var $7824 = 0, $7825 = 0, $7826 = 0, $7827 = 0, $7828 = 0, $7829 = 0, $783 = 0, $7830 = 0, $7831 = 0, $7832 = 0, $7833 = 0, $7834 = 0, $7835 = 0, $7836 = 0, $7837 = 0, $7838 = 0, $7839 = 0, $784 = 0, $7840 = 0, $7841 = 0;
 var $7842 = 0, $7843 = 0, $7844 = 0, $7845 = 0, $7846 = 0, $7847 = 0, $7848 = 0, $7849 = 0, $785 = 0, $7850 = 0, $7851 = 0, $7852 = 0, $7853 = 0, $7854 = 0, $7855 = 0, $7856 = 0, $7857 = 0, $7858 = 0, $7859 = 0, $786 = 0;
 var $7860 = 0, $7861 = 0, $7862 = 0, $7863 = 0, $7864 = 0, $7865 = 0, $7866 = 0, $7867 = 0, $7868 = 0, $7869 = 0, $787 = 0, $7870 = 0, $7871 = 0, $7872 = 0, $7873 = 0, $7874 = 0, $7875 = 0, $7876 = 0, $7877 = 0, $7878 = 0;
 var $7879 = 0, $788 = 0, $7880 = 0, $7881 = 0, $7882 = 0, $7883 = 0, $7884 = 0, $7885 = 0, $7886 = 0, $7887 = 0, $7888 = 0, $7889 = 0, $789 = 0, $7890 = 0, $7891 = 0, $7892 = 0, $7893 = 0, $7894 = 0, $7895 = 0, $7896 = 0;
 var $7897 = 0, $7898 = 0, $7899 = 0, $79 = 0, $790 = 0, $7900 = 0, $7901 = 0, $7902 = 0, $7903 = 0, $7904 = 0, $7905 = 0, $7906 = 0, $7907 = 0, $7908 = 0, $7909 = 0, $791 = 0, $7910 = 0, $7911 = 0, $7912 = 0, $7913 = 0;
 var $7914 = 0, $7915 = 0, $7916 = 0, $7917 = 0, $7918 = 0, $7919 = 0, $792 = 0, $7920 = 0, $7921 = 0, $7922 = 0, $7923 = 0, $7924 = 0, $7925 = 0, $7926 = 0, $7927 = 0, $7928 = 0, $7929 = 0, $793 = 0, $7930 = 0, $7931 = 0;
 var $7932 = 0, $7933 = 0, $7934 = 0, $7935 = 0, $7936 = 0, $7937 = 0, $7938 = 0, $7939 = 0, $794 = 0, $7940 = 0, $7941 = 0, $7942 = 0, $7943 = 0, $7944 = 0, $7945 = 0, $7946 = 0, $7947 = 0, $7948 = 0, $7949 = 0, $795 = 0;
 var $7950 = 0, $7951 = 0, $7952 = 0, $7953 = 0, $7954 = 0, $7955 = 0, $7956 = 0, $7957 = 0, $7958 = 0, $7959 = 0, $796 = 0, $7960 = 0, $7961 = 0, $7962 = 0, $7963 = 0, $7964 = 0, $7965 = 0, $7966 = 0, $7967 = 0, $7968 = 0;
 var $7969 = 0, $797 = 0, $7970 = 0, $7971 = 0, $7972 = 0, $7973 = 0, $7974 = 0, $7975 = 0, $7976 = 0, $7977 = 0, $7978 = 0, $7979 = 0, $798 = 0, $7980 = 0, $7981 = 0, $7982 = 0, $7983 = 0, $7984 = 0, $7985 = 0, $7986 = 0;
 var $7987 = 0, $7988 = 0, $7989 = 0, $799 = 0, $7990 = 0, $7991 = 0, $7992 = 0, $7993 = 0, $7994 = 0, $7995 = 0, $7996 = 0, $7997 = 0, $7998 = 0, $7999 = 0, $8 = 0, $80 = 0, $800 = 0, $8000 = 0, $8001 = 0, $8002 = 0;
 var $8003 = 0, $8004 = 0, $8005 = 0, $8006 = 0, $8007 = 0, $8008 = 0, $8009 = 0, $801 = 0, $8010 = 0, $8011 = 0, $8012 = 0, $8013 = 0, $8014 = 0, $8015 = 0, $8016 = 0, $8017 = 0, $8018 = 0, $8019 = 0, $802 = 0, $8020 = 0;
 var $8021 = 0, $8022 = 0, $8023 = 0, $8024 = 0, $8025 = 0, $8026 = 0, $8027 = 0, $8028 = 0, $8029 = 0, $803 = 0, $8030 = 0, $8031 = 0, $8032 = 0, $8033 = 0, $8034 = 0, $8035 = 0, $8036 = 0, $8037 = 0, $8038 = 0, $8039 = 0;
 var $804 = 0, $8040 = 0, $8041 = 0, $8042 = 0, $8043 = 0, $8044 = 0, $8045 = 0, $8046 = 0, $8047 = 0, $8048 = 0, $8049 = 0, $805 = 0, $8050 = 0, $8051 = 0, $8052 = 0, $8053 = 0, $8054 = 0, $8055 = 0, $8056 = 0, $8057 = 0;
 var $8058 = 0, $8059 = 0, $806 = 0, $8060 = 0, $8061 = 0, $8062 = 0, $8063 = 0, $8064 = 0, $8065 = 0, $8066 = 0, $8067 = 0, $8068 = 0, $8069 = 0, $807 = 0, $8070 = 0, $8071 = 0, $8072 = 0, $8073 = 0, $8074 = 0, $8075 = 0;
 var $8076 = 0, $8077 = 0, $8078 = 0, $8079 = 0, $808 = 0, $8080 = 0, $8081 = 0, $8082 = 0, $8083 = 0, $8084 = 0, $8085 = 0, $8086 = 0, $8087 = 0, $8088 = 0, $8089 = 0, $809 = 0, $8090 = 0, $8091 = 0, $8092 = 0, $8093 = 0;
 var $8094 = 0, $8095 = 0, $8096 = 0, $8097 = 0, $8098 = 0, $8099 = 0, $81 = 0, $810 = 0, $8100 = 0, $8101 = 0, $8102 = 0, $8103 = 0, $8104 = 0, $8105 = 0, $8106 = 0, $8107 = 0, $8108 = 0, $8109 = 0, $811 = 0, $8110 = 0;
 var $8111 = 0, $8112 = 0, $8113 = 0, $8114 = 0, $8115 = 0, $8116 = 0, $8117 = 0, $8118 = 0, $8119 = 0, $812 = 0, $8120 = 0, $8121 = 0, $8122 = 0, $8123 = 0, $8124 = 0, $8125 = 0, $8126 = 0, $8127 = 0, $8128 = 0, $8129 = 0;
 var $813 = 0, $8130 = 0, $8131 = 0, $8132 = 0, $8133 = 0, $8134 = 0, $8135 = 0, $8136 = 0, $8137 = 0, $8138 = 0, $8139 = 0, $814 = 0, $8140 = 0, $8141 = 0, $8142 = 0, $8143 = 0, $8144 = 0, $8145 = 0, $8146 = 0, $8147 = 0;
 var $8148 = 0, $8149 = 0, $815 = 0, $8150 = 0, $8151 = 0, $8152 = 0, $8153 = 0, $8154 = 0, $8155 = 0, $8156 = 0, $8157 = 0, $8158 = 0, $8159 = 0, $816 = 0, $8160 = 0, $8161 = 0, $8162 = 0, $8163 = 0, $8164 = 0, $8165 = 0;
 var $8166 = 0, $8167 = 0, $8168 = 0, $8169 = 0, $817 = 0, $8170 = 0, $8171 = 0, $8172 = 0, $8173 = 0, $8174 = 0, $8175 = 0, $8176 = 0, $8177 = 0, $8178 = 0, $8179 = 0, $818 = 0, $8180 = 0, $8181 = 0, $8182 = 0, $8183 = 0;
 var $8184 = 0, $8185 = 0, $8186 = 0, $8187 = 0, $8188 = 0, $8189 = 0, $819 = 0, $8190 = 0, $8191 = 0, $8192 = 0, $8193 = 0, $8194 = 0, $8195 = 0, $8196 = 0, $8197 = 0, $8198 = 0, $8199 = 0, $82 = 0, $820 = 0, $8200 = 0;
 var $8201 = 0, $8202 = 0, $8203 = 0, $8204 = 0, $8205 = 0, $8206 = 0, $8207 = 0, $8208 = 0, $8209 = 0, $821 = 0, $8210 = 0, $8211 = 0, $8212 = 0, $8213 = 0, $8214 = 0, $8215 = 0, $8216 = 0, $8217 = 0, $8218 = 0, $8219 = 0;
 var $822 = 0, $8220 = 0, $8221 = 0, $8222 = 0, $8223 = 0, $8224 = 0, $8225 = 0, $8226 = 0, $8227 = 0, $8228 = 0, $8229 = 0, $823 = 0, $8230 = 0, $8231 = 0, $8232 = 0, $8233 = 0, $8234 = 0, $8235 = 0, $8236 = 0, $8237 = 0;
 var $8238 = 0, $8239 = 0, $824 = 0, $8240 = 0, $8241 = 0, $8242 = 0, $8243 = 0, $8244 = 0, $8245 = 0, $8246 = 0, $8247 = 0, $8248 = 0, $8249 = 0, $825 = 0, $8250 = 0, $8251 = 0, $8252 = 0, $8253 = 0, $8254 = 0, $8255 = 0;
 var $8256 = 0, $8257 = 0, $8258 = 0, $8259 = 0, $826 = 0, $8260 = 0, $8261 = 0, $8262 = 0, $8263 = 0, $8264 = 0, $8265 = 0, $8266 = 0, $8267 = 0, $8268 = 0, $8269 = 0, $827 = 0, $8270 = 0, $8271 = 0, $8272 = 0, $8273 = 0;
 var $8274 = 0, $8275 = 0, $8276 = 0, $8277 = 0, $8278 = 0, $8279 = 0, $828 = 0, $8280 = 0, $8281 = 0, $8282 = 0, $8283 = 0, $8284 = 0, $8285 = 0, $8286 = 0, $8287 = 0, $8288 = 0, $8289 = 0, $829 = 0, $8290 = 0, $8291 = 0;
 var $8292 = 0, $8293 = 0, $8294 = 0, $8295 = 0, $8296 = 0, $8297 = 0, $8298 = 0, $8299 = 0, $83 = 0, $830 = 0, $8300 = 0, $8301 = 0, $8302 = 0, $8303 = 0, $8304 = 0, $8305 = 0, $8306 = 0, $8307 = 0, $8308 = 0, $8309 = 0;
 var $831 = 0, $8310 = 0, $8311 = 0, $8312 = 0, $8313 = 0, $8314 = 0, $8315 = 0, $8316 = 0, $8317 = 0, $8318 = 0, $8319 = 0, $832 = 0, $8320 = 0, $8321 = 0, $8322 = 0, $8323 = 0, $8324 = 0, $8325 = 0, $8326 = 0, $8327 = 0;
 var $8328 = 0, $8329 = 0, $833 = 0, $8330 = 0, $8331 = 0, $8332 = 0, $8333 = 0, $8334 = 0, $8335 = 0, $8336 = 0, $8337 = 0, $8338 = 0, $8339 = 0, $834 = 0, $8340 = 0, $8341 = 0, $8342 = 0, $8343 = 0, $8344 = 0, $8345 = 0;
 var $8346 = 0, $8347 = 0, $8348 = 0, $8349 = 0, $835 = 0, $8350 = 0, $8351 = 0, $8352 = 0, $8353 = 0, $8354 = 0, $8355 = 0, $8356 = 0, $8357 = 0, $8358 = 0, $8359 = 0, $836 = 0, $8360 = 0, $8361 = 0, $8362 = 0, $8363 = 0;
 var $8364 = 0, $8365 = 0, $8366 = 0, $8367 = 0, $8368 = 0, $8369 = 0, $837 = 0, $8370 = 0, $8371 = 0, $8372 = 0, $8373 = 0, $8374 = 0, $8375 = 0, $8376 = 0, $8377 = 0, $8378 = 0, $8379 = 0, $838 = 0, $8380 = 0, $8381 = 0;
 var $8382 = 0, $8383 = 0, $8384 = 0, $8385 = 0, $8386 = 0, $8387 = 0, $8388 = 0, $8389 = 0, $839 = 0, $8390 = 0, $8391 = 0, $8392 = 0, $8393 = 0, $8394 = 0, $8395 = 0, $8396 = 0, $8397 = 0, $8398 = 0, $8399 = 0, $84 = 0;
 var $840 = 0, $8400 = 0, $8401 = 0, $8402 = 0, $8403 = 0, $8404 = 0, $8405 = 0, $8406 = 0, $8407 = 0, $8408 = 0, $8409 = 0, $841 = 0, $8410 = 0, $8411 = 0, $8412 = 0, $8413 = 0, $8414 = 0, $8415 = 0, $8416 = 0, $8417 = 0;
 var $8418 = 0, $8419 = 0, $842 = 0, $8420 = 0, $8421 = 0, $8422 = 0, $8423 = 0, $8424 = 0, $8425 = 0, $8426 = 0, $8427 = 0, $8428 = 0, $8429 = 0, $843 = 0, $8430 = 0, $8431 = 0, $8432 = 0, $8433 = 0, $8434 = 0, $8435 = 0;
 var $8436 = 0, $8437 = 0, $8438 = 0, $8439 = 0, $844 = 0, $8440 = 0, $8441 = 0, $8442 = 0, $8443 = 0, $8444 = 0, $8445 = 0, $8446 = 0, $8447 = 0, $8448 = 0, $8449 = 0, $845 = 0, $8450 = 0, $8451 = 0, $8452 = 0, $8453 = 0;
 var $8454 = 0, $8455 = 0, $8456 = 0, $8457 = 0, $8458 = 0, $8459 = 0, $846 = 0, $8460 = 0, $8461 = 0, $8462 = 0, $8463 = 0, $8464 = 0, $8465 = 0, $8466 = 0, $8467 = 0, $8468 = 0, $8469 = 0, $847 = 0, $8470 = 0, $8471 = 0;
 var $8472 = 0, $8473 = 0, $8474 = 0, $8475 = 0, $8476 = 0, $8477 = 0, $8478 = 0, $8479 = 0, $848 = 0, $8480 = 0, $8481 = 0, $8482 = 0, $8483 = 0, $8484 = 0, $8485 = 0, $8486 = 0, $8487 = 0, $8488 = 0, $8489 = 0, $849 = 0;
 var $8490 = 0, $8491 = 0, $8492 = 0, $8493 = 0, $8494 = 0, $8495 = 0, $8496 = 0, $8497 = 0, $8498 = 0, $8499 = 0, $85 = 0, $850 = 0, $8500 = 0, $8501 = 0, $8502 = 0, $8503 = 0, $8504 = 0, $8505 = 0, $8506 = 0, $8507 = 0;
 var $8508 = 0, $8509 = 0, $851 = 0, $8510 = 0, $8511 = 0, $8512 = 0, $8513 = 0, $8514 = 0, $8515 = 0, $8516 = 0, $8517 = 0, $8518 = 0, $8519 = 0, $852 = 0, $8520 = 0, $8521 = 0, $8522 = 0, $8523 = 0, $8524 = 0, $8525 = 0;
 var $8526 = 0, $8527 = 0, $8528 = 0, $8529 = 0, $853 = 0, $8530 = 0, $8531 = 0, $8532 = 0, $8533 = 0, $8534 = 0, $8535 = 0, $8536 = 0, $8537 = 0, $8538 = 0, $8539 = 0, $854 = 0, $8540 = 0, $8541 = 0, $8542 = 0, $8543 = 0;
 var $8544 = 0, $8545 = 0, $8546 = 0, $8547 = 0, $8548 = 0, $8549 = 0, $855 = 0, $8550 = 0, $8551 = 0, $8552 = 0, $8553 = 0, $8554 = 0, $8555 = 0, $8556 = 0, $8557 = 0, $8558 = 0, $8559 = 0, $856 = 0, $8560 = 0, $8561 = 0;
 var $8562 = 0, $8563 = 0, $8564 = 0, $8565 = 0, $8566 = 0, $8567 = 0, $8568 = 0, $8569 = 0, $857 = 0, $8570 = 0, $8571 = 0, $8572 = 0, $8573 = 0, $8574 = 0, $8575 = 0, $8576 = 0, $8577 = 0, $8578 = 0, $8579 = 0, $858 = 0;
 var $8580 = 0, $8581 = 0, $8582 = 0, $8583 = 0, $8584 = 0, $8585 = 0, $8586 = 0, $8587 = 0, $8588 = 0, $8589 = 0, $859 = 0, $8590 = 0, $8591 = 0, $8592 = 0, $8593 = 0, $8594 = 0, $8595 = 0, $8596 = 0, $8597 = 0, $8598 = 0;
 var $8599 = 0, $86 = 0, $860 = 0, $8600 = 0, $8601 = 0, $8602 = 0, $8603 = 0, $8604 = 0, $8605 = 0, $8606 = 0, $8607 = 0, $8608 = 0, $8609 = 0, $861 = 0, $8610 = 0, $8611 = 0, $8612 = 0, $8613 = 0, $8614 = 0, $8615 = 0;
 var $8616 = 0, $8617 = 0, $8618 = 0, $8619 = 0, $862 = 0, $8620 = 0, $8621 = 0, $8622 = 0, $8623 = 0, $8624 = 0, $8625 = 0, $8626 = 0, $8627 = 0, $8628 = 0, $8629 = 0, $863 = 0, $8630 = 0, $8631 = 0, $8632 = 0, $8633 = 0;
 var $8634 = 0, $8635 = 0, $8636 = 0, $8637 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $8 = sp + 656|0;
 $9 = sp + 648|0;
 $10 = sp + 640|0;
 $11 = sp + 632|0;
 $12 = sp + 624|0;
 $13 = sp + 616|0;
 $14 = sp + 608|0;
 $15 = sp + 600|0;
 $16 = sp + 592|0;
 $17 = sp + 584|0;
 $18 = sp + 576|0;
 $19 = sp + 568|0;
 $20 = sp + 560|0;
 $21 = sp + 552|0;
 $22 = sp + 544|0;
 $23 = sp + 536|0;
 $24 = sp + 528|0;
 $25 = sp + 520|0;
 $26 = sp + 512|0;
 $27 = sp + 504|0;
 $28 = sp + 496|0;
 $29 = sp + 488|0;
 $30 = sp + 480|0;
 $31 = sp + 472|0;
 $32 = sp + 464|0;
 $33 = sp + 456|0;
 $34 = sp + 448|0;
 $35 = sp + 440|0;
 $36 = sp + 432|0;
 $37 = sp + 424|0;
 $38 = sp + 416|0;
 $39 = sp + 408|0;
 $40 = sp + 400|0;
 $41 = sp + 392|0;
 $42 = sp + 384|0;
 $43 = sp + 376|0;
 $44 = sp + 368|0;
 $45 = sp + 360|0;
 $46 = sp + 352|0;
 $47 = sp + 344|0;
 $48 = sp + 336|0;
 $49 = sp + 328|0;
 $50 = sp + 320|0;
 $51 = sp + 312|0;
 $52 = sp + 304|0;
 $53 = sp + 296|0;
 $54 = sp + 288|0;
 $55 = sp + 280|0;
 $56 = sp + 272|0;
 $57 = sp + 264|0;
 $58 = sp + 256|0;
 $59 = sp + 248|0;
 $60 = sp + 240|0;
 $61 = sp + 232|0;
 $62 = sp + 224|0;
 $63 = sp + 216|0;
 $64 = sp + 208|0;
 $65 = sp + 200|0;
 $66 = sp + 192|0;
 $67 = sp + 184|0;
 $68 = sp + 176|0;
 $69 = sp + 168|0;
 $70 = sp + 160|0;
 $71 = sp + 152|0;
 $72 = sp + 144|0;
 $73 = sp + 136|0;
 $74 = sp + 128|0;
 $75 = sp + 120|0;
 $76 = sp + 112|0;
 $77 = sp + 104|0;
 $78 = sp + 96|0;
 $79 = sp + 88|0;
 $80 = sp + 80|0;
 $81 = sp + 72|0;
 $82 = sp + 64|0;
 $83 = sp + 56|0;
 $84 = sp + 48|0;
 $85 = sp + 40|0;
 $86 = sp + 32|0;
 $87 = sp + 24|0;
 $88 = sp + 16|0;
 $89 = sp + 8|0;
 $90 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $91 = $5;
 $92 = (_load_3_40($91)|0);
 $93 = tempRet0;
 $94 = 2097151 & $92;
 $95 = $8;
 $96 = $95;
 HEAP32[$96>>2] = $94;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = 0;
 $99 = $5;
 $100 = ((($99)) + 2|0);
 $101 = (_load_4_41($100)|0);
 $102 = tempRet0;
 $103 = (_bitshift64Lshr(($101|0),($102|0),5)|0);
 $104 = tempRet0;
 $105 = 2097151 & $103;
 $106 = $9;
 $107 = $106;
 HEAP32[$107>>2] = $105;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = 0;
 $110 = $5;
 $111 = ((($110)) + 5|0);
 $112 = (_load_3_40($111)|0);
 $113 = tempRet0;
 $114 = (_bitshift64Lshr(($112|0),($113|0),2)|0);
 $115 = tempRet0;
 $116 = 2097151 & $114;
 $117 = $10;
 $118 = $117;
 HEAP32[$118>>2] = $116;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = 0;
 $121 = $5;
 $122 = ((($121)) + 7|0);
 $123 = (_load_4_41($122)|0);
 $124 = tempRet0;
 $125 = (_bitshift64Lshr(($123|0),($124|0),7)|0);
 $126 = tempRet0;
 $127 = 2097151 & $125;
 $128 = $11;
 $129 = $128;
 HEAP32[$129>>2] = $127;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = 0;
 $132 = $5;
 $133 = ((($132)) + 10|0);
 $134 = (_load_4_41($133)|0);
 $135 = tempRet0;
 $136 = (_bitshift64Lshr(($134|0),($135|0),4)|0);
 $137 = tempRet0;
 $138 = 2097151 & $136;
 $139 = $12;
 $140 = $139;
 HEAP32[$140>>2] = $138;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = 0;
 $143 = $5;
 $144 = ((($143)) + 13|0);
 $145 = (_load_3_40($144)|0);
 $146 = tempRet0;
 $147 = (_bitshift64Lshr(($145|0),($146|0),1)|0);
 $148 = tempRet0;
 $149 = 2097151 & $147;
 $150 = $13;
 $151 = $150;
 HEAP32[$151>>2] = $149;
 $152 = (($150) + 4)|0;
 $153 = $152;
 HEAP32[$153>>2] = 0;
 $154 = $5;
 $155 = ((($154)) + 15|0);
 $156 = (_load_4_41($155)|0);
 $157 = tempRet0;
 $158 = (_bitshift64Lshr(($156|0),($157|0),6)|0);
 $159 = tempRet0;
 $160 = 2097151 & $158;
 $161 = $14;
 $162 = $161;
 HEAP32[$162>>2] = $160;
 $163 = (($161) + 4)|0;
 $164 = $163;
 HEAP32[$164>>2] = 0;
 $165 = $5;
 $166 = ((($165)) + 18|0);
 $167 = (_load_3_40($166)|0);
 $168 = tempRet0;
 $169 = (_bitshift64Lshr(($167|0),($168|0),3)|0);
 $170 = tempRet0;
 $171 = 2097151 & $169;
 $172 = $15;
 $173 = $172;
 HEAP32[$173>>2] = $171;
 $174 = (($172) + 4)|0;
 $175 = $174;
 HEAP32[$175>>2] = 0;
 $176 = $5;
 $177 = ((($176)) + 21|0);
 $178 = (_load_3_40($177)|0);
 $179 = tempRet0;
 $180 = 2097151 & $178;
 $181 = $16;
 $182 = $181;
 HEAP32[$182>>2] = $180;
 $183 = (($181) + 4)|0;
 $184 = $183;
 HEAP32[$184>>2] = 0;
 $185 = $5;
 $186 = ((($185)) + 23|0);
 $187 = (_load_4_41($186)|0);
 $188 = tempRet0;
 $189 = (_bitshift64Lshr(($187|0),($188|0),5)|0);
 $190 = tempRet0;
 $191 = 2097151 & $189;
 $192 = $17;
 $193 = $192;
 HEAP32[$193>>2] = $191;
 $194 = (($192) + 4)|0;
 $195 = $194;
 HEAP32[$195>>2] = 0;
 $196 = $5;
 $197 = ((($196)) + 26|0);
 $198 = (_load_3_40($197)|0);
 $199 = tempRet0;
 $200 = (_bitshift64Lshr(($198|0),($199|0),2)|0);
 $201 = tempRet0;
 $202 = 2097151 & $200;
 $203 = $18;
 $204 = $203;
 HEAP32[$204>>2] = $202;
 $205 = (($203) + 4)|0;
 $206 = $205;
 HEAP32[$206>>2] = 0;
 $207 = $5;
 $208 = ((($207)) + 28|0);
 $209 = (_load_4_41($208)|0);
 $210 = tempRet0;
 $211 = (_bitshift64Lshr(($209|0),($210|0),7)|0);
 $212 = tempRet0;
 $213 = $19;
 $214 = $213;
 HEAP32[$214>>2] = $211;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = $6;
 $218 = (_load_3_40($217)|0);
 $219 = tempRet0;
 $220 = 2097151 & $218;
 $221 = $20;
 $222 = $221;
 HEAP32[$222>>2] = $220;
 $223 = (($221) + 4)|0;
 $224 = $223;
 HEAP32[$224>>2] = 0;
 $225 = $6;
 $226 = ((($225)) + 2|0);
 $227 = (_load_4_41($226)|0);
 $228 = tempRet0;
 $229 = (_bitshift64Lshr(($227|0),($228|0),5)|0);
 $230 = tempRet0;
 $231 = 2097151 & $229;
 $232 = $21;
 $233 = $232;
 HEAP32[$233>>2] = $231;
 $234 = (($232) + 4)|0;
 $235 = $234;
 HEAP32[$235>>2] = 0;
 $236 = $6;
 $237 = ((($236)) + 5|0);
 $238 = (_load_3_40($237)|0);
 $239 = tempRet0;
 $240 = (_bitshift64Lshr(($238|0),($239|0),2)|0);
 $241 = tempRet0;
 $242 = 2097151 & $240;
 $243 = $22;
 $244 = $243;
 HEAP32[$244>>2] = $242;
 $245 = (($243) + 4)|0;
 $246 = $245;
 HEAP32[$246>>2] = 0;
 $247 = $6;
 $248 = ((($247)) + 7|0);
 $249 = (_load_4_41($248)|0);
 $250 = tempRet0;
 $251 = (_bitshift64Lshr(($249|0),($250|0),7)|0);
 $252 = tempRet0;
 $253 = 2097151 & $251;
 $254 = $23;
 $255 = $254;
 HEAP32[$255>>2] = $253;
 $256 = (($254) + 4)|0;
 $257 = $256;
 HEAP32[$257>>2] = 0;
 $258 = $6;
 $259 = ((($258)) + 10|0);
 $260 = (_load_4_41($259)|0);
 $261 = tempRet0;
 $262 = (_bitshift64Lshr(($260|0),($261|0),4)|0);
 $263 = tempRet0;
 $264 = 2097151 & $262;
 $265 = $24;
 $266 = $265;
 HEAP32[$266>>2] = $264;
 $267 = (($265) + 4)|0;
 $268 = $267;
 HEAP32[$268>>2] = 0;
 $269 = $6;
 $270 = ((($269)) + 13|0);
 $271 = (_load_3_40($270)|0);
 $272 = tempRet0;
 $273 = (_bitshift64Lshr(($271|0),($272|0),1)|0);
 $274 = tempRet0;
 $275 = 2097151 & $273;
 $276 = $25;
 $277 = $276;
 HEAP32[$277>>2] = $275;
 $278 = (($276) + 4)|0;
 $279 = $278;
 HEAP32[$279>>2] = 0;
 $280 = $6;
 $281 = ((($280)) + 15|0);
 $282 = (_load_4_41($281)|0);
 $283 = tempRet0;
 $284 = (_bitshift64Lshr(($282|0),($283|0),6)|0);
 $285 = tempRet0;
 $286 = 2097151 & $284;
 $287 = $26;
 $288 = $287;
 HEAP32[$288>>2] = $286;
 $289 = (($287) + 4)|0;
 $290 = $289;
 HEAP32[$290>>2] = 0;
 $291 = $6;
 $292 = ((($291)) + 18|0);
 $293 = (_load_3_40($292)|0);
 $294 = tempRet0;
 $295 = (_bitshift64Lshr(($293|0),($294|0),3)|0);
 $296 = tempRet0;
 $297 = 2097151 & $295;
 $298 = $27;
 $299 = $298;
 HEAP32[$299>>2] = $297;
 $300 = (($298) + 4)|0;
 $301 = $300;
 HEAP32[$301>>2] = 0;
 $302 = $6;
 $303 = ((($302)) + 21|0);
 $304 = (_load_3_40($303)|0);
 $305 = tempRet0;
 $306 = 2097151 & $304;
 $307 = $28;
 $308 = $307;
 HEAP32[$308>>2] = $306;
 $309 = (($307) + 4)|0;
 $310 = $309;
 HEAP32[$310>>2] = 0;
 $311 = $6;
 $312 = ((($311)) + 23|0);
 $313 = (_load_4_41($312)|0);
 $314 = tempRet0;
 $315 = (_bitshift64Lshr(($313|0),($314|0),5)|0);
 $316 = tempRet0;
 $317 = 2097151 & $315;
 $318 = $29;
 $319 = $318;
 HEAP32[$319>>2] = $317;
 $320 = (($318) + 4)|0;
 $321 = $320;
 HEAP32[$321>>2] = 0;
 $322 = $6;
 $323 = ((($322)) + 26|0);
 $324 = (_load_3_40($323)|0);
 $325 = tempRet0;
 $326 = (_bitshift64Lshr(($324|0),($325|0),2)|0);
 $327 = tempRet0;
 $328 = 2097151 & $326;
 $329 = $30;
 $330 = $329;
 HEAP32[$330>>2] = $328;
 $331 = (($329) + 4)|0;
 $332 = $331;
 HEAP32[$332>>2] = 0;
 $333 = $6;
 $334 = ((($333)) + 28|0);
 $335 = (_load_4_41($334)|0);
 $336 = tempRet0;
 $337 = (_bitshift64Lshr(($335|0),($336|0),7)|0);
 $338 = tempRet0;
 $339 = $31;
 $340 = $339;
 HEAP32[$340>>2] = $337;
 $341 = (($339) + 4)|0;
 $342 = $341;
 HEAP32[$342>>2] = $338;
 $343 = $7;
 $344 = (_load_3_40($343)|0);
 $345 = tempRet0;
 $346 = 2097151 & $344;
 $347 = $32;
 $348 = $347;
 HEAP32[$348>>2] = $346;
 $349 = (($347) + 4)|0;
 $350 = $349;
 HEAP32[$350>>2] = 0;
 $351 = $7;
 $352 = ((($351)) + 2|0);
 $353 = (_load_4_41($352)|0);
 $354 = tempRet0;
 $355 = (_bitshift64Lshr(($353|0),($354|0),5)|0);
 $356 = tempRet0;
 $357 = 2097151 & $355;
 $358 = $33;
 $359 = $358;
 HEAP32[$359>>2] = $357;
 $360 = (($358) + 4)|0;
 $361 = $360;
 HEAP32[$361>>2] = 0;
 $362 = $7;
 $363 = ((($362)) + 5|0);
 $364 = (_load_3_40($363)|0);
 $365 = tempRet0;
 $366 = (_bitshift64Lshr(($364|0),($365|0),2)|0);
 $367 = tempRet0;
 $368 = 2097151 & $366;
 $369 = $34;
 $370 = $369;
 HEAP32[$370>>2] = $368;
 $371 = (($369) + 4)|0;
 $372 = $371;
 HEAP32[$372>>2] = 0;
 $373 = $7;
 $374 = ((($373)) + 7|0);
 $375 = (_load_4_41($374)|0);
 $376 = tempRet0;
 $377 = (_bitshift64Lshr(($375|0),($376|0),7)|0);
 $378 = tempRet0;
 $379 = 2097151 & $377;
 $380 = $35;
 $381 = $380;
 HEAP32[$381>>2] = $379;
 $382 = (($380) + 4)|0;
 $383 = $382;
 HEAP32[$383>>2] = 0;
 $384 = $7;
 $385 = ((($384)) + 10|0);
 $386 = (_load_4_41($385)|0);
 $387 = tempRet0;
 $388 = (_bitshift64Lshr(($386|0),($387|0),4)|0);
 $389 = tempRet0;
 $390 = 2097151 & $388;
 $391 = $36;
 $392 = $391;
 HEAP32[$392>>2] = $390;
 $393 = (($391) + 4)|0;
 $394 = $393;
 HEAP32[$394>>2] = 0;
 $395 = $7;
 $396 = ((($395)) + 13|0);
 $397 = (_load_3_40($396)|0);
 $398 = tempRet0;
 $399 = (_bitshift64Lshr(($397|0),($398|0),1)|0);
 $400 = tempRet0;
 $401 = 2097151 & $399;
 $402 = $37;
 $403 = $402;
 HEAP32[$403>>2] = $401;
 $404 = (($402) + 4)|0;
 $405 = $404;
 HEAP32[$405>>2] = 0;
 $406 = $7;
 $407 = ((($406)) + 15|0);
 $408 = (_load_4_41($407)|0);
 $409 = tempRet0;
 $410 = (_bitshift64Lshr(($408|0),($409|0),6)|0);
 $411 = tempRet0;
 $412 = 2097151 & $410;
 $413 = $38;
 $414 = $413;
 HEAP32[$414>>2] = $412;
 $415 = (($413) + 4)|0;
 $416 = $415;
 HEAP32[$416>>2] = 0;
 $417 = $7;
 $418 = ((($417)) + 18|0);
 $419 = (_load_3_40($418)|0);
 $420 = tempRet0;
 $421 = (_bitshift64Lshr(($419|0),($420|0),3)|0);
 $422 = tempRet0;
 $423 = 2097151 & $421;
 $424 = $39;
 $425 = $424;
 HEAP32[$425>>2] = $423;
 $426 = (($424) + 4)|0;
 $427 = $426;
 HEAP32[$427>>2] = 0;
 $428 = $7;
 $429 = ((($428)) + 21|0);
 $430 = (_load_3_40($429)|0);
 $431 = tempRet0;
 $432 = 2097151 & $430;
 $433 = $40;
 $434 = $433;
 HEAP32[$434>>2] = $432;
 $435 = (($433) + 4)|0;
 $436 = $435;
 HEAP32[$436>>2] = 0;
 $437 = $7;
 $438 = ((($437)) + 23|0);
 $439 = (_load_4_41($438)|0);
 $440 = tempRet0;
 $441 = (_bitshift64Lshr(($439|0),($440|0),5)|0);
 $442 = tempRet0;
 $443 = 2097151 & $441;
 $444 = $41;
 $445 = $444;
 HEAP32[$445>>2] = $443;
 $446 = (($444) + 4)|0;
 $447 = $446;
 HEAP32[$447>>2] = 0;
 $448 = $7;
 $449 = ((($448)) + 26|0);
 $450 = (_load_3_40($449)|0);
 $451 = tempRet0;
 $452 = (_bitshift64Lshr(($450|0),($451|0),2)|0);
 $453 = tempRet0;
 $454 = 2097151 & $452;
 $455 = $42;
 $456 = $455;
 HEAP32[$456>>2] = $454;
 $457 = (($455) + 4)|0;
 $458 = $457;
 HEAP32[$458>>2] = 0;
 $459 = $7;
 $460 = ((($459)) + 28|0);
 $461 = (_load_4_41($460)|0);
 $462 = tempRet0;
 $463 = (_bitshift64Lshr(($461|0),($462|0),7)|0);
 $464 = tempRet0;
 $465 = $43;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $32;
 $470 = $469;
 $471 = HEAP32[$470>>2]|0;
 $472 = (($469) + 4)|0;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = $8;
 $476 = $475;
 $477 = HEAP32[$476>>2]|0;
 $478 = (($475) + 4)|0;
 $479 = $478;
 $480 = HEAP32[$479>>2]|0;
 $481 = $20;
 $482 = $481;
 $483 = HEAP32[$482>>2]|0;
 $484 = (($481) + 4)|0;
 $485 = $484;
 $486 = HEAP32[$485>>2]|0;
 $487 = (___muldi3(($477|0),($480|0),($483|0),($486|0))|0);
 $488 = tempRet0;
 $489 = (_i64Add(($471|0),($474|0),($487|0),($488|0))|0);
 $490 = tempRet0;
 $491 = $44;
 $492 = $491;
 HEAP32[$492>>2] = $489;
 $493 = (($491) + 4)|0;
 $494 = $493;
 HEAP32[$494>>2] = $490;
 $495 = $33;
 $496 = $495;
 $497 = HEAP32[$496>>2]|0;
 $498 = (($495) + 4)|0;
 $499 = $498;
 $500 = HEAP32[$499>>2]|0;
 $501 = $8;
 $502 = $501;
 $503 = HEAP32[$502>>2]|0;
 $504 = (($501) + 4)|0;
 $505 = $504;
 $506 = HEAP32[$505>>2]|0;
 $507 = $21;
 $508 = $507;
 $509 = HEAP32[$508>>2]|0;
 $510 = (($507) + 4)|0;
 $511 = $510;
 $512 = HEAP32[$511>>2]|0;
 $513 = (___muldi3(($503|0),($506|0),($509|0),($512|0))|0);
 $514 = tempRet0;
 $515 = (_i64Add(($497|0),($500|0),($513|0),($514|0))|0);
 $516 = tempRet0;
 $517 = $9;
 $518 = $517;
 $519 = HEAP32[$518>>2]|0;
 $520 = (($517) + 4)|0;
 $521 = $520;
 $522 = HEAP32[$521>>2]|0;
 $523 = $20;
 $524 = $523;
 $525 = HEAP32[$524>>2]|0;
 $526 = (($523) + 4)|0;
 $527 = $526;
 $528 = HEAP32[$527>>2]|0;
 $529 = (___muldi3(($519|0),($522|0),($525|0),($528|0))|0);
 $530 = tempRet0;
 $531 = (_i64Add(($515|0),($516|0),($529|0),($530|0))|0);
 $532 = tempRet0;
 $533 = $45;
 $534 = $533;
 HEAP32[$534>>2] = $531;
 $535 = (($533) + 4)|0;
 $536 = $535;
 HEAP32[$536>>2] = $532;
 $537 = $34;
 $538 = $537;
 $539 = HEAP32[$538>>2]|0;
 $540 = (($537) + 4)|0;
 $541 = $540;
 $542 = HEAP32[$541>>2]|0;
 $543 = $8;
 $544 = $543;
 $545 = HEAP32[$544>>2]|0;
 $546 = (($543) + 4)|0;
 $547 = $546;
 $548 = HEAP32[$547>>2]|0;
 $549 = $22;
 $550 = $549;
 $551 = HEAP32[$550>>2]|0;
 $552 = (($549) + 4)|0;
 $553 = $552;
 $554 = HEAP32[$553>>2]|0;
 $555 = (___muldi3(($545|0),($548|0),($551|0),($554|0))|0);
 $556 = tempRet0;
 $557 = (_i64Add(($539|0),($542|0),($555|0),($556|0))|0);
 $558 = tempRet0;
 $559 = $9;
 $560 = $559;
 $561 = HEAP32[$560>>2]|0;
 $562 = (($559) + 4)|0;
 $563 = $562;
 $564 = HEAP32[$563>>2]|0;
 $565 = $21;
 $566 = $565;
 $567 = HEAP32[$566>>2]|0;
 $568 = (($565) + 4)|0;
 $569 = $568;
 $570 = HEAP32[$569>>2]|0;
 $571 = (___muldi3(($561|0),($564|0),($567|0),($570|0))|0);
 $572 = tempRet0;
 $573 = (_i64Add(($557|0),($558|0),($571|0),($572|0))|0);
 $574 = tempRet0;
 $575 = $10;
 $576 = $575;
 $577 = HEAP32[$576>>2]|0;
 $578 = (($575) + 4)|0;
 $579 = $578;
 $580 = HEAP32[$579>>2]|0;
 $581 = $20;
 $582 = $581;
 $583 = HEAP32[$582>>2]|0;
 $584 = (($581) + 4)|0;
 $585 = $584;
 $586 = HEAP32[$585>>2]|0;
 $587 = (___muldi3(($577|0),($580|0),($583|0),($586|0))|0);
 $588 = tempRet0;
 $589 = (_i64Add(($573|0),($574|0),($587|0),($588|0))|0);
 $590 = tempRet0;
 $591 = $46;
 $592 = $591;
 HEAP32[$592>>2] = $589;
 $593 = (($591) + 4)|0;
 $594 = $593;
 HEAP32[$594>>2] = $590;
 $595 = $35;
 $596 = $595;
 $597 = HEAP32[$596>>2]|0;
 $598 = (($595) + 4)|0;
 $599 = $598;
 $600 = HEAP32[$599>>2]|0;
 $601 = $8;
 $602 = $601;
 $603 = HEAP32[$602>>2]|0;
 $604 = (($601) + 4)|0;
 $605 = $604;
 $606 = HEAP32[$605>>2]|0;
 $607 = $23;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = (($607) + 4)|0;
 $611 = $610;
 $612 = HEAP32[$611>>2]|0;
 $613 = (___muldi3(($603|0),($606|0),($609|0),($612|0))|0);
 $614 = tempRet0;
 $615 = (_i64Add(($597|0),($600|0),($613|0),($614|0))|0);
 $616 = tempRet0;
 $617 = $9;
 $618 = $617;
 $619 = HEAP32[$618>>2]|0;
 $620 = (($617) + 4)|0;
 $621 = $620;
 $622 = HEAP32[$621>>2]|0;
 $623 = $22;
 $624 = $623;
 $625 = HEAP32[$624>>2]|0;
 $626 = (($623) + 4)|0;
 $627 = $626;
 $628 = HEAP32[$627>>2]|0;
 $629 = (___muldi3(($619|0),($622|0),($625|0),($628|0))|0);
 $630 = tempRet0;
 $631 = (_i64Add(($615|0),($616|0),($629|0),($630|0))|0);
 $632 = tempRet0;
 $633 = $10;
 $634 = $633;
 $635 = HEAP32[$634>>2]|0;
 $636 = (($633) + 4)|0;
 $637 = $636;
 $638 = HEAP32[$637>>2]|0;
 $639 = $21;
 $640 = $639;
 $641 = HEAP32[$640>>2]|0;
 $642 = (($639) + 4)|0;
 $643 = $642;
 $644 = HEAP32[$643>>2]|0;
 $645 = (___muldi3(($635|0),($638|0),($641|0),($644|0))|0);
 $646 = tempRet0;
 $647 = (_i64Add(($631|0),($632|0),($645|0),($646|0))|0);
 $648 = tempRet0;
 $649 = $11;
 $650 = $649;
 $651 = HEAP32[$650>>2]|0;
 $652 = (($649) + 4)|0;
 $653 = $652;
 $654 = HEAP32[$653>>2]|0;
 $655 = $20;
 $656 = $655;
 $657 = HEAP32[$656>>2]|0;
 $658 = (($655) + 4)|0;
 $659 = $658;
 $660 = HEAP32[$659>>2]|0;
 $661 = (___muldi3(($651|0),($654|0),($657|0),($660|0))|0);
 $662 = tempRet0;
 $663 = (_i64Add(($647|0),($648|0),($661|0),($662|0))|0);
 $664 = tempRet0;
 $665 = $47;
 $666 = $665;
 HEAP32[$666>>2] = $663;
 $667 = (($665) + 4)|0;
 $668 = $667;
 HEAP32[$668>>2] = $664;
 $669 = $36;
 $670 = $669;
 $671 = HEAP32[$670>>2]|0;
 $672 = (($669) + 4)|0;
 $673 = $672;
 $674 = HEAP32[$673>>2]|0;
 $675 = $8;
 $676 = $675;
 $677 = HEAP32[$676>>2]|0;
 $678 = (($675) + 4)|0;
 $679 = $678;
 $680 = HEAP32[$679>>2]|0;
 $681 = $24;
 $682 = $681;
 $683 = HEAP32[$682>>2]|0;
 $684 = (($681) + 4)|0;
 $685 = $684;
 $686 = HEAP32[$685>>2]|0;
 $687 = (___muldi3(($677|0),($680|0),($683|0),($686|0))|0);
 $688 = tempRet0;
 $689 = (_i64Add(($671|0),($674|0),($687|0),($688|0))|0);
 $690 = tempRet0;
 $691 = $9;
 $692 = $691;
 $693 = HEAP32[$692>>2]|0;
 $694 = (($691) + 4)|0;
 $695 = $694;
 $696 = HEAP32[$695>>2]|0;
 $697 = $23;
 $698 = $697;
 $699 = HEAP32[$698>>2]|0;
 $700 = (($697) + 4)|0;
 $701 = $700;
 $702 = HEAP32[$701>>2]|0;
 $703 = (___muldi3(($693|0),($696|0),($699|0),($702|0))|0);
 $704 = tempRet0;
 $705 = (_i64Add(($689|0),($690|0),($703|0),($704|0))|0);
 $706 = tempRet0;
 $707 = $10;
 $708 = $707;
 $709 = HEAP32[$708>>2]|0;
 $710 = (($707) + 4)|0;
 $711 = $710;
 $712 = HEAP32[$711>>2]|0;
 $713 = $22;
 $714 = $713;
 $715 = HEAP32[$714>>2]|0;
 $716 = (($713) + 4)|0;
 $717 = $716;
 $718 = HEAP32[$717>>2]|0;
 $719 = (___muldi3(($709|0),($712|0),($715|0),($718|0))|0);
 $720 = tempRet0;
 $721 = (_i64Add(($705|0),($706|0),($719|0),($720|0))|0);
 $722 = tempRet0;
 $723 = $11;
 $724 = $723;
 $725 = HEAP32[$724>>2]|0;
 $726 = (($723) + 4)|0;
 $727 = $726;
 $728 = HEAP32[$727>>2]|0;
 $729 = $21;
 $730 = $729;
 $731 = HEAP32[$730>>2]|0;
 $732 = (($729) + 4)|0;
 $733 = $732;
 $734 = HEAP32[$733>>2]|0;
 $735 = (___muldi3(($725|0),($728|0),($731|0),($734|0))|0);
 $736 = tempRet0;
 $737 = (_i64Add(($721|0),($722|0),($735|0),($736|0))|0);
 $738 = tempRet0;
 $739 = $12;
 $740 = $739;
 $741 = HEAP32[$740>>2]|0;
 $742 = (($739) + 4)|0;
 $743 = $742;
 $744 = HEAP32[$743>>2]|0;
 $745 = $20;
 $746 = $745;
 $747 = HEAP32[$746>>2]|0;
 $748 = (($745) + 4)|0;
 $749 = $748;
 $750 = HEAP32[$749>>2]|0;
 $751 = (___muldi3(($741|0),($744|0),($747|0),($750|0))|0);
 $752 = tempRet0;
 $753 = (_i64Add(($737|0),($738|0),($751|0),($752|0))|0);
 $754 = tempRet0;
 $755 = $48;
 $756 = $755;
 HEAP32[$756>>2] = $753;
 $757 = (($755) + 4)|0;
 $758 = $757;
 HEAP32[$758>>2] = $754;
 $759 = $37;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = (($759) + 4)|0;
 $763 = $762;
 $764 = HEAP32[$763>>2]|0;
 $765 = $8;
 $766 = $765;
 $767 = HEAP32[$766>>2]|0;
 $768 = (($765) + 4)|0;
 $769 = $768;
 $770 = HEAP32[$769>>2]|0;
 $771 = $25;
 $772 = $771;
 $773 = HEAP32[$772>>2]|0;
 $774 = (($771) + 4)|0;
 $775 = $774;
 $776 = HEAP32[$775>>2]|0;
 $777 = (___muldi3(($767|0),($770|0),($773|0),($776|0))|0);
 $778 = tempRet0;
 $779 = (_i64Add(($761|0),($764|0),($777|0),($778|0))|0);
 $780 = tempRet0;
 $781 = $9;
 $782 = $781;
 $783 = HEAP32[$782>>2]|0;
 $784 = (($781) + 4)|0;
 $785 = $784;
 $786 = HEAP32[$785>>2]|0;
 $787 = $24;
 $788 = $787;
 $789 = HEAP32[$788>>2]|0;
 $790 = (($787) + 4)|0;
 $791 = $790;
 $792 = HEAP32[$791>>2]|0;
 $793 = (___muldi3(($783|0),($786|0),($789|0),($792|0))|0);
 $794 = tempRet0;
 $795 = (_i64Add(($779|0),($780|0),($793|0),($794|0))|0);
 $796 = tempRet0;
 $797 = $10;
 $798 = $797;
 $799 = HEAP32[$798>>2]|0;
 $800 = (($797) + 4)|0;
 $801 = $800;
 $802 = HEAP32[$801>>2]|0;
 $803 = $23;
 $804 = $803;
 $805 = HEAP32[$804>>2]|0;
 $806 = (($803) + 4)|0;
 $807 = $806;
 $808 = HEAP32[$807>>2]|0;
 $809 = (___muldi3(($799|0),($802|0),($805|0),($808|0))|0);
 $810 = tempRet0;
 $811 = (_i64Add(($795|0),($796|0),($809|0),($810|0))|0);
 $812 = tempRet0;
 $813 = $11;
 $814 = $813;
 $815 = HEAP32[$814>>2]|0;
 $816 = (($813) + 4)|0;
 $817 = $816;
 $818 = HEAP32[$817>>2]|0;
 $819 = $22;
 $820 = $819;
 $821 = HEAP32[$820>>2]|0;
 $822 = (($819) + 4)|0;
 $823 = $822;
 $824 = HEAP32[$823>>2]|0;
 $825 = (___muldi3(($815|0),($818|0),($821|0),($824|0))|0);
 $826 = tempRet0;
 $827 = (_i64Add(($811|0),($812|0),($825|0),($826|0))|0);
 $828 = tempRet0;
 $829 = $12;
 $830 = $829;
 $831 = HEAP32[$830>>2]|0;
 $832 = (($829) + 4)|0;
 $833 = $832;
 $834 = HEAP32[$833>>2]|0;
 $835 = $21;
 $836 = $835;
 $837 = HEAP32[$836>>2]|0;
 $838 = (($835) + 4)|0;
 $839 = $838;
 $840 = HEAP32[$839>>2]|0;
 $841 = (___muldi3(($831|0),($834|0),($837|0),($840|0))|0);
 $842 = tempRet0;
 $843 = (_i64Add(($827|0),($828|0),($841|0),($842|0))|0);
 $844 = tempRet0;
 $845 = $13;
 $846 = $845;
 $847 = HEAP32[$846>>2]|0;
 $848 = (($845) + 4)|0;
 $849 = $848;
 $850 = HEAP32[$849>>2]|0;
 $851 = $20;
 $852 = $851;
 $853 = HEAP32[$852>>2]|0;
 $854 = (($851) + 4)|0;
 $855 = $854;
 $856 = HEAP32[$855>>2]|0;
 $857 = (___muldi3(($847|0),($850|0),($853|0),($856|0))|0);
 $858 = tempRet0;
 $859 = (_i64Add(($843|0),($844|0),($857|0),($858|0))|0);
 $860 = tempRet0;
 $861 = $49;
 $862 = $861;
 HEAP32[$862>>2] = $859;
 $863 = (($861) + 4)|0;
 $864 = $863;
 HEAP32[$864>>2] = $860;
 $865 = $38;
 $866 = $865;
 $867 = HEAP32[$866>>2]|0;
 $868 = (($865) + 4)|0;
 $869 = $868;
 $870 = HEAP32[$869>>2]|0;
 $871 = $8;
 $872 = $871;
 $873 = HEAP32[$872>>2]|0;
 $874 = (($871) + 4)|0;
 $875 = $874;
 $876 = HEAP32[$875>>2]|0;
 $877 = $26;
 $878 = $877;
 $879 = HEAP32[$878>>2]|0;
 $880 = (($877) + 4)|0;
 $881 = $880;
 $882 = HEAP32[$881>>2]|0;
 $883 = (___muldi3(($873|0),($876|0),($879|0),($882|0))|0);
 $884 = tempRet0;
 $885 = (_i64Add(($867|0),($870|0),($883|0),($884|0))|0);
 $886 = tempRet0;
 $887 = $9;
 $888 = $887;
 $889 = HEAP32[$888>>2]|0;
 $890 = (($887) + 4)|0;
 $891 = $890;
 $892 = HEAP32[$891>>2]|0;
 $893 = $25;
 $894 = $893;
 $895 = HEAP32[$894>>2]|0;
 $896 = (($893) + 4)|0;
 $897 = $896;
 $898 = HEAP32[$897>>2]|0;
 $899 = (___muldi3(($889|0),($892|0),($895|0),($898|0))|0);
 $900 = tempRet0;
 $901 = (_i64Add(($885|0),($886|0),($899|0),($900|0))|0);
 $902 = tempRet0;
 $903 = $10;
 $904 = $903;
 $905 = HEAP32[$904>>2]|0;
 $906 = (($903) + 4)|0;
 $907 = $906;
 $908 = HEAP32[$907>>2]|0;
 $909 = $24;
 $910 = $909;
 $911 = HEAP32[$910>>2]|0;
 $912 = (($909) + 4)|0;
 $913 = $912;
 $914 = HEAP32[$913>>2]|0;
 $915 = (___muldi3(($905|0),($908|0),($911|0),($914|0))|0);
 $916 = tempRet0;
 $917 = (_i64Add(($901|0),($902|0),($915|0),($916|0))|0);
 $918 = tempRet0;
 $919 = $11;
 $920 = $919;
 $921 = HEAP32[$920>>2]|0;
 $922 = (($919) + 4)|0;
 $923 = $922;
 $924 = HEAP32[$923>>2]|0;
 $925 = $23;
 $926 = $925;
 $927 = HEAP32[$926>>2]|0;
 $928 = (($925) + 4)|0;
 $929 = $928;
 $930 = HEAP32[$929>>2]|0;
 $931 = (___muldi3(($921|0),($924|0),($927|0),($930|0))|0);
 $932 = tempRet0;
 $933 = (_i64Add(($917|0),($918|0),($931|0),($932|0))|0);
 $934 = tempRet0;
 $935 = $12;
 $936 = $935;
 $937 = HEAP32[$936>>2]|0;
 $938 = (($935) + 4)|0;
 $939 = $938;
 $940 = HEAP32[$939>>2]|0;
 $941 = $22;
 $942 = $941;
 $943 = HEAP32[$942>>2]|0;
 $944 = (($941) + 4)|0;
 $945 = $944;
 $946 = HEAP32[$945>>2]|0;
 $947 = (___muldi3(($937|0),($940|0),($943|0),($946|0))|0);
 $948 = tempRet0;
 $949 = (_i64Add(($933|0),($934|0),($947|0),($948|0))|0);
 $950 = tempRet0;
 $951 = $13;
 $952 = $951;
 $953 = HEAP32[$952>>2]|0;
 $954 = (($951) + 4)|0;
 $955 = $954;
 $956 = HEAP32[$955>>2]|0;
 $957 = $21;
 $958 = $957;
 $959 = HEAP32[$958>>2]|0;
 $960 = (($957) + 4)|0;
 $961 = $960;
 $962 = HEAP32[$961>>2]|0;
 $963 = (___muldi3(($953|0),($956|0),($959|0),($962|0))|0);
 $964 = tempRet0;
 $965 = (_i64Add(($949|0),($950|0),($963|0),($964|0))|0);
 $966 = tempRet0;
 $967 = $14;
 $968 = $967;
 $969 = HEAP32[$968>>2]|0;
 $970 = (($967) + 4)|0;
 $971 = $970;
 $972 = HEAP32[$971>>2]|0;
 $973 = $20;
 $974 = $973;
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + 4)|0;
 $977 = $976;
 $978 = HEAP32[$977>>2]|0;
 $979 = (___muldi3(($969|0),($972|0),($975|0),($978|0))|0);
 $980 = tempRet0;
 $981 = (_i64Add(($965|0),($966|0),($979|0),($980|0))|0);
 $982 = tempRet0;
 $983 = $50;
 $984 = $983;
 HEAP32[$984>>2] = $981;
 $985 = (($983) + 4)|0;
 $986 = $985;
 HEAP32[$986>>2] = $982;
 $987 = $39;
 $988 = $987;
 $989 = HEAP32[$988>>2]|0;
 $990 = (($987) + 4)|0;
 $991 = $990;
 $992 = HEAP32[$991>>2]|0;
 $993 = $8;
 $994 = $993;
 $995 = HEAP32[$994>>2]|0;
 $996 = (($993) + 4)|0;
 $997 = $996;
 $998 = HEAP32[$997>>2]|0;
 $999 = $27;
 $1000 = $999;
 $1001 = HEAP32[$1000>>2]|0;
 $1002 = (($999) + 4)|0;
 $1003 = $1002;
 $1004 = HEAP32[$1003>>2]|0;
 $1005 = (___muldi3(($995|0),($998|0),($1001|0),($1004|0))|0);
 $1006 = tempRet0;
 $1007 = (_i64Add(($989|0),($992|0),($1005|0),($1006|0))|0);
 $1008 = tempRet0;
 $1009 = $9;
 $1010 = $1009;
 $1011 = HEAP32[$1010>>2]|0;
 $1012 = (($1009) + 4)|0;
 $1013 = $1012;
 $1014 = HEAP32[$1013>>2]|0;
 $1015 = $26;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (___muldi3(($1011|0),($1014|0),($1017|0),($1020|0))|0);
 $1022 = tempRet0;
 $1023 = (_i64Add(($1007|0),($1008|0),($1021|0),($1022|0))|0);
 $1024 = tempRet0;
 $1025 = $10;
 $1026 = $1025;
 $1027 = HEAP32[$1026>>2]|0;
 $1028 = (($1025) + 4)|0;
 $1029 = $1028;
 $1030 = HEAP32[$1029>>2]|0;
 $1031 = $25;
 $1032 = $1031;
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + 4)|0;
 $1035 = $1034;
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = (___muldi3(($1027|0),($1030|0),($1033|0),($1036|0))|0);
 $1038 = tempRet0;
 $1039 = (_i64Add(($1023|0),($1024|0),($1037|0),($1038|0))|0);
 $1040 = tempRet0;
 $1041 = $11;
 $1042 = $1041;
 $1043 = HEAP32[$1042>>2]|0;
 $1044 = (($1041) + 4)|0;
 $1045 = $1044;
 $1046 = HEAP32[$1045>>2]|0;
 $1047 = $24;
 $1048 = $1047;
 $1049 = HEAP32[$1048>>2]|0;
 $1050 = (($1047) + 4)|0;
 $1051 = $1050;
 $1052 = HEAP32[$1051>>2]|0;
 $1053 = (___muldi3(($1043|0),($1046|0),($1049|0),($1052|0))|0);
 $1054 = tempRet0;
 $1055 = (_i64Add(($1039|0),($1040|0),($1053|0),($1054|0))|0);
 $1056 = tempRet0;
 $1057 = $12;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($1057) + 4)|0;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = $23;
 $1064 = $1063;
 $1065 = HEAP32[$1064>>2]|0;
 $1066 = (($1063) + 4)|0;
 $1067 = $1066;
 $1068 = HEAP32[$1067>>2]|0;
 $1069 = (___muldi3(($1059|0),($1062|0),($1065|0),($1068|0))|0);
 $1070 = tempRet0;
 $1071 = (_i64Add(($1055|0),($1056|0),($1069|0),($1070|0))|0);
 $1072 = tempRet0;
 $1073 = $13;
 $1074 = $1073;
 $1075 = HEAP32[$1074>>2]|0;
 $1076 = (($1073) + 4)|0;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = $22;
 $1080 = $1079;
 $1081 = HEAP32[$1080>>2]|0;
 $1082 = (($1079) + 4)|0;
 $1083 = $1082;
 $1084 = HEAP32[$1083>>2]|0;
 $1085 = (___muldi3(($1075|0),($1078|0),($1081|0),($1084|0))|0);
 $1086 = tempRet0;
 $1087 = (_i64Add(($1071|0),($1072|0),($1085|0),($1086|0))|0);
 $1088 = tempRet0;
 $1089 = $14;
 $1090 = $1089;
 $1091 = HEAP32[$1090>>2]|0;
 $1092 = (($1089) + 4)|0;
 $1093 = $1092;
 $1094 = HEAP32[$1093>>2]|0;
 $1095 = $21;
 $1096 = $1095;
 $1097 = HEAP32[$1096>>2]|0;
 $1098 = (($1095) + 4)|0;
 $1099 = $1098;
 $1100 = HEAP32[$1099>>2]|0;
 $1101 = (___muldi3(($1091|0),($1094|0),($1097|0),($1100|0))|0);
 $1102 = tempRet0;
 $1103 = (_i64Add(($1087|0),($1088|0),($1101|0),($1102|0))|0);
 $1104 = tempRet0;
 $1105 = $15;
 $1106 = $1105;
 $1107 = HEAP32[$1106>>2]|0;
 $1108 = (($1105) + 4)|0;
 $1109 = $1108;
 $1110 = HEAP32[$1109>>2]|0;
 $1111 = $20;
 $1112 = $1111;
 $1113 = HEAP32[$1112>>2]|0;
 $1114 = (($1111) + 4)|0;
 $1115 = $1114;
 $1116 = HEAP32[$1115>>2]|0;
 $1117 = (___muldi3(($1107|0),($1110|0),($1113|0),($1116|0))|0);
 $1118 = tempRet0;
 $1119 = (_i64Add(($1103|0),($1104|0),($1117|0),($1118|0))|0);
 $1120 = tempRet0;
 $1121 = $51;
 $1122 = $1121;
 HEAP32[$1122>>2] = $1119;
 $1123 = (($1121) + 4)|0;
 $1124 = $1123;
 HEAP32[$1124>>2] = $1120;
 $1125 = $40;
 $1126 = $1125;
 $1127 = HEAP32[$1126>>2]|0;
 $1128 = (($1125) + 4)|0;
 $1129 = $1128;
 $1130 = HEAP32[$1129>>2]|0;
 $1131 = $8;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = $28;
 $1138 = $1137;
 $1139 = HEAP32[$1138>>2]|0;
 $1140 = (($1137) + 4)|0;
 $1141 = $1140;
 $1142 = HEAP32[$1141>>2]|0;
 $1143 = (___muldi3(($1133|0),($1136|0),($1139|0),($1142|0))|0);
 $1144 = tempRet0;
 $1145 = (_i64Add(($1127|0),($1130|0),($1143|0),($1144|0))|0);
 $1146 = tempRet0;
 $1147 = $9;
 $1148 = $1147;
 $1149 = HEAP32[$1148>>2]|0;
 $1150 = (($1147) + 4)|0;
 $1151 = $1150;
 $1152 = HEAP32[$1151>>2]|0;
 $1153 = $27;
 $1154 = $1153;
 $1155 = HEAP32[$1154>>2]|0;
 $1156 = (($1153) + 4)|0;
 $1157 = $1156;
 $1158 = HEAP32[$1157>>2]|0;
 $1159 = (___muldi3(($1149|0),($1152|0),($1155|0),($1158|0))|0);
 $1160 = tempRet0;
 $1161 = (_i64Add(($1145|0),($1146|0),($1159|0),($1160|0))|0);
 $1162 = tempRet0;
 $1163 = $10;
 $1164 = $1163;
 $1165 = HEAP32[$1164>>2]|0;
 $1166 = (($1163) + 4)|0;
 $1167 = $1166;
 $1168 = HEAP32[$1167>>2]|0;
 $1169 = $26;
 $1170 = $1169;
 $1171 = HEAP32[$1170>>2]|0;
 $1172 = (($1169) + 4)|0;
 $1173 = $1172;
 $1174 = HEAP32[$1173>>2]|0;
 $1175 = (___muldi3(($1165|0),($1168|0),($1171|0),($1174|0))|0);
 $1176 = tempRet0;
 $1177 = (_i64Add(($1161|0),($1162|0),($1175|0),($1176|0))|0);
 $1178 = tempRet0;
 $1179 = $11;
 $1180 = $1179;
 $1181 = HEAP32[$1180>>2]|0;
 $1182 = (($1179) + 4)|0;
 $1183 = $1182;
 $1184 = HEAP32[$1183>>2]|0;
 $1185 = $25;
 $1186 = $1185;
 $1187 = HEAP32[$1186>>2]|0;
 $1188 = (($1185) + 4)|0;
 $1189 = $1188;
 $1190 = HEAP32[$1189>>2]|0;
 $1191 = (___muldi3(($1181|0),($1184|0),($1187|0),($1190|0))|0);
 $1192 = tempRet0;
 $1193 = (_i64Add(($1177|0),($1178|0),($1191|0),($1192|0))|0);
 $1194 = tempRet0;
 $1195 = $12;
 $1196 = $1195;
 $1197 = HEAP32[$1196>>2]|0;
 $1198 = (($1195) + 4)|0;
 $1199 = $1198;
 $1200 = HEAP32[$1199>>2]|0;
 $1201 = $24;
 $1202 = $1201;
 $1203 = HEAP32[$1202>>2]|0;
 $1204 = (($1201) + 4)|0;
 $1205 = $1204;
 $1206 = HEAP32[$1205>>2]|0;
 $1207 = (___muldi3(($1197|0),($1200|0),($1203|0),($1206|0))|0);
 $1208 = tempRet0;
 $1209 = (_i64Add(($1193|0),($1194|0),($1207|0),($1208|0))|0);
 $1210 = tempRet0;
 $1211 = $13;
 $1212 = $1211;
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = (($1211) + 4)|0;
 $1215 = $1214;
 $1216 = HEAP32[$1215>>2]|0;
 $1217 = $23;
 $1218 = $1217;
 $1219 = HEAP32[$1218>>2]|0;
 $1220 = (($1217) + 4)|0;
 $1221 = $1220;
 $1222 = HEAP32[$1221>>2]|0;
 $1223 = (___muldi3(($1213|0),($1216|0),($1219|0),($1222|0))|0);
 $1224 = tempRet0;
 $1225 = (_i64Add(($1209|0),($1210|0),($1223|0),($1224|0))|0);
 $1226 = tempRet0;
 $1227 = $14;
 $1228 = $1227;
 $1229 = HEAP32[$1228>>2]|0;
 $1230 = (($1227) + 4)|0;
 $1231 = $1230;
 $1232 = HEAP32[$1231>>2]|0;
 $1233 = $22;
 $1234 = $1233;
 $1235 = HEAP32[$1234>>2]|0;
 $1236 = (($1233) + 4)|0;
 $1237 = $1236;
 $1238 = HEAP32[$1237>>2]|0;
 $1239 = (___muldi3(($1229|0),($1232|0),($1235|0),($1238|0))|0);
 $1240 = tempRet0;
 $1241 = (_i64Add(($1225|0),($1226|0),($1239|0),($1240|0))|0);
 $1242 = tempRet0;
 $1243 = $15;
 $1244 = $1243;
 $1245 = HEAP32[$1244>>2]|0;
 $1246 = (($1243) + 4)|0;
 $1247 = $1246;
 $1248 = HEAP32[$1247>>2]|0;
 $1249 = $21;
 $1250 = $1249;
 $1251 = HEAP32[$1250>>2]|0;
 $1252 = (($1249) + 4)|0;
 $1253 = $1252;
 $1254 = HEAP32[$1253>>2]|0;
 $1255 = (___muldi3(($1245|0),($1248|0),($1251|0),($1254|0))|0);
 $1256 = tempRet0;
 $1257 = (_i64Add(($1241|0),($1242|0),($1255|0),($1256|0))|0);
 $1258 = tempRet0;
 $1259 = $16;
 $1260 = $1259;
 $1261 = HEAP32[$1260>>2]|0;
 $1262 = (($1259) + 4)|0;
 $1263 = $1262;
 $1264 = HEAP32[$1263>>2]|0;
 $1265 = $20;
 $1266 = $1265;
 $1267 = HEAP32[$1266>>2]|0;
 $1268 = (($1265) + 4)|0;
 $1269 = $1268;
 $1270 = HEAP32[$1269>>2]|0;
 $1271 = (___muldi3(($1261|0),($1264|0),($1267|0),($1270|0))|0);
 $1272 = tempRet0;
 $1273 = (_i64Add(($1257|0),($1258|0),($1271|0),($1272|0))|0);
 $1274 = tempRet0;
 $1275 = $52;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1273;
 $1277 = (($1275) + 4)|0;
 $1278 = $1277;
 HEAP32[$1278>>2] = $1274;
 $1279 = $41;
 $1280 = $1279;
 $1281 = HEAP32[$1280>>2]|0;
 $1282 = (($1279) + 4)|0;
 $1283 = $1282;
 $1284 = HEAP32[$1283>>2]|0;
 $1285 = $8;
 $1286 = $1285;
 $1287 = HEAP32[$1286>>2]|0;
 $1288 = (($1285) + 4)|0;
 $1289 = $1288;
 $1290 = HEAP32[$1289>>2]|0;
 $1291 = $29;
 $1292 = $1291;
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + 4)|0;
 $1295 = $1294;
 $1296 = HEAP32[$1295>>2]|0;
 $1297 = (___muldi3(($1287|0),($1290|0),($1293|0),($1296|0))|0);
 $1298 = tempRet0;
 $1299 = (_i64Add(($1281|0),($1284|0),($1297|0),($1298|0))|0);
 $1300 = tempRet0;
 $1301 = $9;
 $1302 = $1301;
 $1303 = HEAP32[$1302>>2]|0;
 $1304 = (($1301) + 4)|0;
 $1305 = $1304;
 $1306 = HEAP32[$1305>>2]|0;
 $1307 = $28;
 $1308 = $1307;
 $1309 = HEAP32[$1308>>2]|0;
 $1310 = (($1307) + 4)|0;
 $1311 = $1310;
 $1312 = HEAP32[$1311>>2]|0;
 $1313 = (___muldi3(($1303|0),($1306|0),($1309|0),($1312|0))|0);
 $1314 = tempRet0;
 $1315 = (_i64Add(($1299|0),($1300|0),($1313|0),($1314|0))|0);
 $1316 = tempRet0;
 $1317 = $10;
 $1318 = $1317;
 $1319 = HEAP32[$1318>>2]|0;
 $1320 = (($1317) + 4)|0;
 $1321 = $1320;
 $1322 = HEAP32[$1321>>2]|0;
 $1323 = $27;
 $1324 = $1323;
 $1325 = HEAP32[$1324>>2]|0;
 $1326 = (($1323) + 4)|0;
 $1327 = $1326;
 $1328 = HEAP32[$1327>>2]|0;
 $1329 = (___muldi3(($1319|0),($1322|0),($1325|0),($1328|0))|0);
 $1330 = tempRet0;
 $1331 = (_i64Add(($1315|0),($1316|0),($1329|0),($1330|0))|0);
 $1332 = tempRet0;
 $1333 = $11;
 $1334 = $1333;
 $1335 = HEAP32[$1334>>2]|0;
 $1336 = (($1333) + 4)|0;
 $1337 = $1336;
 $1338 = HEAP32[$1337>>2]|0;
 $1339 = $26;
 $1340 = $1339;
 $1341 = HEAP32[$1340>>2]|0;
 $1342 = (($1339) + 4)|0;
 $1343 = $1342;
 $1344 = HEAP32[$1343>>2]|0;
 $1345 = (___muldi3(($1335|0),($1338|0),($1341|0),($1344|0))|0);
 $1346 = tempRet0;
 $1347 = (_i64Add(($1331|0),($1332|0),($1345|0),($1346|0))|0);
 $1348 = tempRet0;
 $1349 = $12;
 $1350 = $1349;
 $1351 = HEAP32[$1350>>2]|0;
 $1352 = (($1349) + 4)|0;
 $1353 = $1352;
 $1354 = HEAP32[$1353>>2]|0;
 $1355 = $25;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (___muldi3(($1351|0),($1354|0),($1357|0),($1360|0))|0);
 $1362 = tempRet0;
 $1363 = (_i64Add(($1347|0),($1348|0),($1361|0),($1362|0))|0);
 $1364 = tempRet0;
 $1365 = $13;
 $1366 = $1365;
 $1367 = HEAP32[$1366>>2]|0;
 $1368 = (($1365) + 4)|0;
 $1369 = $1368;
 $1370 = HEAP32[$1369>>2]|0;
 $1371 = $24;
 $1372 = $1371;
 $1373 = HEAP32[$1372>>2]|0;
 $1374 = (($1371) + 4)|0;
 $1375 = $1374;
 $1376 = HEAP32[$1375>>2]|0;
 $1377 = (___muldi3(($1367|0),($1370|0),($1373|0),($1376|0))|0);
 $1378 = tempRet0;
 $1379 = (_i64Add(($1363|0),($1364|0),($1377|0),($1378|0))|0);
 $1380 = tempRet0;
 $1381 = $14;
 $1382 = $1381;
 $1383 = HEAP32[$1382>>2]|0;
 $1384 = (($1381) + 4)|0;
 $1385 = $1384;
 $1386 = HEAP32[$1385>>2]|0;
 $1387 = $23;
 $1388 = $1387;
 $1389 = HEAP32[$1388>>2]|0;
 $1390 = (($1387) + 4)|0;
 $1391 = $1390;
 $1392 = HEAP32[$1391>>2]|0;
 $1393 = (___muldi3(($1383|0),($1386|0),($1389|0),($1392|0))|0);
 $1394 = tempRet0;
 $1395 = (_i64Add(($1379|0),($1380|0),($1393|0),($1394|0))|0);
 $1396 = tempRet0;
 $1397 = $15;
 $1398 = $1397;
 $1399 = HEAP32[$1398>>2]|0;
 $1400 = (($1397) + 4)|0;
 $1401 = $1400;
 $1402 = HEAP32[$1401>>2]|0;
 $1403 = $22;
 $1404 = $1403;
 $1405 = HEAP32[$1404>>2]|0;
 $1406 = (($1403) + 4)|0;
 $1407 = $1406;
 $1408 = HEAP32[$1407>>2]|0;
 $1409 = (___muldi3(($1399|0),($1402|0),($1405|0),($1408|0))|0);
 $1410 = tempRet0;
 $1411 = (_i64Add(($1395|0),($1396|0),($1409|0),($1410|0))|0);
 $1412 = tempRet0;
 $1413 = $16;
 $1414 = $1413;
 $1415 = HEAP32[$1414>>2]|0;
 $1416 = (($1413) + 4)|0;
 $1417 = $1416;
 $1418 = HEAP32[$1417>>2]|0;
 $1419 = $21;
 $1420 = $1419;
 $1421 = HEAP32[$1420>>2]|0;
 $1422 = (($1419) + 4)|0;
 $1423 = $1422;
 $1424 = HEAP32[$1423>>2]|0;
 $1425 = (___muldi3(($1415|0),($1418|0),($1421|0),($1424|0))|0);
 $1426 = tempRet0;
 $1427 = (_i64Add(($1411|0),($1412|0),($1425|0),($1426|0))|0);
 $1428 = tempRet0;
 $1429 = $17;
 $1430 = $1429;
 $1431 = HEAP32[$1430>>2]|0;
 $1432 = (($1429) + 4)|0;
 $1433 = $1432;
 $1434 = HEAP32[$1433>>2]|0;
 $1435 = $20;
 $1436 = $1435;
 $1437 = HEAP32[$1436>>2]|0;
 $1438 = (($1435) + 4)|0;
 $1439 = $1438;
 $1440 = HEAP32[$1439>>2]|0;
 $1441 = (___muldi3(($1431|0),($1434|0),($1437|0),($1440|0))|0);
 $1442 = tempRet0;
 $1443 = (_i64Add(($1427|0),($1428|0),($1441|0),($1442|0))|0);
 $1444 = tempRet0;
 $1445 = $53;
 $1446 = $1445;
 HEAP32[$1446>>2] = $1443;
 $1447 = (($1445) + 4)|0;
 $1448 = $1447;
 HEAP32[$1448>>2] = $1444;
 $1449 = $42;
 $1450 = $1449;
 $1451 = HEAP32[$1450>>2]|0;
 $1452 = (($1449) + 4)|0;
 $1453 = $1452;
 $1454 = HEAP32[$1453>>2]|0;
 $1455 = $8;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (($1455) + 4)|0;
 $1459 = $1458;
 $1460 = HEAP32[$1459>>2]|0;
 $1461 = $30;
 $1462 = $1461;
 $1463 = HEAP32[$1462>>2]|0;
 $1464 = (($1461) + 4)|0;
 $1465 = $1464;
 $1466 = HEAP32[$1465>>2]|0;
 $1467 = (___muldi3(($1457|0),($1460|0),($1463|0),($1466|0))|0);
 $1468 = tempRet0;
 $1469 = (_i64Add(($1451|0),($1454|0),($1467|0),($1468|0))|0);
 $1470 = tempRet0;
 $1471 = $9;
 $1472 = $1471;
 $1473 = HEAP32[$1472>>2]|0;
 $1474 = (($1471) + 4)|0;
 $1475 = $1474;
 $1476 = HEAP32[$1475>>2]|0;
 $1477 = $29;
 $1478 = $1477;
 $1479 = HEAP32[$1478>>2]|0;
 $1480 = (($1477) + 4)|0;
 $1481 = $1480;
 $1482 = HEAP32[$1481>>2]|0;
 $1483 = (___muldi3(($1473|0),($1476|0),($1479|0),($1482|0))|0);
 $1484 = tempRet0;
 $1485 = (_i64Add(($1469|0),($1470|0),($1483|0),($1484|0))|0);
 $1486 = tempRet0;
 $1487 = $10;
 $1488 = $1487;
 $1489 = HEAP32[$1488>>2]|0;
 $1490 = (($1487) + 4)|0;
 $1491 = $1490;
 $1492 = HEAP32[$1491>>2]|0;
 $1493 = $28;
 $1494 = $1493;
 $1495 = HEAP32[$1494>>2]|0;
 $1496 = (($1493) + 4)|0;
 $1497 = $1496;
 $1498 = HEAP32[$1497>>2]|0;
 $1499 = (___muldi3(($1489|0),($1492|0),($1495|0),($1498|0))|0);
 $1500 = tempRet0;
 $1501 = (_i64Add(($1485|0),($1486|0),($1499|0),($1500|0))|0);
 $1502 = tempRet0;
 $1503 = $11;
 $1504 = $1503;
 $1505 = HEAP32[$1504>>2]|0;
 $1506 = (($1503) + 4)|0;
 $1507 = $1506;
 $1508 = HEAP32[$1507>>2]|0;
 $1509 = $27;
 $1510 = $1509;
 $1511 = HEAP32[$1510>>2]|0;
 $1512 = (($1509) + 4)|0;
 $1513 = $1512;
 $1514 = HEAP32[$1513>>2]|0;
 $1515 = (___muldi3(($1505|0),($1508|0),($1511|0),($1514|0))|0);
 $1516 = tempRet0;
 $1517 = (_i64Add(($1501|0),($1502|0),($1515|0),($1516|0))|0);
 $1518 = tempRet0;
 $1519 = $12;
 $1520 = $1519;
 $1521 = HEAP32[$1520>>2]|0;
 $1522 = (($1519) + 4)|0;
 $1523 = $1522;
 $1524 = HEAP32[$1523>>2]|0;
 $1525 = $26;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (___muldi3(($1521|0),($1524|0),($1527|0),($1530|0))|0);
 $1532 = tempRet0;
 $1533 = (_i64Add(($1517|0),($1518|0),($1531|0),($1532|0))|0);
 $1534 = tempRet0;
 $1535 = $13;
 $1536 = $1535;
 $1537 = HEAP32[$1536>>2]|0;
 $1538 = (($1535) + 4)|0;
 $1539 = $1538;
 $1540 = HEAP32[$1539>>2]|0;
 $1541 = $25;
 $1542 = $1541;
 $1543 = HEAP32[$1542>>2]|0;
 $1544 = (($1541) + 4)|0;
 $1545 = $1544;
 $1546 = HEAP32[$1545>>2]|0;
 $1547 = (___muldi3(($1537|0),($1540|0),($1543|0),($1546|0))|0);
 $1548 = tempRet0;
 $1549 = (_i64Add(($1533|0),($1534|0),($1547|0),($1548|0))|0);
 $1550 = tempRet0;
 $1551 = $14;
 $1552 = $1551;
 $1553 = HEAP32[$1552>>2]|0;
 $1554 = (($1551) + 4)|0;
 $1555 = $1554;
 $1556 = HEAP32[$1555>>2]|0;
 $1557 = $24;
 $1558 = $1557;
 $1559 = HEAP32[$1558>>2]|0;
 $1560 = (($1557) + 4)|0;
 $1561 = $1560;
 $1562 = HEAP32[$1561>>2]|0;
 $1563 = (___muldi3(($1553|0),($1556|0),($1559|0),($1562|0))|0);
 $1564 = tempRet0;
 $1565 = (_i64Add(($1549|0),($1550|0),($1563|0),($1564|0))|0);
 $1566 = tempRet0;
 $1567 = $15;
 $1568 = $1567;
 $1569 = HEAP32[$1568>>2]|0;
 $1570 = (($1567) + 4)|0;
 $1571 = $1570;
 $1572 = HEAP32[$1571>>2]|0;
 $1573 = $23;
 $1574 = $1573;
 $1575 = HEAP32[$1574>>2]|0;
 $1576 = (($1573) + 4)|0;
 $1577 = $1576;
 $1578 = HEAP32[$1577>>2]|0;
 $1579 = (___muldi3(($1569|0),($1572|0),($1575|0),($1578|0))|0);
 $1580 = tempRet0;
 $1581 = (_i64Add(($1565|0),($1566|0),($1579|0),($1580|0))|0);
 $1582 = tempRet0;
 $1583 = $16;
 $1584 = $1583;
 $1585 = HEAP32[$1584>>2]|0;
 $1586 = (($1583) + 4)|0;
 $1587 = $1586;
 $1588 = HEAP32[$1587>>2]|0;
 $1589 = $22;
 $1590 = $1589;
 $1591 = HEAP32[$1590>>2]|0;
 $1592 = (($1589) + 4)|0;
 $1593 = $1592;
 $1594 = HEAP32[$1593>>2]|0;
 $1595 = (___muldi3(($1585|0),($1588|0),($1591|0),($1594|0))|0);
 $1596 = tempRet0;
 $1597 = (_i64Add(($1581|0),($1582|0),($1595|0),($1596|0))|0);
 $1598 = tempRet0;
 $1599 = $17;
 $1600 = $1599;
 $1601 = HEAP32[$1600>>2]|0;
 $1602 = (($1599) + 4)|0;
 $1603 = $1602;
 $1604 = HEAP32[$1603>>2]|0;
 $1605 = $21;
 $1606 = $1605;
 $1607 = HEAP32[$1606>>2]|0;
 $1608 = (($1605) + 4)|0;
 $1609 = $1608;
 $1610 = HEAP32[$1609>>2]|0;
 $1611 = (___muldi3(($1601|0),($1604|0),($1607|0),($1610|0))|0);
 $1612 = tempRet0;
 $1613 = (_i64Add(($1597|0),($1598|0),($1611|0),($1612|0))|0);
 $1614 = tempRet0;
 $1615 = $18;
 $1616 = $1615;
 $1617 = HEAP32[$1616>>2]|0;
 $1618 = (($1615) + 4)|0;
 $1619 = $1618;
 $1620 = HEAP32[$1619>>2]|0;
 $1621 = $20;
 $1622 = $1621;
 $1623 = HEAP32[$1622>>2]|0;
 $1624 = (($1621) + 4)|0;
 $1625 = $1624;
 $1626 = HEAP32[$1625>>2]|0;
 $1627 = (___muldi3(($1617|0),($1620|0),($1623|0),($1626|0))|0);
 $1628 = tempRet0;
 $1629 = (_i64Add(($1613|0),($1614|0),($1627|0),($1628|0))|0);
 $1630 = tempRet0;
 $1631 = $54;
 $1632 = $1631;
 HEAP32[$1632>>2] = $1629;
 $1633 = (($1631) + 4)|0;
 $1634 = $1633;
 HEAP32[$1634>>2] = $1630;
 $1635 = $43;
 $1636 = $1635;
 $1637 = HEAP32[$1636>>2]|0;
 $1638 = (($1635) + 4)|0;
 $1639 = $1638;
 $1640 = HEAP32[$1639>>2]|0;
 $1641 = $8;
 $1642 = $1641;
 $1643 = HEAP32[$1642>>2]|0;
 $1644 = (($1641) + 4)|0;
 $1645 = $1644;
 $1646 = HEAP32[$1645>>2]|0;
 $1647 = $31;
 $1648 = $1647;
 $1649 = HEAP32[$1648>>2]|0;
 $1650 = (($1647) + 4)|0;
 $1651 = $1650;
 $1652 = HEAP32[$1651>>2]|0;
 $1653 = (___muldi3(($1643|0),($1646|0),($1649|0),($1652|0))|0);
 $1654 = tempRet0;
 $1655 = (_i64Add(($1637|0),($1640|0),($1653|0),($1654|0))|0);
 $1656 = tempRet0;
 $1657 = $9;
 $1658 = $1657;
 $1659 = HEAP32[$1658>>2]|0;
 $1660 = (($1657) + 4)|0;
 $1661 = $1660;
 $1662 = HEAP32[$1661>>2]|0;
 $1663 = $30;
 $1664 = $1663;
 $1665 = HEAP32[$1664>>2]|0;
 $1666 = (($1663) + 4)|0;
 $1667 = $1666;
 $1668 = HEAP32[$1667>>2]|0;
 $1669 = (___muldi3(($1659|0),($1662|0),($1665|0),($1668|0))|0);
 $1670 = tempRet0;
 $1671 = (_i64Add(($1655|0),($1656|0),($1669|0),($1670|0))|0);
 $1672 = tempRet0;
 $1673 = $10;
 $1674 = $1673;
 $1675 = HEAP32[$1674>>2]|0;
 $1676 = (($1673) + 4)|0;
 $1677 = $1676;
 $1678 = HEAP32[$1677>>2]|0;
 $1679 = $29;
 $1680 = $1679;
 $1681 = HEAP32[$1680>>2]|0;
 $1682 = (($1679) + 4)|0;
 $1683 = $1682;
 $1684 = HEAP32[$1683>>2]|0;
 $1685 = (___muldi3(($1675|0),($1678|0),($1681|0),($1684|0))|0);
 $1686 = tempRet0;
 $1687 = (_i64Add(($1671|0),($1672|0),($1685|0),($1686|0))|0);
 $1688 = tempRet0;
 $1689 = $11;
 $1690 = $1689;
 $1691 = HEAP32[$1690>>2]|0;
 $1692 = (($1689) + 4)|0;
 $1693 = $1692;
 $1694 = HEAP32[$1693>>2]|0;
 $1695 = $28;
 $1696 = $1695;
 $1697 = HEAP32[$1696>>2]|0;
 $1698 = (($1695) + 4)|0;
 $1699 = $1698;
 $1700 = HEAP32[$1699>>2]|0;
 $1701 = (___muldi3(($1691|0),($1694|0),($1697|0),($1700|0))|0);
 $1702 = tempRet0;
 $1703 = (_i64Add(($1687|0),($1688|0),($1701|0),($1702|0))|0);
 $1704 = tempRet0;
 $1705 = $12;
 $1706 = $1705;
 $1707 = HEAP32[$1706>>2]|0;
 $1708 = (($1705) + 4)|0;
 $1709 = $1708;
 $1710 = HEAP32[$1709>>2]|0;
 $1711 = $27;
 $1712 = $1711;
 $1713 = HEAP32[$1712>>2]|0;
 $1714 = (($1711) + 4)|0;
 $1715 = $1714;
 $1716 = HEAP32[$1715>>2]|0;
 $1717 = (___muldi3(($1707|0),($1710|0),($1713|0),($1716|0))|0);
 $1718 = tempRet0;
 $1719 = (_i64Add(($1703|0),($1704|0),($1717|0),($1718|0))|0);
 $1720 = tempRet0;
 $1721 = $13;
 $1722 = $1721;
 $1723 = HEAP32[$1722>>2]|0;
 $1724 = (($1721) + 4)|0;
 $1725 = $1724;
 $1726 = HEAP32[$1725>>2]|0;
 $1727 = $26;
 $1728 = $1727;
 $1729 = HEAP32[$1728>>2]|0;
 $1730 = (($1727) + 4)|0;
 $1731 = $1730;
 $1732 = HEAP32[$1731>>2]|0;
 $1733 = (___muldi3(($1723|0),($1726|0),($1729|0),($1732|0))|0);
 $1734 = tempRet0;
 $1735 = (_i64Add(($1719|0),($1720|0),($1733|0),($1734|0))|0);
 $1736 = tempRet0;
 $1737 = $14;
 $1738 = $1737;
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = (($1737) + 4)|0;
 $1741 = $1740;
 $1742 = HEAP32[$1741>>2]|0;
 $1743 = $25;
 $1744 = $1743;
 $1745 = HEAP32[$1744>>2]|0;
 $1746 = (($1743) + 4)|0;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = (___muldi3(($1739|0),($1742|0),($1745|0),($1748|0))|0);
 $1750 = tempRet0;
 $1751 = (_i64Add(($1735|0),($1736|0),($1749|0),($1750|0))|0);
 $1752 = tempRet0;
 $1753 = $15;
 $1754 = $1753;
 $1755 = HEAP32[$1754>>2]|0;
 $1756 = (($1753) + 4)|0;
 $1757 = $1756;
 $1758 = HEAP32[$1757>>2]|0;
 $1759 = $24;
 $1760 = $1759;
 $1761 = HEAP32[$1760>>2]|0;
 $1762 = (($1759) + 4)|0;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = (___muldi3(($1755|0),($1758|0),($1761|0),($1764|0))|0);
 $1766 = tempRet0;
 $1767 = (_i64Add(($1751|0),($1752|0),($1765|0),($1766|0))|0);
 $1768 = tempRet0;
 $1769 = $16;
 $1770 = $1769;
 $1771 = HEAP32[$1770>>2]|0;
 $1772 = (($1769) + 4)|0;
 $1773 = $1772;
 $1774 = HEAP32[$1773>>2]|0;
 $1775 = $23;
 $1776 = $1775;
 $1777 = HEAP32[$1776>>2]|0;
 $1778 = (($1775) + 4)|0;
 $1779 = $1778;
 $1780 = HEAP32[$1779>>2]|0;
 $1781 = (___muldi3(($1771|0),($1774|0),($1777|0),($1780|0))|0);
 $1782 = tempRet0;
 $1783 = (_i64Add(($1767|0),($1768|0),($1781|0),($1782|0))|0);
 $1784 = tempRet0;
 $1785 = $17;
 $1786 = $1785;
 $1787 = HEAP32[$1786>>2]|0;
 $1788 = (($1785) + 4)|0;
 $1789 = $1788;
 $1790 = HEAP32[$1789>>2]|0;
 $1791 = $22;
 $1792 = $1791;
 $1793 = HEAP32[$1792>>2]|0;
 $1794 = (($1791) + 4)|0;
 $1795 = $1794;
 $1796 = HEAP32[$1795>>2]|0;
 $1797 = (___muldi3(($1787|0),($1790|0),($1793|0),($1796|0))|0);
 $1798 = tempRet0;
 $1799 = (_i64Add(($1783|0),($1784|0),($1797|0),($1798|0))|0);
 $1800 = tempRet0;
 $1801 = $18;
 $1802 = $1801;
 $1803 = HEAP32[$1802>>2]|0;
 $1804 = (($1801) + 4)|0;
 $1805 = $1804;
 $1806 = HEAP32[$1805>>2]|0;
 $1807 = $21;
 $1808 = $1807;
 $1809 = HEAP32[$1808>>2]|0;
 $1810 = (($1807) + 4)|0;
 $1811 = $1810;
 $1812 = HEAP32[$1811>>2]|0;
 $1813 = (___muldi3(($1803|0),($1806|0),($1809|0),($1812|0))|0);
 $1814 = tempRet0;
 $1815 = (_i64Add(($1799|0),($1800|0),($1813|0),($1814|0))|0);
 $1816 = tempRet0;
 $1817 = $19;
 $1818 = $1817;
 $1819 = HEAP32[$1818>>2]|0;
 $1820 = (($1817) + 4)|0;
 $1821 = $1820;
 $1822 = HEAP32[$1821>>2]|0;
 $1823 = $20;
 $1824 = $1823;
 $1825 = HEAP32[$1824>>2]|0;
 $1826 = (($1823) + 4)|0;
 $1827 = $1826;
 $1828 = HEAP32[$1827>>2]|0;
 $1829 = (___muldi3(($1819|0),($1822|0),($1825|0),($1828|0))|0);
 $1830 = tempRet0;
 $1831 = (_i64Add(($1815|0),($1816|0),($1829|0),($1830|0))|0);
 $1832 = tempRet0;
 $1833 = $55;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1831;
 $1835 = (($1833) + 4)|0;
 $1836 = $1835;
 HEAP32[$1836>>2] = $1832;
 $1837 = $9;
 $1838 = $1837;
 $1839 = HEAP32[$1838>>2]|0;
 $1840 = (($1837) + 4)|0;
 $1841 = $1840;
 $1842 = HEAP32[$1841>>2]|0;
 $1843 = $31;
 $1844 = $1843;
 $1845 = HEAP32[$1844>>2]|0;
 $1846 = (($1843) + 4)|0;
 $1847 = $1846;
 $1848 = HEAP32[$1847>>2]|0;
 $1849 = (___muldi3(($1839|0),($1842|0),($1845|0),($1848|0))|0);
 $1850 = tempRet0;
 $1851 = $10;
 $1852 = $1851;
 $1853 = HEAP32[$1852>>2]|0;
 $1854 = (($1851) + 4)|0;
 $1855 = $1854;
 $1856 = HEAP32[$1855>>2]|0;
 $1857 = $30;
 $1858 = $1857;
 $1859 = HEAP32[$1858>>2]|0;
 $1860 = (($1857) + 4)|0;
 $1861 = $1860;
 $1862 = HEAP32[$1861>>2]|0;
 $1863 = (___muldi3(($1853|0),($1856|0),($1859|0),($1862|0))|0);
 $1864 = tempRet0;
 $1865 = (_i64Add(($1849|0),($1850|0),($1863|0),($1864|0))|0);
 $1866 = tempRet0;
 $1867 = $11;
 $1868 = $1867;
 $1869 = HEAP32[$1868>>2]|0;
 $1870 = (($1867) + 4)|0;
 $1871 = $1870;
 $1872 = HEAP32[$1871>>2]|0;
 $1873 = $29;
 $1874 = $1873;
 $1875 = HEAP32[$1874>>2]|0;
 $1876 = (($1873) + 4)|0;
 $1877 = $1876;
 $1878 = HEAP32[$1877>>2]|0;
 $1879 = (___muldi3(($1869|0),($1872|0),($1875|0),($1878|0))|0);
 $1880 = tempRet0;
 $1881 = (_i64Add(($1865|0),($1866|0),($1879|0),($1880|0))|0);
 $1882 = tempRet0;
 $1883 = $12;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = $28;
 $1890 = $1889;
 $1891 = HEAP32[$1890>>2]|0;
 $1892 = (($1889) + 4)|0;
 $1893 = $1892;
 $1894 = HEAP32[$1893>>2]|0;
 $1895 = (___muldi3(($1885|0),($1888|0),($1891|0),($1894|0))|0);
 $1896 = tempRet0;
 $1897 = (_i64Add(($1881|0),($1882|0),($1895|0),($1896|0))|0);
 $1898 = tempRet0;
 $1899 = $13;
 $1900 = $1899;
 $1901 = HEAP32[$1900>>2]|0;
 $1902 = (($1899) + 4)|0;
 $1903 = $1902;
 $1904 = HEAP32[$1903>>2]|0;
 $1905 = $27;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (($1905) + 4)|0;
 $1909 = $1908;
 $1910 = HEAP32[$1909>>2]|0;
 $1911 = (___muldi3(($1901|0),($1904|0),($1907|0),($1910|0))|0);
 $1912 = tempRet0;
 $1913 = (_i64Add(($1897|0),($1898|0),($1911|0),($1912|0))|0);
 $1914 = tempRet0;
 $1915 = $14;
 $1916 = $1915;
 $1917 = HEAP32[$1916>>2]|0;
 $1918 = (($1915) + 4)|0;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = $26;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = (($1921) + 4)|0;
 $1925 = $1924;
 $1926 = HEAP32[$1925>>2]|0;
 $1927 = (___muldi3(($1917|0),($1920|0),($1923|0),($1926|0))|0);
 $1928 = tempRet0;
 $1929 = (_i64Add(($1913|0),($1914|0),($1927|0),($1928|0))|0);
 $1930 = tempRet0;
 $1931 = $15;
 $1932 = $1931;
 $1933 = HEAP32[$1932>>2]|0;
 $1934 = (($1931) + 4)|0;
 $1935 = $1934;
 $1936 = HEAP32[$1935>>2]|0;
 $1937 = $25;
 $1938 = $1937;
 $1939 = HEAP32[$1938>>2]|0;
 $1940 = (($1937) + 4)|0;
 $1941 = $1940;
 $1942 = HEAP32[$1941>>2]|0;
 $1943 = (___muldi3(($1933|0),($1936|0),($1939|0),($1942|0))|0);
 $1944 = tempRet0;
 $1945 = (_i64Add(($1929|0),($1930|0),($1943|0),($1944|0))|0);
 $1946 = tempRet0;
 $1947 = $16;
 $1948 = $1947;
 $1949 = HEAP32[$1948>>2]|0;
 $1950 = (($1947) + 4)|0;
 $1951 = $1950;
 $1952 = HEAP32[$1951>>2]|0;
 $1953 = $24;
 $1954 = $1953;
 $1955 = HEAP32[$1954>>2]|0;
 $1956 = (($1953) + 4)|0;
 $1957 = $1956;
 $1958 = HEAP32[$1957>>2]|0;
 $1959 = (___muldi3(($1949|0),($1952|0),($1955|0),($1958|0))|0);
 $1960 = tempRet0;
 $1961 = (_i64Add(($1945|0),($1946|0),($1959|0),($1960|0))|0);
 $1962 = tempRet0;
 $1963 = $17;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (($1963) + 4)|0;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = $23;
 $1970 = $1969;
 $1971 = HEAP32[$1970>>2]|0;
 $1972 = (($1969) + 4)|0;
 $1973 = $1972;
 $1974 = HEAP32[$1973>>2]|0;
 $1975 = (___muldi3(($1965|0),($1968|0),($1971|0),($1974|0))|0);
 $1976 = tempRet0;
 $1977 = (_i64Add(($1961|0),($1962|0),($1975|0),($1976|0))|0);
 $1978 = tempRet0;
 $1979 = $18;
 $1980 = $1979;
 $1981 = HEAP32[$1980>>2]|0;
 $1982 = (($1979) + 4)|0;
 $1983 = $1982;
 $1984 = HEAP32[$1983>>2]|0;
 $1985 = $22;
 $1986 = $1985;
 $1987 = HEAP32[$1986>>2]|0;
 $1988 = (($1985) + 4)|0;
 $1989 = $1988;
 $1990 = HEAP32[$1989>>2]|0;
 $1991 = (___muldi3(($1981|0),($1984|0),($1987|0),($1990|0))|0);
 $1992 = tempRet0;
 $1993 = (_i64Add(($1977|0),($1978|0),($1991|0),($1992|0))|0);
 $1994 = tempRet0;
 $1995 = $19;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (($1995) + 4)|0;
 $1999 = $1998;
 $2000 = HEAP32[$1999>>2]|0;
 $2001 = $21;
 $2002 = $2001;
 $2003 = HEAP32[$2002>>2]|0;
 $2004 = (($2001) + 4)|0;
 $2005 = $2004;
 $2006 = HEAP32[$2005>>2]|0;
 $2007 = (___muldi3(($1997|0),($2000|0),($2003|0),($2006|0))|0);
 $2008 = tempRet0;
 $2009 = (_i64Add(($1993|0),($1994|0),($2007|0),($2008|0))|0);
 $2010 = tempRet0;
 $2011 = $56;
 $2012 = $2011;
 HEAP32[$2012>>2] = $2009;
 $2013 = (($2011) + 4)|0;
 $2014 = $2013;
 HEAP32[$2014>>2] = $2010;
 $2015 = $10;
 $2016 = $2015;
 $2017 = HEAP32[$2016>>2]|0;
 $2018 = (($2015) + 4)|0;
 $2019 = $2018;
 $2020 = HEAP32[$2019>>2]|0;
 $2021 = $31;
 $2022 = $2021;
 $2023 = HEAP32[$2022>>2]|0;
 $2024 = (($2021) + 4)|0;
 $2025 = $2024;
 $2026 = HEAP32[$2025>>2]|0;
 $2027 = (___muldi3(($2017|0),($2020|0),($2023|0),($2026|0))|0);
 $2028 = tempRet0;
 $2029 = $11;
 $2030 = $2029;
 $2031 = HEAP32[$2030>>2]|0;
 $2032 = (($2029) + 4)|0;
 $2033 = $2032;
 $2034 = HEAP32[$2033>>2]|0;
 $2035 = $30;
 $2036 = $2035;
 $2037 = HEAP32[$2036>>2]|0;
 $2038 = (($2035) + 4)|0;
 $2039 = $2038;
 $2040 = HEAP32[$2039>>2]|0;
 $2041 = (___muldi3(($2031|0),($2034|0),($2037|0),($2040|0))|0);
 $2042 = tempRet0;
 $2043 = (_i64Add(($2027|0),($2028|0),($2041|0),($2042|0))|0);
 $2044 = tempRet0;
 $2045 = $12;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (($2045) + 4)|0;
 $2049 = $2048;
 $2050 = HEAP32[$2049>>2]|0;
 $2051 = $29;
 $2052 = $2051;
 $2053 = HEAP32[$2052>>2]|0;
 $2054 = (($2051) + 4)|0;
 $2055 = $2054;
 $2056 = HEAP32[$2055>>2]|0;
 $2057 = (___muldi3(($2047|0),($2050|0),($2053|0),($2056|0))|0);
 $2058 = tempRet0;
 $2059 = (_i64Add(($2043|0),($2044|0),($2057|0),($2058|0))|0);
 $2060 = tempRet0;
 $2061 = $13;
 $2062 = $2061;
 $2063 = HEAP32[$2062>>2]|0;
 $2064 = (($2061) + 4)|0;
 $2065 = $2064;
 $2066 = HEAP32[$2065>>2]|0;
 $2067 = $28;
 $2068 = $2067;
 $2069 = HEAP32[$2068>>2]|0;
 $2070 = (($2067) + 4)|0;
 $2071 = $2070;
 $2072 = HEAP32[$2071>>2]|0;
 $2073 = (___muldi3(($2063|0),($2066|0),($2069|0),($2072|0))|0);
 $2074 = tempRet0;
 $2075 = (_i64Add(($2059|0),($2060|0),($2073|0),($2074|0))|0);
 $2076 = tempRet0;
 $2077 = $14;
 $2078 = $2077;
 $2079 = HEAP32[$2078>>2]|0;
 $2080 = (($2077) + 4)|0;
 $2081 = $2080;
 $2082 = HEAP32[$2081>>2]|0;
 $2083 = $27;
 $2084 = $2083;
 $2085 = HEAP32[$2084>>2]|0;
 $2086 = (($2083) + 4)|0;
 $2087 = $2086;
 $2088 = HEAP32[$2087>>2]|0;
 $2089 = (___muldi3(($2079|0),($2082|0),($2085|0),($2088|0))|0);
 $2090 = tempRet0;
 $2091 = (_i64Add(($2075|0),($2076|0),($2089|0),($2090|0))|0);
 $2092 = tempRet0;
 $2093 = $15;
 $2094 = $2093;
 $2095 = HEAP32[$2094>>2]|0;
 $2096 = (($2093) + 4)|0;
 $2097 = $2096;
 $2098 = HEAP32[$2097>>2]|0;
 $2099 = $26;
 $2100 = $2099;
 $2101 = HEAP32[$2100>>2]|0;
 $2102 = (($2099) + 4)|0;
 $2103 = $2102;
 $2104 = HEAP32[$2103>>2]|0;
 $2105 = (___muldi3(($2095|0),($2098|0),($2101|0),($2104|0))|0);
 $2106 = tempRet0;
 $2107 = (_i64Add(($2091|0),($2092|0),($2105|0),($2106|0))|0);
 $2108 = tempRet0;
 $2109 = $16;
 $2110 = $2109;
 $2111 = HEAP32[$2110>>2]|0;
 $2112 = (($2109) + 4)|0;
 $2113 = $2112;
 $2114 = HEAP32[$2113>>2]|0;
 $2115 = $25;
 $2116 = $2115;
 $2117 = HEAP32[$2116>>2]|0;
 $2118 = (($2115) + 4)|0;
 $2119 = $2118;
 $2120 = HEAP32[$2119>>2]|0;
 $2121 = (___muldi3(($2111|0),($2114|0),($2117|0),($2120|0))|0);
 $2122 = tempRet0;
 $2123 = (_i64Add(($2107|0),($2108|0),($2121|0),($2122|0))|0);
 $2124 = tempRet0;
 $2125 = $17;
 $2126 = $2125;
 $2127 = HEAP32[$2126>>2]|0;
 $2128 = (($2125) + 4)|0;
 $2129 = $2128;
 $2130 = HEAP32[$2129>>2]|0;
 $2131 = $24;
 $2132 = $2131;
 $2133 = HEAP32[$2132>>2]|0;
 $2134 = (($2131) + 4)|0;
 $2135 = $2134;
 $2136 = HEAP32[$2135>>2]|0;
 $2137 = (___muldi3(($2127|0),($2130|0),($2133|0),($2136|0))|0);
 $2138 = tempRet0;
 $2139 = (_i64Add(($2123|0),($2124|0),($2137|0),($2138|0))|0);
 $2140 = tempRet0;
 $2141 = $18;
 $2142 = $2141;
 $2143 = HEAP32[$2142>>2]|0;
 $2144 = (($2141) + 4)|0;
 $2145 = $2144;
 $2146 = HEAP32[$2145>>2]|0;
 $2147 = $23;
 $2148 = $2147;
 $2149 = HEAP32[$2148>>2]|0;
 $2150 = (($2147) + 4)|0;
 $2151 = $2150;
 $2152 = HEAP32[$2151>>2]|0;
 $2153 = (___muldi3(($2143|0),($2146|0),($2149|0),($2152|0))|0);
 $2154 = tempRet0;
 $2155 = (_i64Add(($2139|0),($2140|0),($2153|0),($2154|0))|0);
 $2156 = tempRet0;
 $2157 = $19;
 $2158 = $2157;
 $2159 = HEAP32[$2158>>2]|0;
 $2160 = (($2157) + 4)|0;
 $2161 = $2160;
 $2162 = HEAP32[$2161>>2]|0;
 $2163 = $22;
 $2164 = $2163;
 $2165 = HEAP32[$2164>>2]|0;
 $2166 = (($2163) + 4)|0;
 $2167 = $2166;
 $2168 = HEAP32[$2167>>2]|0;
 $2169 = (___muldi3(($2159|0),($2162|0),($2165|0),($2168|0))|0);
 $2170 = tempRet0;
 $2171 = (_i64Add(($2155|0),($2156|0),($2169|0),($2170|0))|0);
 $2172 = tempRet0;
 $2173 = $57;
 $2174 = $2173;
 HEAP32[$2174>>2] = $2171;
 $2175 = (($2173) + 4)|0;
 $2176 = $2175;
 HEAP32[$2176>>2] = $2172;
 $2177 = $11;
 $2178 = $2177;
 $2179 = HEAP32[$2178>>2]|0;
 $2180 = (($2177) + 4)|0;
 $2181 = $2180;
 $2182 = HEAP32[$2181>>2]|0;
 $2183 = $31;
 $2184 = $2183;
 $2185 = HEAP32[$2184>>2]|0;
 $2186 = (($2183) + 4)|0;
 $2187 = $2186;
 $2188 = HEAP32[$2187>>2]|0;
 $2189 = (___muldi3(($2179|0),($2182|0),($2185|0),($2188|0))|0);
 $2190 = tempRet0;
 $2191 = $12;
 $2192 = $2191;
 $2193 = HEAP32[$2192>>2]|0;
 $2194 = (($2191) + 4)|0;
 $2195 = $2194;
 $2196 = HEAP32[$2195>>2]|0;
 $2197 = $30;
 $2198 = $2197;
 $2199 = HEAP32[$2198>>2]|0;
 $2200 = (($2197) + 4)|0;
 $2201 = $2200;
 $2202 = HEAP32[$2201>>2]|0;
 $2203 = (___muldi3(($2193|0),($2196|0),($2199|0),($2202|0))|0);
 $2204 = tempRet0;
 $2205 = (_i64Add(($2189|0),($2190|0),($2203|0),($2204|0))|0);
 $2206 = tempRet0;
 $2207 = $13;
 $2208 = $2207;
 $2209 = HEAP32[$2208>>2]|0;
 $2210 = (($2207) + 4)|0;
 $2211 = $2210;
 $2212 = HEAP32[$2211>>2]|0;
 $2213 = $29;
 $2214 = $2213;
 $2215 = HEAP32[$2214>>2]|0;
 $2216 = (($2213) + 4)|0;
 $2217 = $2216;
 $2218 = HEAP32[$2217>>2]|0;
 $2219 = (___muldi3(($2209|0),($2212|0),($2215|0),($2218|0))|0);
 $2220 = tempRet0;
 $2221 = (_i64Add(($2205|0),($2206|0),($2219|0),($2220|0))|0);
 $2222 = tempRet0;
 $2223 = $14;
 $2224 = $2223;
 $2225 = HEAP32[$2224>>2]|0;
 $2226 = (($2223) + 4)|0;
 $2227 = $2226;
 $2228 = HEAP32[$2227>>2]|0;
 $2229 = $28;
 $2230 = $2229;
 $2231 = HEAP32[$2230>>2]|0;
 $2232 = (($2229) + 4)|0;
 $2233 = $2232;
 $2234 = HEAP32[$2233>>2]|0;
 $2235 = (___muldi3(($2225|0),($2228|0),($2231|0),($2234|0))|0);
 $2236 = tempRet0;
 $2237 = (_i64Add(($2221|0),($2222|0),($2235|0),($2236|0))|0);
 $2238 = tempRet0;
 $2239 = $15;
 $2240 = $2239;
 $2241 = HEAP32[$2240>>2]|0;
 $2242 = (($2239) + 4)|0;
 $2243 = $2242;
 $2244 = HEAP32[$2243>>2]|0;
 $2245 = $27;
 $2246 = $2245;
 $2247 = HEAP32[$2246>>2]|0;
 $2248 = (($2245) + 4)|0;
 $2249 = $2248;
 $2250 = HEAP32[$2249>>2]|0;
 $2251 = (___muldi3(($2241|0),($2244|0),($2247|0),($2250|0))|0);
 $2252 = tempRet0;
 $2253 = (_i64Add(($2237|0),($2238|0),($2251|0),($2252|0))|0);
 $2254 = tempRet0;
 $2255 = $16;
 $2256 = $2255;
 $2257 = HEAP32[$2256>>2]|0;
 $2258 = (($2255) + 4)|0;
 $2259 = $2258;
 $2260 = HEAP32[$2259>>2]|0;
 $2261 = $26;
 $2262 = $2261;
 $2263 = HEAP32[$2262>>2]|0;
 $2264 = (($2261) + 4)|0;
 $2265 = $2264;
 $2266 = HEAP32[$2265>>2]|0;
 $2267 = (___muldi3(($2257|0),($2260|0),($2263|0),($2266|0))|0);
 $2268 = tempRet0;
 $2269 = (_i64Add(($2253|0),($2254|0),($2267|0),($2268|0))|0);
 $2270 = tempRet0;
 $2271 = $17;
 $2272 = $2271;
 $2273 = HEAP32[$2272>>2]|0;
 $2274 = (($2271) + 4)|0;
 $2275 = $2274;
 $2276 = HEAP32[$2275>>2]|0;
 $2277 = $25;
 $2278 = $2277;
 $2279 = HEAP32[$2278>>2]|0;
 $2280 = (($2277) + 4)|0;
 $2281 = $2280;
 $2282 = HEAP32[$2281>>2]|0;
 $2283 = (___muldi3(($2273|0),($2276|0),($2279|0),($2282|0))|0);
 $2284 = tempRet0;
 $2285 = (_i64Add(($2269|0),($2270|0),($2283|0),($2284|0))|0);
 $2286 = tempRet0;
 $2287 = $18;
 $2288 = $2287;
 $2289 = HEAP32[$2288>>2]|0;
 $2290 = (($2287) + 4)|0;
 $2291 = $2290;
 $2292 = HEAP32[$2291>>2]|0;
 $2293 = $24;
 $2294 = $2293;
 $2295 = HEAP32[$2294>>2]|0;
 $2296 = (($2293) + 4)|0;
 $2297 = $2296;
 $2298 = HEAP32[$2297>>2]|0;
 $2299 = (___muldi3(($2289|0),($2292|0),($2295|0),($2298|0))|0);
 $2300 = tempRet0;
 $2301 = (_i64Add(($2285|0),($2286|0),($2299|0),($2300|0))|0);
 $2302 = tempRet0;
 $2303 = $19;
 $2304 = $2303;
 $2305 = HEAP32[$2304>>2]|0;
 $2306 = (($2303) + 4)|0;
 $2307 = $2306;
 $2308 = HEAP32[$2307>>2]|0;
 $2309 = $23;
 $2310 = $2309;
 $2311 = HEAP32[$2310>>2]|0;
 $2312 = (($2309) + 4)|0;
 $2313 = $2312;
 $2314 = HEAP32[$2313>>2]|0;
 $2315 = (___muldi3(($2305|0),($2308|0),($2311|0),($2314|0))|0);
 $2316 = tempRet0;
 $2317 = (_i64Add(($2301|0),($2302|0),($2315|0),($2316|0))|0);
 $2318 = tempRet0;
 $2319 = $58;
 $2320 = $2319;
 HEAP32[$2320>>2] = $2317;
 $2321 = (($2319) + 4)|0;
 $2322 = $2321;
 HEAP32[$2322>>2] = $2318;
 $2323 = $12;
 $2324 = $2323;
 $2325 = HEAP32[$2324>>2]|0;
 $2326 = (($2323) + 4)|0;
 $2327 = $2326;
 $2328 = HEAP32[$2327>>2]|0;
 $2329 = $31;
 $2330 = $2329;
 $2331 = HEAP32[$2330>>2]|0;
 $2332 = (($2329) + 4)|0;
 $2333 = $2332;
 $2334 = HEAP32[$2333>>2]|0;
 $2335 = (___muldi3(($2325|0),($2328|0),($2331|0),($2334|0))|0);
 $2336 = tempRet0;
 $2337 = $13;
 $2338 = $2337;
 $2339 = HEAP32[$2338>>2]|0;
 $2340 = (($2337) + 4)|0;
 $2341 = $2340;
 $2342 = HEAP32[$2341>>2]|0;
 $2343 = $30;
 $2344 = $2343;
 $2345 = HEAP32[$2344>>2]|0;
 $2346 = (($2343) + 4)|0;
 $2347 = $2346;
 $2348 = HEAP32[$2347>>2]|0;
 $2349 = (___muldi3(($2339|0),($2342|0),($2345|0),($2348|0))|0);
 $2350 = tempRet0;
 $2351 = (_i64Add(($2335|0),($2336|0),($2349|0),($2350|0))|0);
 $2352 = tempRet0;
 $2353 = $14;
 $2354 = $2353;
 $2355 = HEAP32[$2354>>2]|0;
 $2356 = (($2353) + 4)|0;
 $2357 = $2356;
 $2358 = HEAP32[$2357>>2]|0;
 $2359 = $29;
 $2360 = $2359;
 $2361 = HEAP32[$2360>>2]|0;
 $2362 = (($2359) + 4)|0;
 $2363 = $2362;
 $2364 = HEAP32[$2363>>2]|0;
 $2365 = (___muldi3(($2355|0),($2358|0),($2361|0),($2364|0))|0);
 $2366 = tempRet0;
 $2367 = (_i64Add(($2351|0),($2352|0),($2365|0),($2366|0))|0);
 $2368 = tempRet0;
 $2369 = $15;
 $2370 = $2369;
 $2371 = HEAP32[$2370>>2]|0;
 $2372 = (($2369) + 4)|0;
 $2373 = $2372;
 $2374 = HEAP32[$2373>>2]|0;
 $2375 = $28;
 $2376 = $2375;
 $2377 = HEAP32[$2376>>2]|0;
 $2378 = (($2375) + 4)|0;
 $2379 = $2378;
 $2380 = HEAP32[$2379>>2]|0;
 $2381 = (___muldi3(($2371|0),($2374|0),($2377|0),($2380|0))|0);
 $2382 = tempRet0;
 $2383 = (_i64Add(($2367|0),($2368|0),($2381|0),($2382|0))|0);
 $2384 = tempRet0;
 $2385 = $16;
 $2386 = $2385;
 $2387 = HEAP32[$2386>>2]|0;
 $2388 = (($2385) + 4)|0;
 $2389 = $2388;
 $2390 = HEAP32[$2389>>2]|0;
 $2391 = $27;
 $2392 = $2391;
 $2393 = HEAP32[$2392>>2]|0;
 $2394 = (($2391) + 4)|0;
 $2395 = $2394;
 $2396 = HEAP32[$2395>>2]|0;
 $2397 = (___muldi3(($2387|0),($2390|0),($2393|0),($2396|0))|0);
 $2398 = tempRet0;
 $2399 = (_i64Add(($2383|0),($2384|0),($2397|0),($2398|0))|0);
 $2400 = tempRet0;
 $2401 = $17;
 $2402 = $2401;
 $2403 = HEAP32[$2402>>2]|0;
 $2404 = (($2401) + 4)|0;
 $2405 = $2404;
 $2406 = HEAP32[$2405>>2]|0;
 $2407 = $26;
 $2408 = $2407;
 $2409 = HEAP32[$2408>>2]|0;
 $2410 = (($2407) + 4)|0;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = (___muldi3(($2403|0),($2406|0),($2409|0),($2412|0))|0);
 $2414 = tempRet0;
 $2415 = (_i64Add(($2399|0),($2400|0),($2413|0),($2414|0))|0);
 $2416 = tempRet0;
 $2417 = $18;
 $2418 = $2417;
 $2419 = HEAP32[$2418>>2]|0;
 $2420 = (($2417) + 4)|0;
 $2421 = $2420;
 $2422 = HEAP32[$2421>>2]|0;
 $2423 = $25;
 $2424 = $2423;
 $2425 = HEAP32[$2424>>2]|0;
 $2426 = (($2423) + 4)|0;
 $2427 = $2426;
 $2428 = HEAP32[$2427>>2]|0;
 $2429 = (___muldi3(($2419|0),($2422|0),($2425|0),($2428|0))|0);
 $2430 = tempRet0;
 $2431 = (_i64Add(($2415|0),($2416|0),($2429|0),($2430|0))|0);
 $2432 = tempRet0;
 $2433 = $19;
 $2434 = $2433;
 $2435 = HEAP32[$2434>>2]|0;
 $2436 = (($2433) + 4)|0;
 $2437 = $2436;
 $2438 = HEAP32[$2437>>2]|0;
 $2439 = $24;
 $2440 = $2439;
 $2441 = HEAP32[$2440>>2]|0;
 $2442 = (($2439) + 4)|0;
 $2443 = $2442;
 $2444 = HEAP32[$2443>>2]|0;
 $2445 = (___muldi3(($2435|0),($2438|0),($2441|0),($2444|0))|0);
 $2446 = tempRet0;
 $2447 = (_i64Add(($2431|0),($2432|0),($2445|0),($2446|0))|0);
 $2448 = tempRet0;
 $2449 = $59;
 $2450 = $2449;
 HEAP32[$2450>>2] = $2447;
 $2451 = (($2449) + 4)|0;
 $2452 = $2451;
 HEAP32[$2452>>2] = $2448;
 $2453 = $13;
 $2454 = $2453;
 $2455 = HEAP32[$2454>>2]|0;
 $2456 = (($2453) + 4)|0;
 $2457 = $2456;
 $2458 = HEAP32[$2457>>2]|0;
 $2459 = $31;
 $2460 = $2459;
 $2461 = HEAP32[$2460>>2]|0;
 $2462 = (($2459) + 4)|0;
 $2463 = $2462;
 $2464 = HEAP32[$2463>>2]|0;
 $2465 = (___muldi3(($2455|0),($2458|0),($2461|0),($2464|0))|0);
 $2466 = tempRet0;
 $2467 = $14;
 $2468 = $2467;
 $2469 = HEAP32[$2468>>2]|0;
 $2470 = (($2467) + 4)|0;
 $2471 = $2470;
 $2472 = HEAP32[$2471>>2]|0;
 $2473 = $30;
 $2474 = $2473;
 $2475 = HEAP32[$2474>>2]|0;
 $2476 = (($2473) + 4)|0;
 $2477 = $2476;
 $2478 = HEAP32[$2477>>2]|0;
 $2479 = (___muldi3(($2469|0),($2472|0),($2475|0),($2478|0))|0);
 $2480 = tempRet0;
 $2481 = (_i64Add(($2465|0),($2466|0),($2479|0),($2480|0))|0);
 $2482 = tempRet0;
 $2483 = $15;
 $2484 = $2483;
 $2485 = HEAP32[$2484>>2]|0;
 $2486 = (($2483) + 4)|0;
 $2487 = $2486;
 $2488 = HEAP32[$2487>>2]|0;
 $2489 = $29;
 $2490 = $2489;
 $2491 = HEAP32[$2490>>2]|0;
 $2492 = (($2489) + 4)|0;
 $2493 = $2492;
 $2494 = HEAP32[$2493>>2]|0;
 $2495 = (___muldi3(($2485|0),($2488|0),($2491|0),($2494|0))|0);
 $2496 = tempRet0;
 $2497 = (_i64Add(($2481|0),($2482|0),($2495|0),($2496|0))|0);
 $2498 = tempRet0;
 $2499 = $16;
 $2500 = $2499;
 $2501 = HEAP32[$2500>>2]|0;
 $2502 = (($2499) + 4)|0;
 $2503 = $2502;
 $2504 = HEAP32[$2503>>2]|0;
 $2505 = $28;
 $2506 = $2505;
 $2507 = HEAP32[$2506>>2]|0;
 $2508 = (($2505) + 4)|0;
 $2509 = $2508;
 $2510 = HEAP32[$2509>>2]|0;
 $2511 = (___muldi3(($2501|0),($2504|0),($2507|0),($2510|0))|0);
 $2512 = tempRet0;
 $2513 = (_i64Add(($2497|0),($2498|0),($2511|0),($2512|0))|0);
 $2514 = tempRet0;
 $2515 = $17;
 $2516 = $2515;
 $2517 = HEAP32[$2516>>2]|0;
 $2518 = (($2515) + 4)|0;
 $2519 = $2518;
 $2520 = HEAP32[$2519>>2]|0;
 $2521 = $27;
 $2522 = $2521;
 $2523 = HEAP32[$2522>>2]|0;
 $2524 = (($2521) + 4)|0;
 $2525 = $2524;
 $2526 = HEAP32[$2525>>2]|0;
 $2527 = (___muldi3(($2517|0),($2520|0),($2523|0),($2526|0))|0);
 $2528 = tempRet0;
 $2529 = (_i64Add(($2513|0),($2514|0),($2527|0),($2528|0))|0);
 $2530 = tempRet0;
 $2531 = $18;
 $2532 = $2531;
 $2533 = HEAP32[$2532>>2]|0;
 $2534 = (($2531) + 4)|0;
 $2535 = $2534;
 $2536 = HEAP32[$2535>>2]|0;
 $2537 = $26;
 $2538 = $2537;
 $2539 = HEAP32[$2538>>2]|0;
 $2540 = (($2537) + 4)|0;
 $2541 = $2540;
 $2542 = HEAP32[$2541>>2]|0;
 $2543 = (___muldi3(($2533|0),($2536|0),($2539|0),($2542|0))|0);
 $2544 = tempRet0;
 $2545 = (_i64Add(($2529|0),($2530|0),($2543|0),($2544|0))|0);
 $2546 = tempRet0;
 $2547 = $19;
 $2548 = $2547;
 $2549 = HEAP32[$2548>>2]|0;
 $2550 = (($2547) + 4)|0;
 $2551 = $2550;
 $2552 = HEAP32[$2551>>2]|0;
 $2553 = $25;
 $2554 = $2553;
 $2555 = HEAP32[$2554>>2]|0;
 $2556 = (($2553) + 4)|0;
 $2557 = $2556;
 $2558 = HEAP32[$2557>>2]|0;
 $2559 = (___muldi3(($2549|0),($2552|0),($2555|0),($2558|0))|0);
 $2560 = tempRet0;
 $2561 = (_i64Add(($2545|0),($2546|0),($2559|0),($2560|0))|0);
 $2562 = tempRet0;
 $2563 = $60;
 $2564 = $2563;
 HEAP32[$2564>>2] = $2561;
 $2565 = (($2563) + 4)|0;
 $2566 = $2565;
 HEAP32[$2566>>2] = $2562;
 $2567 = $14;
 $2568 = $2567;
 $2569 = HEAP32[$2568>>2]|0;
 $2570 = (($2567) + 4)|0;
 $2571 = $2570;
 $2572 = HEAP32[$2571>>2]|0;
 $2573 = $31;
 $2574 = $2573;
 $2575 = HEAP32[$2574>>2]|0;
 $2576 = (($2573) + 4)|0;
 $2577 = $2576;
 $2578 = HEAP32[$2577>>2]|0;
 $2579 = (___muldi3(($2569|0),($2572|0),($2575|0),($2578|0))|0);
 $2580 = tempRet0;
 $2581 = $15;
 $2582 = $2581;
 $2583 = HEAP32[$2582>>2]|0;
 $2584 = (($2581) + 4)|0;
 $2585 = $2584;
 $2586 = HEAP32[$2585>>2]|0;
 $2587 = $30;
 $2588 = $2587;
 $2589 = HEAP32[$2588>>2]|0;
 $2590 = (($2587) + 4)|0;
 $2591 = $2590;
 $2592 = HEAP32[$2591>>2]|0;
 $2593 = (___muldi3(($2583|0),($2586|0),($2589|0),($2592|0))|0);
 $2594 = tempRet0;
 $2595 = (_i64Add(($2579|0),($2580|0),($2593|0),($2594|0))|0);
 $2596 = tempRet0;
 $2597 = $16;
 $2598 = $2597;
 $2599 = HEAP32[$2598>>2]|0;
 $2600 = (($2597) + 4)|0;
 $2601 = $2600;
 $2602 = HEAP32[$2601>>2]|0;
 $2603 = $29;
 $2604 = $2603;
 $2605 = HEAP32[$2604>>2]|0;
 $2606 = (($2603) + 4)|0;
 $2607 = $2606;
 $2608 = HEAP32[$2607>>2]|0;
 $2609 = (___muldi3(($2599|0),($2602|0),($2605|0),($2608|0))|0);
 $2610 = tempRet0;
 $2611 = (_i64Add(($2595|0),($2596|0),($2609|0),($2610|0))|0);
 $2612 = tempRet0;
 $2613 = $17;
 $2614 = $2613;
 $2615 = HEAP32[$2614>>2]|0;
 $2616 = (($2613) + 4)|0;
 $2617 = $2616;
 $2618 = HEAP32[$2617>>2]|0;
 $2619 = $28;
 $2620 = $2619;
 $2621 = HEAP32[$2620>>2]|0;
 $2622 = (($2619) + 4)|0;
 $2623 = $2622;
 $2624 = HEAP32[$2623>>2]|0;
 $2625 = (___muldi3(($2615|0),($2618|0),($2621|0),($2624|0))|0);
 $2626 = tempRet0;
 $2627 = (_i64Add(($2611|0),($2612|0),($2625|0),($2626|0))|0);
 $2628 = tempRet0;
 $2629 = $18;
 $2630 = $2629;
 $2631 = HEAP32[$2630>>2]|0;
 $2632 = (($2629) + 4)|0;
 $2633 = $2632;
 $2634 = HEAP32[$2633>>2]|0;
 $2635 = $27;
 $2636 = $2635;
 $2637 = HEAP32[$2636>>2]|0;
 $2638 = (($2635) + 4)|0;
 $2639 = $2638;
 $2640 = HEAP32[$2639>>2]|0;
 $2641 = (___muldi3(($2631|0),($2634|0),($2637|0),($2640|0))|0);
 $2642 = tempRet0;
 $2643 = (_i64Add(($2627|0),($2628|0),($2641|0),($2642|0))|0);
 $2644 = tempRet0;
 $2645 = $19;
 $2646 = $2645;
 $2647 = HEAP32[$2646>>2]|0;
 $2648 = (($2645) + 4)|0;
 $2649 = $2648;
 $2650 = HEAP32[$2649>>2]|0;
 $2651 = $26;
 $2652 = $2651;
 $2653 = HEAP32[$2652>>2]|0;
 $2654 = (($2651) + 4)|0;
 $2655 = $2654;
 $2656 = HEAP32[$2655>>2]|0;
 $2657 = (___muldi3(($2647|0),($2650|0),($2653|0),($2656|0))|0);
 $2658 = tempRet0;
 $2659 = (_i64Add(($2643|0),($2644|0),($2657|0),($2658|0))|0);
 $2660 = tempRet0;
 $2661 = $61;
 $2662 = $2661;
 HEAP32[$2662>>2] = $2659;
 $2663 = (($2661) + 4)|0;
 $2664 = $2663;
 HEAP32[$2664>>2] = $2660;
 $2665 = $15;
 $2666 = $2665;
 $2667 = HEAP32[$2666>>2]|0;
 $2668 = (($2665) + 4)|0;
 $2669 = $2668;
 $2670 = HEAP32[$2669>>2]|0;
 $2671 = $31;
 $2672 = $2671;
 $2673 = HEAP32[$2672>>2]|0;
 $2674 = (($2671) + 4)|0;
 $2675 = $2674;
 $2676 = HEAP32[$2675>>2]|0;
 $2677 = (___muldi3(($2667|0),($2670|0),($2673|0),($2676|0))|0);
 $2678 = tempRet0;
 $2679 = $16;
 $2680 = $2679;
 $2681 = HEAP32[$2680>>2]|0;
 $2682 = (($2679) + 4)|0;
 $2683 = $2682;
 $2684 = HEAP32[$2683>>2]|0;
 $2685 = $30;
 $2686 = $2685;
 $2687 = HEAP32[$2686>>2]|0;
 $2688 = (($2685) + 4)|0;
 $2689 = $2688;
 $2690 = HEAP32[$2689>>2]|0;
 $2691 = (___muldi3(($2681|0),($2684|0),($2687|0),($2690|0))|0);
 $2692 = tempRet0;
 $2693 = (_i64Add(($2677|0),($2678|0),($2691|0),($2692|0))|0);
 $2694 = tempRet0;
 $2695 = $17;
 $2696 = $2695;
 $2697 = HEAP32[$2696>>2]|0;
 $2698 = (($2695) + 4)|0;
 $2699 = $2698;
 $2700 = HEAP32[$2699>>2]|0;
 $2701 = $29;
 $2702 = $2701;
 $2703 = HEAP32[$2702>>2]|0;
 $2704 = (($2701) + 4)|0;
 $2705 = $2704;
 $2706 = HEAP32[$2705>>2]|0;
 $2707 = (___muldi3(($2697|0),($2700|0),($2703|0),($2706|0))|0);
 $2708 = tempRet0;
 $2709 = (_i64Add(($2693|0),($2694|0),($2707|0),($2708|0))|0);
 $2710 = tempRet0;
 $2711 = $18;
 $2712 = $2711;
 $2713 = HEAP32[$2712>>2]|0;
 $2714 = (($2711) + 4)|0;
 $2715 = $2714;
 $2716 = HEAP32[$2715>>2]|0;
 $2717 = $28;
 $2718 = $2717;
 $2719 = HEAP32[$2718>>2]|0;
 $2720 = (($2717) + 4)|0;
 $2721 = $2720;
 $2722 = HEAP32[$2721>>2]|0;
 $2723 = (___muldi3(($2713|0),($2716|0),($2719|0),($2722|0))|0);
 $2724 = tempRet0;
 $2725 = (_i64Add(($2709|0),($2710|0),($2723|0),($2724|0))|0);
 $2726 = tempRet0;
 $2727 = $19;
 $2728 = $2727;
 $2729 = HEAP32[$2728>>2]|0;
 $2730 = (($2727) + 4)|0;
 $2731 = $2730;
 $2732 = HEAP32[$2731>>2]|0;
 $2733 = $27;
 $2734 = $2733;
 $2735 = HEAP32[$2734>>2]|0;
 $2736 = (($2733) + 4)|0;
 $2737 = $2736;
 $2738 = HEAP32[$2737>>2]|0;
 $2739 = (___muldi3(($2729|0),($2732|0),($2735|0),($2738|0))|0);
 $2740 = tempRet0;
 $2741 = (_i64Add(($2725|0),($2726|0),($2739|0),($2740|0))|0);
 $2742 = tempRet0;
 $2743 = $62;
 $2744 = $2743;
 HEAP32[$2744>>2] = $2741;
 $2745 = (($2743) + 4)|0;
 $2746 = $2745;
 HEAP32[$2746>>2] = $2742;
 $2747 = $16;
 $2748 = $2747;
 $2749 = HEAP32[$2748>>2]|0;
 $2750 = (($2747) + 4)|0;
 $2751 = $2750;
 $2752 = HEAP32[$2751>>2]|0;
 $2753 = $31;
 $2754 = $2753;
 $2755 = HEAP32[$2754>>2]|0;
 $2756 = (($2753) + 4)|0;
 $2757 = $2756;
 $2758 = HEAP32[$2757>>2]|0;
 $2759 = (___muldi3(($2749|0),($2752|0),($2755|0),($2758|0))|0);
 $2760 = tempRet0;
 $2761 = $17;
 $2762 = $2761;
 $2763 = HEAP32[$2762>>2]|0;
 $2764 = (($2761) + 4)|0;
 $2765 = $2764;
 $2766 = HEAP32[$2765>>2]|0;
 $2767 = $30;
 $2768 = $2767;
 $2769 = HEAP32[$2768>>2]|0;
 $2770 = (($2767) + 4)|0;
 $2771 = $2770;
 $2772 = HEAP32[$2771>>2]|0;
 $2773 = (___muldi3(($2763|0),($2766|0),($2769|0),($2772|0))|0);
 $2774 = tempRet0;
 $2775 = (_i64Add(($2759|0),($2760|0),($2773|0),($2774|0))|0);
 $2776 = tempRet0;
 $2777 = $18;
 $2778 = $2777;
 $2779 = HEAP32[$2778>>2]|0;
 $2780 = (($2777) + 4)|0;
 $2781 = $2780;
 $2782 = HEAP32[$2781>>2]|0;
 $2783 = $29;
 $2784 = $2783;
 $2785 = HEAP32[$2784>>2]|0;
 $2786 = (($2783) + 4)|0;
 $2787 = $2786;
 $2788 = HEAP32[$2787>>2]|0;
 $2789 = (___muldi3(($2779|0),($2782|0),($2785|0),($2788|0))|0);
 $2790 = tempRet0;
 $2791 = (_i64Add(($2775|0),($2776|0),($2789|0),($2790|0))|0);
 $2792 = tempRet0;
 $2793 = $19;
 $2794 = $2793;
 $2795 = HEAP32[$2794>>2]|0;
 $2796 = (($2793) + 4)|0;
 $2797 = $2796;
 $2798 = HEAP32[$2797>>2]|0;
 $2799 = $28;
 $2800 = $2799;
 $2801 = HEAP32[$2800>>2]|0;
 $2802 = (($2799) + 4)|0;
 $2803 = $2802;
 $2804 = HEAP32[$2803>>2]|0;
 $2805 = (___muldi3(($2795|0),($2798|0),($2801|0),($2804|0))|0);
 $2806 = tempRet0;
 $2807 = (_i64Add(($2791|0),($2792|0),($2805|0),($2806|0))|0);
 $2808 = tempRet0;
 $2809 = $63;
 $2810 = $2809;
 HEAP32[$2810>>2] = $2807;
 $2811 = (($2809) + 4)|0;
 $2812 = $2811;
 HEAP32[$2812>>2] = $2808;
 $2813 = $17;
 $2814 = $2813;
 $2815 = HEAP32[$2814>>2]|0;
 $2816 = (($2813) + 4)|0;
 $2817 = $2816;
 $2818 = HEAP32[$2817>>2]|0;
 $2819 = $31;
 $2820 = $2819;
 $2821 = HEAP32[$2820>>2]|0;
 $2822 = (($2819) + 4)|0;
 $2823 = $2822;
 $2824 = HEAP32[$2823>>2]|0;
 $2825 = (___muldi3(($2815|0),($2818|0),($2821|0),($2824|0))|0);
 $2826 = tempRet0;
 $2827 = $18;
 $2828 = $2827;
 $2829 = HEAP32[$2828>>2]|0;
 $2830 = (($2827) + 4)|0;
 $2831 = $2830;
 $2832 = HEAP32[$2831>>2]|0;
 $2833 = $30;
 $2834 = $2833;
 $2835 = HEAP32[$2834>>2]|0;
 $2836 = (($2833) + 4)|0;
 $2837 = $2836;
 $2838 = HEAP32[$2837>>2]|0;
 $2839 = (___muldi3(($2829|0),($2832|0),($2835|0),($2838|0))|0);
 $2840 = tempRet0;
 $2841 = (_i64Add(($2825|0),($2826|0),($2839|0),($2840|0))|0);
 $2842 = tempRet0;
 $2843 = $19;
 $2844 = $2843;
 $2845 = HEAP32[$2844>>2]|0;
 $2846 = (($2843) + 4)|0;
 $2847 = $2846;
 $2848 = HEAP32[$2847>>2]|0;
 $2849 = $29;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = (___muldi3(($2845|0),($2848|0),($2851|0),($2854|0))|0);
 $2856 = tempRet0;
 $2857 = (_i64Add(($2841|0),($2842|0),($2855|0),($2856|0))|0);
 $2858 = tempRet0;
 $2859 = $64;
 $2860 = $2859;
 HEAP32[$2860>>2] = $2857;
 $2861 = (($2859) + 4)|0;
 $2862 = $2861;
 HEAP32[$2862>>2] = $2858;
 $2863 = $18;
 $2864 = $2863;
 $2865 = HEAP32[$2864>>2]|0;
 $2866 = (($2863) + 4)|0;
 $2867 = $2866;
 $2868 = HEAP32[$2867>>2]|0;
 $2869 = $31;
 $2870 = $2869;
 $2871 = HEAP32[$2870>>2]|0;
 $2872 = (($2869) + 4)|0;
 $2873 = $2872;
 $2874 = HEAP32[$2873>>2]|0;
 $2875 = (___muldi3(($2865|0),($2868|0),($2871|0),($2874|0))|0);
 $2876 = tempRet0;
 $2877 = $19;
 $2878 = $2877;
 $2879 = HEAP32[$2878>>2]|0;
 $2880 = (($2877) + 4)|0;
 $2881 = $2880;
 $2882 = HEAP32[$2881>>2]|0;
 $2883 = $30;
 $2884 = $2883;
 $2885 = HEAP32[$2884>>2]|0;
 $2886 = (($2883) + 4)|0;
 $2887 = $2886;
 $2888 = HEAP32[$2887>>2]|0;
 $2889 = (___muldi3(($2879|0),($2882|0),($2885|0),($2888|0))|0);
 $2890 = tempRet0;
 $2891 = (_i64Add(($2875|0),($2876|0),($2889|0),($2890|0))|0);
 $2892 = tempRet0;
 $2893 = $65;
 $2894 = $2893;
 HEAP32[$2894>>2] = $2891;
 $2895 = (($2893) + 4)|0;
 $2896 = $2895;
 HEAP32[$2896>>2] = $2892;
 $2897 = $19;
 $2898 = $2897;
 $2899 = HEAP32[$2898>>2]|0;
 $2900 = (($2897) + 4)|0;
 $2901 = $2900;
 $2902 = HEAP32[$2901>>2]|0;
 $2903 = $31;
 $2904 = $2903;
 $2905 = HEAP32[$2904>>2]|0;
 $2906 = (($2903) + 4)|0;
 $2907 = $2906;
 $2908 = HEAP32[$2907>>2]|0;
 $2909 = (___muldi3(($2899|0),($2902|0),($2905|0),($2908|0))|0);
 $2910 = tempRet0;
 $2911 = $66;
 $2912 = $2911;
 HEAP32[$2912>>2] = $2909;
 $2913 = (($2911) + 4)|0;
 $2914 = $2913;
 HEAP32[$2914>>2] = $2910;
 $2915 = $67;
 $2916 = $2915;
 HEAP32[$2916>>2] = 0;
 $2917 = (($2915) + 4)|0;
 $2918 = $2917;
 HEAP32[$2918>>2] = 0;
 $2919 = $44;
 $2920 = $2919;
 $2921 = HEAP32[$2920>>2]|0;
 $2922 = (($2919) + 4)|0;
 $2923 = $2922;
 $2924 = HEAP32[$2923>>2]|0;
 $2925 = (_i64Add(($2921|0),($2924|0),1048576,0)|0);
 $2926 = tempRet0;
 $2927 = (_bitshift64Ashr(($2925|0),($2926|0),21)|0);
 $2928 = tempRet0;
 $2929 = $68;
 $2930 = $2929;
 HEAP32[$2930>>2] = $2927;
 $2931 = (($2929) + 4)|0;
 $2932 = $2931;
 HEAP32[$2932>>2] = $2928;
 $2933 = $68;
 $2934 = $2933;
 $2935 = HEAP32[$2934>>2]|0;
 $2936 = (($2933) + 4)|0;
 $2937 = $2936;
 $2938 = HEAP32[$2937>>2]|0;
 $2939 = $45;
 $2940 = $2939;
 $2941 = HEAP32[$2940>>2]|0;
 $2942 = (($2939) + 4)|0;
 $2943 = $2942;
 $2944 = HEAP32[$2943>>2]|0;
 $2945 = (_i64Add(($2941|0),($2944|0),($2935|0),($2938|0))|0);
 $2946 = tempRet0;
 $2947 = $45;
 $2948 = $2947;
 HEAP32[$2948>>2] = $2945;
 $2949 = (($2947) + 4)|0;
 $2950 = $2949;
 HEAP32[$2950>>2] = $2946;
 $2951 = $68;
 $2952 = $2951;
 $2953 = HEAP32[$2952>>2]|0;
 $2954 = (($2951) + 4)|0;
 $2955 = $2954;
 $2956 = HEAP32[$2955>>2]|0;
 $2957 = (_bitshift64Shl(($2953|0),($2956|0),21)|0);
 $2958 = tempRet0;
 $2959 = $44;
 $2960 = $2959;
 $2961 = HEAP32[$2960>>2]|0;
 $2962 = (($2959) + 4)|0;
 $2963 = $2962;
 $2964 = HEAP32[$2963>>2]|0;
 $2965 = (_i64Subtract(($2961|0),($2964|0),($2957|0),($2958|0))|0);
 $2966 = tempRet0;
 $2967 = $44;
 $2968 = $2967;
 HEAP32[$2968>>2] = $2965;
 $2969 = (($2967) + 4)|0;
 $2970 = $2969;
 HEAP32[$2970>>2] = $2966;
 $2971 = $46;
 $2972 = $2971;
 $2973 = HEAP32[$2972>>2]|0;
 $2974 = (($2971) + 4)|0;
 $2975 = $2974;
 $2976 = HEAP32[$2975>>2]|0;
 $2977 = (_i64Add(($2973|0),($2976|0),1048576,0)|0);
 $2978 = tempRet0;
 $2979 = (_bitshift64Ashr(($2977|0),($2978|0),21)|0);
 $2980 = tempRet0;
 $2981 = $70;
 $2982 = $2981;
 HEAP32[$2982>>2] = $2979;
 $2983 = (($2981) + 4)|0;
 $2984 = $2983;
 HEAP32[$2984>>2] = $2980;
 $2985 = $70;
 $2986 = $2985;
 $2987 = HEAP32[$2986>>2]|0;
 $2988 = (($2985) + 4)|0;
 $2989 = $2988;
 $2990 = HEAP32[$2989>>2]|0;
 $2991 = $47;
 $2992 = $2991;
 $2993 = HEAP32[$2992>>2]|0;
 $2994 = (($2991) + 4)|0;
 $2995 = $2994;
 $2996 = HEAP32[$2995>>2]|0;
 $2997 = (_i64Add(($2993|0),($2996|0),($2987|0),($2990|0))|0);
 $2998 = tempRet0;
 $2999 = $47;
 $3000 = $2999;
 HEAP32[$3000>>2] = $2997;
 $3001 = (($2999) + 4)|0;
 $3002 = $3001;
 HEAP32[$3002>>2] = $2998;
 $3003 = $70;
 $3004 = $3003;
 $3005 = HEAP32[$3004>>2]|0;
 $3006 = (($3003) + 4)|0;
 $3007 = $3006;
 $3008 = HEAP32[$3007>>2]|0;
 $3009 = (_bitshift64Shl(($3005|0),($3008|0),21)|0);
 $3010 = tempRet0;
 $3011 = $46;
 $3012 = $3011;
 $3013 = HEAP32[$3012>>2]|0;
 $3014 = (($3011) + 4)|0;
 $3015 = $3014;
 $3016 = HEAP32[$3015>>2]|0;
 $3017 = (_i64Subtract(($3013|0),($3016|0),($3009|0),($3010|0))|0);
 $3018 = tempRet0;
 $3019 = $46;
 $3020 = $3019;
 HEAP32[$3020>>2] = $3017;
 $3021 = (($3019) + 4)|0;
 $3022 = $3021;
 HEAP32[$3022>>2] = $3018;
 $3023 = $48;
 $3024 = $3023;
 $3025 = HEAP32[$3024>>2]|0;
 $3026 = (($3023) + 4)|0;
 $3027 = $3026;
 $3028 = HEAP32[$3027>>2]|0;
 $3029 = (_i64Add(($3025|0),($3028|0),1048576,0)|0);
 $3030 = tempRet0;
 $3031 = (_bitshift64Ashr(($3029|0),($3030|0),21)|0);
 $3032 = tempRet0;
 $3033 = $72;
 $3034 = $3033;
 HEAP32[$3034>>2] = $3031;
 $3035 = (($3033) + 4)|0;
 $3036 = $3035;
 HEAP32[$3036>>2] = $3032;
 $3037 = $72;
 $3038 = $3037;
 $3039 = HEAP32[$3038>>2]|0;
 $3040 = (($3037) + 4)|0;
 $3041 = $3040;
 $3042 = HEAP32[$3041>>2]|0;
 $3043 = $49;
 $3044 = $3043;
 $3045 = HEAP32[$3044>>2]|0;
 $3046 = (($3043) + 4)|0;
 $3047 = $3046;
 $3048 = HEAP32[$3047>>2]|0;
 $3049 = (_i64Add(($3045|0),($3048|0),($3039|0),($3042|0))|0);
 $3050 = tempRet0;
 $3051 = $49;
 $3052 = $3051;
 HEAP32[$3052>>2] = $3049;
 $3053 = (($3051) + 4)|0;
 $3054 = $3053;
 HEAP32[$3054>>2] = $3050;
 $3055 = $72;
 $3056 = $3055;
 $3057 = HEAP32[$3056>>2]|0;
 $3058 = (($3055) + 4)|0;
 $3059 = $3058;
 $3060 = HEAP32[$3059>>2]|0;
 $3061 = (_bitshift64Shl(($3057|0),($3060|0),21)|0);
 $3062 = tempRet0;
 $3063 = $48;
 $3064 = $3063;
 $3065 = HEAP32[$3064>>2]|0;
 $3066 = (($3063) + 4)|0;
 $3067 = $3066;
 $3068 = HEAP32[$3067>>2]|0;
 $3069 = (_i64Subtract(($3065|0),($3068|0),($3061|0),($3062|0))|0);
 $3070 = tempRet0;
 $3071 = $48;
 $3072 = $3071;
 HEAP32[$3072>>2] = $3069;
 $3073 = (($3071) + 4)|0;
 $3074 = $3073;
 HEAP32[$3074>>2] = $3070;
 $3075 = $50;
 $3076 = $3075;
 $3077 = HEAP32[$3076>>2]|0;
 $3078 = (($3075) + 4)|0;
 $3079 = $3078;
 $3080 = HEAP32[$3079>>2]|0;
 $3081 = (_i64Add(($3077|0),($3080|0),1048576,0)|0);
 $3082 = tempRet0;
 $3083 = (_bitshift64Ashr(($3081|0),($3082|0),21)|0);
 $3084 = tempRet0;
 $3085 = $74;
 $3086 = $3085;
 HEAP32[$3086>>2] = $3083;
 $3087 = (($3085) + 4)|0;
 $3088 = $3087;
 HEAP32[$3088>>2] = $3084;
 $3089 = $74;
 $3090 = $3089;
 $3091 = HEAP32[$3090>>2]|0;
 $3092 = (($3089) + 4)|0;
 $3093 = $3092;
 $3094 = HEAP32[$3093>>2]|0;
 $3095 = $51;
 $3096 = $3095;
 $3097 = HEAP32[$3096>>2]|0;
 $3098 = (($3095) + 4)|0;
 $3099 = $3098;
 $3100 = HEAP32[$3099>>2]|0;
 $3101 = (_i64Add(($3097|0),($3100|0),($3091|0),($3094|0))|0);
 $3102 = tempRet0;
 $3103 = $51;
 $3104 = $3103;
 HEAP32[$3104>>2] = $3101;
 $3105 = (($3103) + 4)|0;
 $3106 = $3105;
 HEAP32[$3106>>2] = $3102;
 $3107 = $74;
 $3108 = $3107;
 $3109 = HEAP32[$3108>>2]|0;
 $3110 = (($3107) + 4)|0;
 $3111 = $3110;
 $3112 = HEAP32[$3111>>2]|0;
 $3113 = (_bitshift64Shl(($3109|0),($3112|0),21)|0);
 $3114 = tempRet0;
 $3115 = $50;
 $3116 = $3115;
 $3117 = HEAP32[$3116>>2]|0;
 $3118 = (($3115) + 4)|0;
 $3119 = $3118;
 $3120 = HEAP32[$3119>>2]|0;
 $3121 = (_i64Subtract(($3117|0),($3120|0),($3113|0),($3114|0))|0);
 $3122 = tempRet0;
 $3123 = $50;
 $3124 = $3123;
 HEAP32[$3124>>2] = $3121;
 $3125 = (($3123) + 4)|0;
 $3126 = $3125;
 HEAP32[$3126>>2] = $3122;
 $3127 = $52;
 $3128 = $3127;
 $3129 = HEAP32[$3128>>2]|0;
 $3130 = (($3127) + 4)|0;
 $3131 = $3130;
 $3132 = HEAP32[$3131>>2]|0;
 $3133 = (_i64Add(($3129|0),($3132|0),1048576,0)|0);
 $3134 = tempRet0;
 $3135 = (_bitshift64Ashr(($3133|0),($3134|0),21)|0);
 $3136 = tempRet0;
 $3137 = $76;
 $3138 = $3137;
 HEAP32[$3138>>2] = $3135;
 $3139 = (($3137) + 4)|0;
 $3140 = $3139;
 HEAP32[$3140>>2] = $3136;
 $3141 = $76;
 $3142 = $3141;
 $3143 = HEAP32[$3142>>2]|0;
 $3144 = (($3141) + 4)|0;
 $3145 = $3144;
 $3146 = HEAP32[$3145>>2]|0;
 $3147 = $53;
 $3148 = $3147;
 $3149 = HEAP32[$3148>>2]|0;
 $3150 = (($3147) + 4)|0;
 $3151 = $3150;
 $3152 = HEAP32[$3151>>2]|0;
 $3153 = (_i64Add(($3149|0),($3152|0),($3143|0),($3146|0))|0);
 $3154 = tempRet0;
 $3155 = $53;
 $3156 = $3155;
 HEAP32[$3156>>2] = $3153;
 $3157 = (($3155) + 4)|0;
 $3158 = $3157;
 HEAP32[$3158>>2] = $3154;
 $3159 = $76;
 $3160 = $3159;
 $3161 = HEAP32[$3160>>2]|0;
 $3162 = (($3159) + 4)|0;
 $3163 = $3162;
 $3164 = HEAP32[$3163>>2]|0;
 $3165 = (_bitshift64Shl(($3161|0),($3164|0),21)|0);
 $3166 = tempRet0;
 $3167 = $52;
 $3168 = $3167;
 $3169 = HEAP32[$3168>>2]|0;
 $3170 = (($3167) + 4)|0;
 $3171 = $3170;
 $3172 = HEAP32[$3171>>2]|0;
 $3173 = (_i64Subtract(($3169|0),($3172|0),($3165|0),($3166|0))|0);
 $3174 = tempRet0;
 $3175 = $52;
 $3176 = $3175;
 HEAP32[$3176>>2] = $3173;
 $3177 = (($3175) + 4)|0;
 $3178 = $3177;
 HEAP32[$3178>>2] = $3174;
 $3179 = $54;
 $3180 = $3179;
 $3181 = HEAP32[$3180>>2]|0;
 $3182 = (($3179) + 4)|0;
 $3183 = $3182;
 $3184 = HEAP32[$3183>>2]|0;
 $3185 = (_i64Add(($3181|0),($3184|0),1048576,0)|0);
 $3186 = tempRet0;
 $3187 = (_bitshift64Ashr(($3185|0),($3186|0),21)|0);
 $3188 = tempRet0;
 $3189 = $78;
 $3190 = $3189;
 HEAP32[$3190>>2] = $3187;
 $3191 = (($3189) + 4)|0;
 $3192 = $3191;
 HEAP32[$3192>>2] = $3188;
 $3193 = $78;
 $3194 = $3193;
 $3195 = HEAP32[$3194>>2]|0;
 $3196 = (($3193) + 4)|0;
 $3197 = $3196;
 $3198 = HEAP32[$3197>>2]|0;
 $3199 = $55;
 $3200 = $3199;
 $3201 = HEAP32[$3200>>2]|0;
 $3202 = (($3199) + 4)|0;
 $3203 = $3202;
 $3204 = HEAP32[$3203>>2]|0;
 $3205 = (_i64Add(($3201|0),($3204|0),($3195|0),($3198|0))|0);
 $3206 = tempRet0;
 $3207 = $55;
 $3208 = $3207;
 HEAP32[$3208>>2] = $3205;
 $3209 = (($3207) + 4)|0;
 $3210 = $3209;
 HEAP32[$3210>>2] = $3206;
 $3211 = $78;
 $3212 = $3211;
 $3213 = HEAP32[$3212>>2]|0;
 $3214 = (($3211) + 4)|0;
 $3215 = $3214;
 $3216 = HEAP32[$3215>>2]|0;
 $3217 = (_bitshift64Shl(($3213|0),($3216|0),21)|0);
 $3218 = tempRet0;
 $3219 = $54;
 $3220 = $3219;
 $3221 = HEAP32[$3220>>2]|0;
 $3222 = (($3219) + 4)|0;
 $3223 = $3222;
 $3224 = HEAP32[$3223>>2]|0;
 $3225 = (_i64Subtract(($3221|0),($3224|0),($3217|0),($3218|0))|0);
 $3226 = tempRet0;
 $3227 = $54;
 $3228 = $3227;
 HEAP32[$3228>>2] = $3225;
 $3229 = (($3227) + 4)|0;
 $3230 = $3229;
 HEAP32[$3230>>2] = $3226;
 $3231 = $56;
 $3232 = $3231;
 $3233 = HEAP32[$3232>>2]|0;
 $3234 = (($3231) + 4)|0;
 $3235 = $3234;
 $3236 = HEAP32[$3235>>2]|0;
 $3237 = (_i64Add(($3233|0),($3236|0),1048576,0)|0);
 $3238 = tempRet0;
 $3239 = (_bitshift64Ashr(($3237|0),($3238|0),21)|0);
 $3240 = tempRet0;
 $3241 = $80;
 $3242 = $3241;
 HEAP32[$3242>>2] = $3239;
 $3243 = (($3241) + 4)|0;
 $3244 = $3243;
 HEAP32[$3244>>2] = $3240;
 $3245 = $80;
 $3246 = $3245;
 $3247 = HEAP32[$3246>>2]|0;
 $3248 = (($3245) + 4)|0;
 $3249 = $3248;
 $3250 = HEAP32[$3249>>2]|0;
 $3251 = $57;
 $3252 = $3251;
 $3253 = HEAP32[$3252>>2]|0;
 $3254 = (($3251) + 4)|0;
 $3255 = $3254;
 $3256 = HEAP32[$3255>>2]|0;
 $3257 = (_i64Add(($3253|0),($3256|0),($3247|0),($3250|0))|0);
 $3258 = tempRet0;
 $3259 = $57;
 $3260 = $3259;
 HEAP32[$3260>>2] = $3257;
 $3261 = (($3259) + 4)|0;
 $3262 = $3261;
 HEAP32[$3262>>2] = $3258;
 $3263 = $80;
 $3264 = $3263;
 $3265 = HEAP32[$3264>>2]|0;
 $3266 = (($3263) + 4)|0;
 $3267 = $3266;
 $3268 = HEAP32[$3267>>2]|0;
 $3269 = (_bitshift64Shl(($3265|0),($3268|0),21)|0);
 $3270 = tempRet0;
 $3271 = $56;
 $3272 = $3271;
 $3273 = HEAP32[$3272>>2]|0;
 $3274 = (($3271) + 4)|0;
 $3275 = $3274;
 $3276 = HEAP32[$3275>>2]|0;
 $3277 = (_i64Subtract(($3273|0),($3276|0),($3269|0),($3270|0))|0);
 $3278 = tempRet0;
 $3279 = $56;
 $3280 = $3279;
 HEAP32[$3280>>2] = $3277;
 $3281 = (($3279) + 4)|0;
 $3282 = $3281;
 HEAP32[$3282>>2] = $3278;
 $3283 = $58;
 $3284 = $3283;
 $3285 = HEAP32[$3284>>2]|0;
 $3286 = (($3283) + 4)|0;
 $3287 = $3286;
 $3288 = HEAP32[$3287>>2]|0;
 $3289 = (_i64Add(($3285|0),($3288|0),1048576,0)|0);
 $3290 = tempRet0;
 $3291 = (_bitshift64Ashr(($3289|0),($3290|0),21)|0);
 $3292 = tempRet0;
 $3293 = $82;
 $3294 = $3293;
 HEAP32[$3294>>2] = $3291;
 $3295 = (($3293) + 4)|0;
 $3296 = $3295;
 HEAP32[$3296>>2] = $3292;
 $3297 = $82;
 $3298 = $3297;
 $3299 = HEAP32[$3298>>2]|0;
 $3300 = (($3297) + 4)|0;
 $3301 = $3300;
 $3302 = HEAP32[$3301>>2]|0;
 $3303 = $59;
 $3304 = $3303;
 $3305 = HEAP32[$3304>>2]|0;
 $3306 = (($3303) + 4)|0;
 $3307 = $3306;
 $3308 = HEAP32[$3307>>2]|0;
 $3309 = (_i64Add(($3305|0),($3308|0),($3299|0),($3302|0))|0);
 $3310 = tempRet0;
 $3311 = $59;
 $3312 = $3311;
 HEAP32[$3312>>2] = $3309;
 $3313 = (($3311) + 4)|0;
 $3314 = $3313;
 HEAP32[$3314>>2] = $3310;
 $3315 = $82;
 $3316 = $3315;
 $3317 = HEAP32[$3316>>2]|0;
 $3318 = (($3315) + 4)|0;
 $3319 = $3318;
 $3320 = HEAP32[$3319>>2]|0;
 $3321 = (_bitshift64Shl(($3317|0),($3320|0),21)|0);
 $3322 = tempRet0;
 $3323 = $58;
 $3324 = $3323;
 $3325 = HEAP32[$3324>>2]|0;
 $3326 = (($3323) + 4)|0;
 $3327 = $3326;
 $3328 = HEAP32[$3327>>2]|0;
 $3329 = (_i64Subtract(($3325|0),($3328|0),($3321|0),($3322|0))|0);
 $3330 = tempRet0;
 $3331 = $58;
 $3332 = $3331;
 HEAP32[$3332>>2] = $3329;
 $3333 = (($3331) + 4)|0;
 $3334 = $3333;
 HEAP32[$3334>>2] = $3330;
 $3335 = $60;
 $3336 = $3335;
 $3337 = HEAP32[$3336>>2]|0;
 $3338 = (($3335) + 4)|0;
 $3339 = $3338;
 $3340 = HEAP32[$3339>>2]|0;
 $3341 = (_i64Add(($3337|0),($3340|0),1048576,0)|0);
 $3342 = tempRet0;
 $3343 = (_bitshift64Ashr(($3341|0),($3342|0),21)|0);
 $3344 = tempRet0;
 $3345 = $84;
 $3346 = $3345;
 HEAP32[$3346>>2] = $3343;
 $3347 = (($3345) + 4)|0;
 $3348 = $3347;
 HEAP32[$3348>>2] = $3344;
 $3349 = $84;
 $3350 = $3349;
 $3351 = HEAP32[$3350>>2]|0;
 $3352 = (($3349) + 4)|0;
 $3353 = $3352;
 $3354 = HEAP32[$3353>>2]|0;
 $3355 = $61;
 $3356 = $3355;
 $3357 = HEAP32[$3356>>2]|0;
 $3358 = (($3355) + 4)|0;
 $3359 = $3358;
 $3360 = HEAP32[$3359>>2]|0;
 $3361 = (_i64Add(($3357|0),($3360|0),($3351|0),($3354|0))|0);
 $3362 = tempRet0;
 $3363 = $61;
 $3364 = $3363;
 HEAP32[$3364>>2] = $3361;
 $3365 = (($3363) + 4)|0;
 $3366 = $3365;
 HEAP32[$3366>>2] = $3362;
 $3367 = $84;
 $3368 = $3367;
 $3369 = HEAP32[$3368>>2]|0;
 $3370 = (($3367) + 4)|0;
 $3371 = $3370;
 $3372 = HEAP32[$3371>>2]|0;
 $3373 = (_bitshift64Shl(($3369|0),($3372|0),21)|0);
 $3374 = tempRet0;
 $3375 = $60;
 $3376 = $3375;
 $3377 = HEAP32[$3376>>2]|0;
 $3378 = (($3375) + 4)|0;
 $3379 = $3378;
 $3380 = HEAP32[$3379>>2]|0;
 $3381 = (_i64Subtract(($3377|0),($3380|0),($3373|0),($3374|0))|0);
 $3382 = tempRet0;
 $3383 = $60;
 $3384 = $3383;
 HEAP32[$3384>>2] = $3381;
 $3385 = (($3383) + 4)|0;
 $3386 = $3385;
 HEAP32[$3386>>2] = $3382;
 $3387 = $62;
 $3388 = $3387;
 $3389 = HEAP32[$3388>>2]|0;
 $3390 = (($3387) + 4)|0;
 $3391 = $3390;
 $3392 = HEAP32[$3391>>2]|0;
 $3393 = (_i64Add(($3389|0),($3392|0),1048576,0)|0);
 $3394 = tempRet0;
 $3395 = (_bitshift64Ashr(($3393|0),($3394|0),21)|0);
 $3396 = tempRet0;
 $3397 = $86;
 $3398 = $3397;
 HEAP32[$3398>>2] = $3395;
 $3399 = (($3397) + 4)|0;
 $3400 = $3399;
 HEAP32[$3400>>2] = $3396;
 $3401 = $86;
 $3402 = $3401;
 $3403 = HEAP32[$3402>>2]|0;
 $3404 = (($3401) + 4)|0;
 $3405 = $3404;
 $3406 = HEAP32[$3405>>2]|0;
 $3407 = $63;
 $3408 = $3407;
 $3409 = HEAP32[$3408>>2]|0;
 $3410 = (($3407) + 4)|0;
 $3411 = $3410;
 $3412 = HEAP32[$3411>>2]|0;
 $3413 = (_i64Add(($3409|0),($3412|0),($3403|0),($3406|0))|0);
 $3414 = tempRet0;
 $3415 = $63;
 $3416 = $3415;
 HEAP32[$3416>>2] = $3413;
 $3417 = (($3415) + 4)|0;
 $3418 = $3417;
 HEAP32[$3418>>2] = $3414;
 $3419 = $86;
 $3420 = $3419;
 $3421 = HEAP32[$3420>>2]|0;
 $3422 = (($3419) + 4)|0;
 $3423 = $3422;
 $3424 = HEAP32[$3423>>2]|0;
 $3425 = (_bitshift64Shl(($3421|0),($3424|0),21)|0);
 $3426 = tempRet0;
 $3427 = $62;
 $3428 = $3427;
 $3429 = HEAP32[$3428>>2]|0;
 $3430 = (($3427) + 4)|0;
 $3431 = $3430;
 $3432 = HEAP32[$3431>>2]|0;
 $3433 = (_i64Subtract(($3429|0),($3432|0),($3425|0),($3426|0))|0);
 $3434 = tempRet0;
 $3435 = $62;
 $3436 = $3435;
 HEAP32[$3436>>2] = $3433;
 $3437 = (($3435) + 4)|0;
 $3438 = $3437;
 HEAP32[$3438>>2] = $3434;
 $3439 = $64;
 $3440 = $3439;
 $3441 = HEAP32[$3440>>2]|0;
 $3442 = (($3439) + 4)|0;
 $3443 = $3442;
 $3444 = HEAP32[$3443>>2]|0;
 $3445 = (_i64Add(($3441|0),($3444|0),1048576,0)|0);
 $3446 = tempRet0;
 $3447 = (_bitshift64Ashr(($3445|0),($3446|0),21)|0);
 $3448 = tempRet0;
 $3449 = $88;
 $3450 = $3449;
 HEAP32[$3450>>2] = $3447;
 $3451 = (($3449) + 4)|0;
 $3452 = $3451;
 HEAP32[$3452>>2] = $3448;
 $3453 = $88;
 $3454 = $3453;
 $3455 = HEAP32[$3454>>2]|0;
 $3456 = (($3453) + 4)|0;
 $3457 = $3456;
 $3458 = HEAP32[$3457>>2]|0;
 $3459 = $65;
 $3460 = $3459;
 $3461 = HEAP32[$3460>>2]|0;
 $3462 = (($3459) + 4)|0;
 $3463 = $3462;
 $3464 = HEAP32[$3463>>2]|0;
 $3465 = (_i64Add(($3461|0),($3464|0),($3455|0),($3458|0))|0);
 $3466 = tempRet0;
 $3467 = $65;
 $3468 = $3467;
 HEAP32[$3468>>2] = $3465;
 $3469 = (($3467) + 4)|0;
 $3470 = $3469;
 HEAP32[$3470>>2] = $3466;
 $3471 = $88;
 $3472 = $3471;
 $3473 = HEAP32[$3472>>2]|0;
 $3474 = (($3471) + 4)|0;
 $3475 = $3474;
 $3476 = HEAP32[$3475>>2]|0;
 $3477 = (_bitshift64Shl(($3473|0),($3476|0),21)|0);
 $3478 = tempRet0;
 $3479 = $64;
 $3480 = $3479;
 $3481 = HEAP32[$3480>>2]|0;
 $3482 = (($3479) + 4)|0;
 $3483 = $3482;
 $3484 = HEAP32[$3483>>2]|0;
 $3485 = (_i64Subtract(($3481|0),($3484|0),($3477|0),($3478|0))|0);
 $3486 = tempRet0;
 $3487 = $64;
 $3488 = $3487;
 HEAP32[$3488>>2] = $3485;
 $3489 = (($3487) + 4)|0;
 $3490 = $3489;
 HEAP32[$3490>>2] = $3486;
 $3491 = $66;
 $3492 = $3491;
 $3493 = HEAP32[$3492>>2]|0;
 $3494 = (($3491) + 4)|0;
 $3495 = $3494;
 $3496 = HEAP32[$3495>>2]|0;
 $3497 = (_i64Add(($3493|0),($3496|0),1048576,0)|0);
 $3498 = tempRet0;
 $3499 = (_bitshift64Ashr(($3497|0),($3498|0),21)|0);
 $3500 = tempRet0;
 $3501 = $90;
 $3502 = $3501;
 HEAP32[$3502>>2] = $3499;
 $3503 = (($3501) + 4)|0;
 $3504 = $3503;
 HEAP32[$3504>>2] = $3500;
 $3505 = $90;
 $3506 = $3505;
 $3507 = HEAP32[$3506>>2]|0;
 $3508 = (($3505) + 4)|0;
 $3509 = $3508;
 $3510 = HEAP32[$3509>>2]|0;
 $3511 = $67;
 $3512 = $3511;
 $3513 = HEAP32[$3512>>2]|0;
 $3514 = (($3511) + 4)|0;
 $3515 = $3514;
 $3516 = HEAP32[$3515>>2]|0;
 $3517 = (_i64Add(($3513|0),($3516|0),($3507|0),($3510|0))|0);
 $3518 = tempRet0;
 $3519 = $67;
 $3520 = $3519;
 HEAP32[$3520>>2] = $3517;
 $3521 = (($3519) + 4)|0;
 $3522 = $3521;
 HEAP32[$3522>>2] = $3518;
 $3523 = $90;
 $3524 = $3523;
 $3525 = HEAP32[$3524>>2]|0;
 $3526 = (($3523) + 4)|0;
 $3527 = $3526;
 $3528 = HEAP32[$3527>>2]|0;
 $3529 = (_bitshift64Shl(($3525|0),($3528|0),21)|0);
 $3530 = tempRet0;
 $3531 = $66;
 $3532 = $3531;
 $3533 = HEAP32[$3532>>2]|0;
 $3534 = (($3531) + 4)|0;
 $3535 = $3534;
 $3536 = HEAP32[$3535>>2]|0;
 $3537 = (_i64Subtract(($3533|0),($3536|0),($3529|0),($3530|0))|0);
 $3538 = tempRet0;
 $3539 = $66;
 $3540 = $3539;
 HEAP32[$3540>>2] = $3537;
 $3541 = (($3539) + 4)|0;
 $3542 = $3541;
 HEAP32[$3542>>2] = $3538;
 $3543 = $45;
 $3544 = $3543;
 $3545 = HEAP32[$3544>>2]|0;
 $3546 = (($3543) + 4)|0;
 $3547 = $3546;
 $3548 = HEAP32[$3547>>2]|0;
 $3549 = (_i64Add(($3545|0),($3548|0),1048576,0)|0);
 $3550 = tempRet0;
 $3551 = (_bitshift64Ashr(($3549|0),($3550|0),21)|0);
 $3552 = tempRet0;
 $3553 = $69;
 $3554 = $3553;
 HEAP32[$3554>>2] = $3551;
 $3555 = (($3553) + 4)|0;
 $3556 = $3555;
 HEAP32[$3556>>2] = $3552;
 $3557 = $69;
 $3558 = $3557;
 $3559 = HEAP32[$3558>>2]|0;
 $3560 = (($3557) + 4)|0;
 $3561 = $3560;
 $3562 = HEAP32[$3561>>2]|0;
 $3563 = $46;
 $3564 = $3563;
 $3565 = HEAP32[$3564>>2]|0;
 $3566 = (($3563) + 4)|0;
 $3567 = $3566;
 $3568 = HEAP32[$3567>>2]|0;
 $3569 = (_i64Add(($3565|0),($3568|0),($3559|0),($3562|0))|0);
 $3570 = tempRet0;
 $3571 = $46;
 $3572 = $3571;
 HEAP32[$3572>>2] = $3569;
 $3573 = (($3571) + 4)|0;
 $3574 = $3573;
 HEAP32[$3574>>2] = $3570;
 $3575 = $69;
 $3576 = $3575;
 $3577 = HEAP32[$3576>>2]|0;
 $3578 = (($3575) + 4)|0;
 $3579 = $3578;
 $3580 = HEAP32[$3579>>2]|0;
 $3581 = (_bitshift64Shl(($3577|0),($3580|0),21)|0);
 $3582 = tempRet0;
 $3583 = $45;
 $3584 = $3583;
 $3585 = HEAP32[$3584>>2]|0;
 $3586 = (($3583) + 4)|0;
 $3587 = $3586;
 $3588 = HEAP32[$3587>>2]|0;
 $3589 = (_i64Subtract(($3585|0),($3588|0),($3581|0),($3582|0))|0);
 $3590 = tempRet0;
 $3591 = $45;
 $3592 = $3591;
 HEAP32[$3592>>2] = $3589;
 $3593 = (($3591) + 4)|0;
 $3594 = $3593;
 HEAP32[$3594>>2] = $3590;
 $3595 = $47;
 $3596 = $3595;
 $3597 = HEAP32[$3596>>2]|0;
 $3598 = (($3595) + 4)|0;
 $3599 = $3598;
 $3600 = HEAP32[$3599>>2]|0;
 $3601 = (_i64Add(($3597|0),($3600|0),1048576,0)|0);
 $3602 = tempRet0;
 $3603 = (_bitshift64Ashr(($3601|0),($3602|0),21)|0);
 $3604 = tempRet0;
 $3605 = $71;
 $3606 = $3605;
 HEAP32[$3606>>2] = $3603;
 $3607 = (($3605) + 4)|0;
 $3608 = $3607;
 HEAP32[$3608>>2] = $3604;
 $3609 = $71;
 $3610 = $3609;
 $3611 = HEAP32[$3610>>2]|0;
 $3612 = (($3609) + 4)|0;
 $3613 = $3612;
 $3614 = HEAP32[$3613>>2]|0;
 $3615 = $48;
 $3616 = $3615;
 $3617 = HEAP32[$3616>>2]|0;
 $3618 = (($3615) + 4)|0;
 $3619 = $3618;
 $3620 = HEAP32[$3619>>2]|0;
 $3621 = (_i64Add(($3617|0),($3620|0),($3611|0),($3614|0))|0);
 $3622 = tempRet0;
 $3623 = $48;
 $3624 = $3623;
 HEAP32[$3624>>2] = $3621;
 $3625 = (($3623) + 4)|0;
 $3626 = $3625;
 HEAP32[$3626>>2] = $3622;
 $3627 = $71;
 $3628 = $3627;
 $3629 = HEAP32[$3628>>2]|0;
 $3630 = (($3627) + 4)|0;
 $3631 = $3630;
 $3632 = HEAP32[$3631>>2]|0;
 $3633 = (_bitshift64Shl(($3629|0),($3632|0),21)|0);
 $3634 = tempRet0;
 $3635 = $47;
 $3636 = $3635;
 $3637 = HEAP32[$3636>>2]|0;
 $3638 = (($3635) + 4)|0;
 $3639 = $3638;
 $3640 = HEAP32[$3639>>2]|0;
 $3641 = (_i64Subtract(($3637|0),($3640|0),($3633|0),($3634|0))|0);
 $3642 = tempRet0;
 $3643 = $47;
 $3644 = $3643;
 HEAP32[$3644>>2] = $3641;
 $3645 = (($3643) + 4)|0;
 $3646 = $3645;
 HEAP32[$3646>>2] = $3642;
 $3647 = $49;
 $3648 = $3647;
 $3649 = HEAP32[$3648>>2]|0;
 $3650 = (($3647) + 4)|0;
 $3651 = $3650;
 $3652 = HEAP32[$3651>>2]|0;
 $3653 = (_i64Add(($3649|0),($3652|0),1048576,0)|0);
 $3654 = tempRet0;
 $3655 = (_bitshift64Ashr(($3653|0),($3654|0),21)|0);
 $3656 = tempRet0;
 $3657 = $73;
 $3658 = $3657;
 HEAP32[$3658>>2] = $3655;
 $3659 = (($3657) + 4)|0;
 $3660 = $3659;
 HEAP32[$3660>>2] = $3656;
 $3661 = $73;
 $3662 = $3661;
 $3663 = HEAP32[$3662>>2]|0;
 $3664 = (($3661) + 4)|0;
 $3665 = $3664;
 $3666 = HEAP32[$3665>>2]|0;
 $3667 = $50;
 $3668 = $3667;
 $3669 = HEAP32[$3668>>2]|0;
 $3670 = (($3667) + 4)|0;
 $3671 = $3670;
 $3672 = HEAP32[$3671>>2]|0;
 $3673 = (_i64Add(($3669|0),($3672|0),($3663|0),($3666|0))|0);
 $3674 = tempRet0;
 $3675 = $50;
 $3676 = $3675;
 HEAP32[$3676>>2] = $3673;
 $3677 = (($3675) + 4)|0;
 $3678 = $3677;
 HEAP32[$3678>>2] = $3674;
 $3679 = $73;
 $3680 = $3679;
 $3681 = HEAP32[$3680>>2]|0;
 $3682 = (($3679) + 4)|0;
 $3683 = $3682;
 $3684 = HEAP32[$3683>>2]|0;
 $3685 = (_bitshift64Shl(($3681|0),($3684|0),21)|0);
 $3686 = tempRet0;
 $3687 = $49;
 $3688 = $3687;
 $3689 = HEAP32[$3688>>2]|0;
 $3690 = (($3687) + 4)|0;
 $3691 = $3690;
 $3692 = HEAP32[$3691>>2]|0;
 $3693 = (_i64Subtract(($3689|0),($3692|0),($3685|0),($3686|0))|0);
 $3694 = tempRet0;
 $3695 = $49;
 $3696 = $3695;
 HEAP32[$3696>>2] = $3693;
 $3697 = (($3695) + 4)|0;
 $3698 = $3697;
 HEAP32[$3698>>2] = $3694;
 $3699 = $51;
 $3700 = $3699;
 $3701 = HEAP32[$3700>>2]|0;
 $3702 = (($3699) + 4)|0;
 $3703 = $3702;
 $3704 = HEAP32[$3703>>2]|0;
 $3705 = (_i64Add(($3701|0),($3704|0),1048576,0)|0);
 $3706 = tempRet0;
 $3707 = (_bitshift64Ashr(($3705|0),($3706|0),21)|0);
 $3708 = tempRet0;
 $3709 = $75;
 $3710 = $3709;
 HEAP32[$3710>>2] = $3707;
 $3711 = (($3709) + 4)|0;
 $3712 = $3711;
 HEAP32[$3712>>2] = $3708;
 $3713 = $75;
 $3714 = $3713;
 $3715 = HEAP32[$3714>>2]|0;
 $3716 = (($3713) + 4)|0;
 $3717 = $3716;
 $3718 = HEAP32[$3717>>2]|0;
 $3719 = $52;
 $3720 = $3719;
 $3721 = HEAP32[$3720>>2]|0;
 $3722 = (($3719) + 4)|0;
 $3723 = $3722;
 $3724 = HEAP32[$3723>>2]|0;
 $3725 = (_i64Add(($3721|0),($3724|0),($3715|0),($3718|0))|0);
 $3726 = tempRet0;
 $3727 = $52;
 $3728 = $3727;
 HEAP32[$3728>>2] = $3725;
 $3729 = (($3727) + 4)|0;
 $3730 = $3729;
 HEAP32[$3730>>2] = $3726;
 $3731 = $75;
 $3732 = $3731;
 $3733 = HEAP32[$3732>>2]|0;
 $3734 = (($3731) + 4)|0;
 $3735 = $3734;
 $3736 = HEAP32[$3735>>2]|0;
 $3737 = (_bitshift64Shl(($3733|0),($3736|0),21)|0);
 $3738 = tempRet0;
 $3739 = $51;
 $3740 = $3739;
 $3741 = HEAP32[$3740>>2]|0;
 $3742 = (($3739) + 4)|0;
 $3743 = $3742;
 $3744 = HEAP32[$3743>>2]|0;
 $3745 = (_i64Subtract(($3741|0),($3744|0),($3737|0),($3738|0))|0);
 $3746 = tempRet0;
 $3747 = $51;
 $3748 = $3747;
 HEAP32[$3748>>2] = $3745;
 $3749 = (($3747) + 4)|0;
 $3750 = $3749;
 HEAP32[$3750>>2] = $3746;
 $3751 = $53;
 $3752 = $3751;
 $3753 = HEAP32[$3752>>2]|0;
 $3754 = (($3751) + 4)|0;
 $3755 = $3754;
 $3756 = HEAP32[$3755>>2]|0;
 $3757 = (_i64Add(($3753|0),($3756|0),1048576,0)|0);
 $3758 = tempRet0;
 $3759 = (_bitshift64Ashr(($3757|0),($3758|0),21)|0);
 $3760 = tempRet0;
 $3761 = $77;
 $3762 = $3761;
 HEAP32[$3762>>2] = $3759;
 $3763 = (($3761) + 4)|0;
 $3764 = $3763;
 HEAP32[$3764>>2] = $3760;
 $3765 = $77;
 $3766 = $3765;
 $3767 = HEAP32[$3766>>2]|0;
 $3768 = (($3765) + 4)|0;
 $3769 = $3768;
 $3770 = HEAP32[$3769>>2]|0;
 $3771 = $54;
 $3772 = $3771;
 $3773 = HEAP32[$3772>>2]|0;
 $3774 = (($3771) + 4)|0;
 $3775 = $3774;
 $3776 = HEAP32[$3775>>2]|0;
 $3777 = (_i64Add(($3773|0),($3776|0),($3767|0),($3770|0))|0);
 $3778 = tempRet0;
 $3779 = $54;
 $3780 = $3779;
 HEAP32[$3780>>2] = $3777;
 $3781 = (($3779) + 4)|0;
 $3782 = $3781;
 HEAP32[$3782>>2] = $3778;
 $3783 = $77;
 $3784 = $3783;
 $3785 = HEAP32[$3784>>2]|0;
 $3786 = (($3783) + 4)|0;
 $3787 = $3786;
 $3788 = HEAP32[$3787>>2]|0;
 $3789 = (_bitshift64Shl(($3785|0),($3788|0),21)|0);
 $3790 = tempRet0;
 $3791 = $53;
 $3792 = $3791;
 $3793 = HEAP32[$3792>>2]|0;
 $3794 = (($3791) + 4)|0;
 $3795 = $3794;
 $3796 = HEAP32[$3795>>2]|0;
 $3797 = (_i64Subtract(($3793|0),($3796|0),($3789|0),($3790|0))|0);
 $3798 = tempRet0;
 $3799 = $53;
 $3800 = $3799;
 HEAP32[$3800>>2] = $3797;
 $3801 = (($3799) + 4)|0;
 $3802 = $3801;
 HEAP32[$3802>>2] = $3798;
 $3803 = $55;
 $3804 = $3803;
 $3805 = HEAP32[$3804>>2]|0;
 $3806 = (($3803) + 4)|0;
 $3807 = $3806;
 $3808 = HEAP32[$3807>>2]|0;
 $3809 = (_i64Add(($3805|0),($3808|0),1048576,0)|0);
 $3810 = tempRet0;
 $3811 = (_bitshift64Ashr(($3809|0),($3810|0),21)|0);
 $3812 = tempRet0;
 $3813 = $79;
 $3814 = $3813;
 HEAP32[$3814>>2] = $3811;
 $3815 = (($3813) + 4)|0;
 $3816 = $3815;
 HEAP32[$3816>>2] = $3812;
 $3817 = $79;
 $3818 = $3817;
 $3819 = HEAP32[$3818>>2]|0;
 $3820 = (($3817) + 4)|0;
 $3821 = $3820;
 $3822 = HEAP32[$3821>>2]|0;
 $3823 = $56;
 $3824 = $3823;
 $3825 = HEAP32[$3824>>2]|0;
 $3826 = (($3823) + 4)|0;
 $3827 = $3826;
 $3828 = HEAP32[$3827>>2]|0;
 $3829 = (_i64Add(($3825|0),($3828|0),($3819|0),($3822|0))|0);
 $3830 = tempRet0;
 $3831 = $56;
 $3832 = $3831;
 HEAP32[$3832>>2] = $3829;
 $3833 = (($3831) + 4)|0;
 $3834 = $3833;
 HEAP32[$3834>>2] = $3830;
 $3835 = $79;
 $3836 = $3835;
 $3837 = HEAP32[$3836>>2]|0;
 $3838 = (($3835) + 4)|0;
 $3839 = $3838;
 $3840 = HEAP32[$3839>>2]|0;
 $3841 = (_bitshift64Shl(($3837|0),($3840|0),21)|0);
 $3842 = tempRet0;
 $3843 = $55;
 $3844 = $3843;
 $3845 = HEAP32[$3844>>2]|0;
 $3846 = (($3843) + 4)|0;
 $3847 = $3846;
 $3848 = HEAP32[$3847>>2]|0;
 $3849 = (_i64Subtract(($3845|0),($3848|0),($3841|0),($3842|0))|0);
 $3850 = tempRet0;
 $3851 = $55;
 $3852 = $3851;
 HEAP32[$3852>>2] = $3849;
 $3853 = (($3851) + 4)|0;
 $3854 = $3853;
 HEAP32[$3854>>2] = $3850;
 $3855 = $57;
 $3856 = $3855;
 $3857 = HEAP32[$3856>>2]|0;
 $3858 = (($3855) + 4)|0;
 $3859 = $3858;
 $3860 = HEAP32[$3859>>2]|0;
 $3861 = (_i64Add(($3857|0),($3860|0),1048576,0)|0);
 $3862 = tempRet0;
 $3863 = (_bitshift64Ashr(($3861|0),($3862|0),21)|0);
 $3864 = tempRet0;
 $3865 = $81;
 $3866 = $3865;
 HEAP32[$3866>>2] = $3863;
 $3867 = (($3865) + 4)|0;
 $3868 = $3867;
 HEAP32[$3868>>2] = $3864;
 $3869 = $81;
 $3870 = $3869;
 $3871 = HEAP32[$3870>>2]|0;
 $3872 = (($3869) + 4)|0;
 $3873 = $3872;
 $3874 = HEAP32[$3873>>2]|0;
 $3875 = $58;
 $3876 = $3875;
 $3877 = HEAP32[$3876>>2]|0;
 $3878 = (($3875) + 4)|0;
 $3879 = $3878;
 $3880 = HEAP32[$3879>>2]|0;
 $3881 = (_i64Add(($3877|0),($3880|0),($3871|0),($3874|0))|0);
 $3882 = tempRet0;
 $3883 = $58;
 $3884 = $3883;
 HEAP32[$3884>>2] = $3881;
 $3885 = (($3883) + 4)|0;
 $3886 = $3885;
 HEAP32[$3886>>2] = $3882;
 $3887 = $81;
 $3888 = $3887;
 $3889 = HEAP32[$3888>>2]|0;
 $3890 = (($3887) + 4)|0;
 $3891 = $3890;
 $3892 = HEAP32[$3891>>2]|0;
 $3893 = (_bitshift64Shl(($3889|0),($3892|0),21)|0);
 $3894 = tempRet0;
 $3895 = $57;
 $3896 = $3895;
 $3897 = HEAP32[$3896>>2]|0;
 $3898 = (($3895) + 4)|0;
 $3899 = $3898;
 $3900 = HEAP32[$3899>>2]|0;
 $3901 = (_i64Subtract(($3897|0),($3900|0),($3893|0),($3894|0))|0);
 $3902 = tempRet0;
 $3903 = $57;
 $3904 = $3903;
 HEAP32[$3904>>2] = $3901;
 $3905 = (($3903) + 4)|0;
 $3906 = $3905;
 HEAP32[$3906>>2] = $3902;
 $3907 = $59;
 $3908 = $3907;
 $3909 = HEAP32[$3908>>2]|0;
 $3910 = (($3907) + 4)|0;
 $3911 = $3910;
 $3912 = HEAP32[$3911>>2]|0;
 $3913 = (_i64Add(($3909|0),($3912|0),1048576,0)|0);
 $3914 = tempRet0;
 $3915 = (_bitshift64Ashr(($3913|0),($3914|0),21)|0);
 $3916 = tempRet0;
 $3917 = $83;
 $3918 = $3917;
 HEAP32[$3918>>2] = $3915;
 $3919 = (($3917) + 4)|0;
 $3920 = $3919;
 HEAP32[$3920>>2] = $3916;
 $3921 = $83;
 $3922 = $3921;
 $3923 = HEAP32[$3922>>2]|0;
 $3924 = (($3921) + 4)|0;
 $3925 = $3924;
 $3926 = HEAP32[$3925>>2]|0;
 $3927 = $60;
 $3928 = $3927;
 $3929 = HEAP32[$3928>>2]|0;
 $3930 = (($3927) + 4)|0;
 $3931 = $3930;
 $3932 = HEAP32[$3931>>2]|0;
 $3933 = (_i64Add(($3929|0),($3932|0),($3923|0),($3926|0))|0);
 $3934 = tempRet0;
 $3935 = $60;
 $3936 = $3935;
 HEAP32[$3936>>2] = $3933;
 $3937 = (($3935) + 4)|0;
 $3938 = $3937;
 HEAP32[$3938>>2] = $3934;
 $3939 = $83;
 $3940 = $3939;
 $3941 = HEAP32[$3940>>2]|0;
 $3942 = (($3939) + 4)|0;
 $3943 = $3942;
 $3944 = HEAP32[$3943>>2]|0;
 $3945 = (_bitshift64Shl(($3941|0),($3944|0),21)|0);
 $3946 = tempRet0;
 $3947 = $59;
 $3948 = $3947;
 $3949 = HEAP32[$3948>>2]|0;
 $3950 = (($3947) + 4)|0;
 $3951 = $3950;
 $3952 = HEAP32[$3951>>2]|0;
 $3953 = (_i64Subtract(($3949|0),($3952|0),($3945|0),($3946|0))|0);
 $3954 = tempRet0;
 $3955 = $59;
 $3956 = $3955;
 HEAP32[$3956>>2] = $3953;
 $3957 = (($3955) + 4)|0;
 $3958 = $3957;
 HEAP32[$3958>>2] = $3954;
 $3959 = $61;
 $3960 = $3959;
 $3961 = HEAP32[$3960>>2]|0;
 $3962 = (($3959) + 4)|0;
 $3963 = $3962;
 $3964 = HEAP32[$3963>>2]|0;
 $3965 = (_i64Add(($3961|0),($3964|0),1048576,0)|0);
 $3966 = tempRet0;
 $3967 = (_bitshift64Ashr(($3965|0),($3966|0),21)|0);
 $3968 = tempRet0;
 $3969 = $85;
 $3970 = $3969;
 HEAP32[$3970>>2] = $3967;
 $3971 = (($3969) + 4)|0;
 $3972 = $3971;
 HEAP32[$3972>>2] = $3968;
 $3973 = $85;
 $3974 = $3973;
 $3975 = HEAP32[$3974>>2]|0;
 $3976 = (($3973) + 4)|0;
 $3977 = $3976;
 $3978 = HEAP32[$3977>>2]|0;
 $3979 = $62;
 $3980 = $3979;
 $3981 = HEAP32[$3980>>2]|0;
 $3982 = (($3979) + 4)|0;
 $3983 = $3982;
 $3984 = HEAP32[$3983>>2]|0;
 $3985 = (_i64Add(($3981|0),($3984|0),($3975|0),($3978|0))|0);
 $3986 = tempRet0;
 $3987 = $62;
 $3988 = $3987;
 HEAP32[$3988>>2] = $3985;
 $3989 = (($3987) + 4)|0;
 $3990 = $3989;
 HEAP32[$3990>>2] = $3986;
 $3991 = $85;
 $3992 = $3991;
 $3993 = HEAP32[$3992>>2]|0;
 $3994 = (($3991) + 4)|0;
 $3995 = $3994;
 $3996 = HEAP32[$3995>>2]|0;
 $3997 = (_bitshift64Shl(($3993|0),($3996|0),21)|0);
 $3998 = tempRet0;
 $3999 = $61;
 $4000 = $3999;
 $4001 = HEAP32[$4000>>2]|0;
 $4002 = (($3999) + 4)|0;
 $4003 = $4002;
 $4004 = HEAP32[$4003>>2]|0;
 $4005 = (_i64Subtract(($4001|0),($4004|0),($3997|0),($3998|0))|0);
 $4006 = tempRet0;
 $4007 = $61;
 $4008 = $4007;
 HEAP32[$4008>>2] = $4005;
 $4009 = (($4007) + 4)|0;
 $4010 = $4009;
 HEAP32[$4010>>2] = $4006;
 $4011 = $63;
 $4012 = $4011;
 $4013 = HEAP32[$4012>>2]|0;
 $4014 = (($4011) + 4)|0;
 $4015 = $4014;
 $4016 = HEAP32[$4015>>2]|0;
 $4017 = (_i64Add(($4013|0),($4016|0),1048576,0)|0);
 $4018 = tempRet0;
 $4019 = (_bitshift64Ashr(($4017|0),($4018|0),21)|0);
 $4020 = tempRet0;
 $4021 = $87;
 $4022 = $4021;
 HEAP32[$4022>>2] = $4019;
 $4023 = (($4021) + 4)|0;
 $4024 = $4023;
 HEAP32[$4024>>2] = $4020;
 $4025 = $87;
 $4026 = $4025;
 $4027 = HEAP32[$4026>>2]|0;
 $4028 = (($4025) + 4)|0;
 $4029 = $4028;
 $4030 = HEAP32[$4029>>2]|0;
 $4031 = $64;
 $4032 = $4031;
 $4033 = HEAP32[$4032>>2]|0;
 $4034 = (($4031) + 4)|0;
 $4035 = $4034;
 $4036 = HEAP32[$4035>>2]|0;
 $4037 = (_i64Add(($4033|0),($4036|0),($4027|0),($4030|0))|0);
 $4038 = tempRet0;
 $4039 = $64;
 $4040 = $4039;
 HEAP32[$4040>>2] = $4037;
 $4041 = (($4039) + 4)|0;
 $4042 = $4041;
 HEAP32[$4042>>2] = $4038;
 $4043 = $87;
 $4044 = $4043;
 $4045 = HEAP32[$4044>>2]|0;
 $4046 = (($4043) + 4)|0;
 $4047 = $4046;
 $4048 = HEAP32[$4047>>2]|0;
 $4049 = (_bitshift64Shl(($4045|0),($4048|0),21)|0);
 $4050 = tempRet0;
 $4051 = $63;
 $4052 = $4051;
 $4053 = HEAP32[$4052>>2]|0;
 $4054 = (($4051) + 4)|0;
 $4055 = $4054;
 $4056 = HEAP32[$4055>>2]|0;
 $4057 = (_i64Subtract(($4053|0),($4056|0),($4049|0),($4050|0))|0);
 $4058 = tempRet0;
 $4059 = $63;
 $4060 = $4059;
 HEAP32[$4060>>2] = $4057;
 $4061 = (($4059) + 4)|0;
 $4062 = $4061;
 HEAP32[$4062>>2] = $4058;
 $4063 = $65;
 $4064 = $4063;
 $4065 = HEAP32[$4064>>2]|0;
 $4066 = (($4063) + 4)|0;
 $4067 = $4066;
 $4068 = HEAP32[$4067>>2]|0;
 $4069 = (_i64Add(($4065|0),($4068|0),1048576,0)|0);
 $4070 = tempRet0;
 $4071 = (_bitshift64Ashr(($4069|0),($4070|0),21)|0);
 $4072 = tempRet0;
 $4073 = $89;
 $4074 = $4073;
 HEAP32[$4074>>2] = $4071;
 $4075 = (($4073) + 4)|0;
 $4076 = $4075;
 HEAP32[$4076>>2] = $4072;
 $4077 = $89;
 $4078 = $4077;
 $4079 = HEAP32[$4078>>2]|0;
 $4080 = (($4077) + 4)|0;
 $4081 = $4080;
 $4082 = HEAP32[$4081>>2]|0;
 $4083 = $66;
 $4084 = $4083;
 $4085 = HEAP32[$4084>>2]|0;
 $4086 = (($4083) + 4)|0;
 $4087 = $4086;
 $4088 = HEAP32[$4087>>2]|0;
 $4089 = (_i64Add(($4085|0),($4088|0),($4079|0),($4082|0))|0);
 $4090 = tempRet0;
 $4091 = $66;
 $4092 = $4091;
 HEAP32[$4092>>2] = $4089;
 $4093 = (($4091) + 4)|0;
 $4094 = $4093;
 HEAP32[$4094>>2] = $4090;
 $4095 = $89;
 $4096 = $4095;
 $4097 = HEAP32[$4096>>2]|0;
 $4098 = (($4095) + 4)|0;
 $4099 = $4098;
 $4100 = HEAP32[$4099>>2]|0;
 $4101 = (_bitshift64Shl(($4097|0),($4100|0),21)|0);
 $4102 = tempRet0;
 $4103 = $65;
 $4104 = $4103;
 $4105 = HEAP32[$4104>>2]|0;
 $4106 = (($4103) + 4)|0;
 $4107 = $4106;
 $4108 = HEAP32[$4107>>2]|0;
 $4109 = (_i64Subtract(($4105|0),($4108|0),($4101|0),($4102|0))|0);
 $4110 = tempRet0;
 $4111 = $65;
 $4112 = $4111;
 HEAP32[$4112>>2] = $4109;
 $4113 = (($4111) + 4)|0;
 $4114 = $4113;
 HEAP32[$4114>>2] = $4110;
 $4115 = $67;
 $4116 = $4115;
 $4117 = HEAP32[$4116>>2]|0;
 $4118 = (($4115) + 4)|0;
 $4119 = $4118;
 $4120 = HEAP32[$4119>>2]|0;
 $4121 = (___muldi3(($4117|0),($4120|0),666643,0)|0);
 $4122 = tempRet0;
 $4123 = $55;
 $4124 = $4123;
 $4125 = HEAP32[$4124>>2]|0;
 $4126 = (($4123) + 4)|0;
 $4127 = $4126;
 $4128 = HEAP32[$4127>>2]|0;
 $4129 = (_i64Add(($4125|0),($4128|0),($4121|0),($4122|0))|0);
 $4130 = tempRet0;
 $4131 = $55;
 $4132 = $4131;
 HEAP32[$4132>>2] = $4129;
 $4133 = (($4131) + 4)|0;
 $4134 = $4133;
 HEAP32[$4134>>2] = $4130;
 $4135 = $67;
 $4136 = $4135;
 $4137 = HEAP32[$4136>>2]|0;
 $4138 = (($4135) + 4)|0;
 $4139 = $4138;
 $4140 = HEAP32[$4139>>2]|0;
 $4141 = (___muldi3(($4137|0),($4140|0),470296,0)|0);
 $4142 = tempRet0;
 $4143 = $56;
 $4144 = $4143;
 $4145 = HEAP32[$4144>>2]|0;
 $4146 = (($4143) + 4)|0;
 $4147 = $4146;
 $4148 = HEAP32[$4147>>2]|0;
 $4149 = (_i64Add(($4145|0),($4148|0),($4141|0),($4142|0))|0);
 $4150 = tempRet0;
 $4151 = $56;
 $4152 = $4151;
 HEAP32[$4152>>2] = $4149;
 $4153 = (($4151) + 4)|0;
 $4154 = $4153;
 HEAP32[$4154>>2] = $4150;
 $4155 = $67;
 $4156 = $4155;
 $4157 = HEAP32[$4156>>2]|0;
 $4158 = (($4155) + 4)|0;
 $4159 = $4158;
 $4160 = HEAP32[$4159>>2]|0;
 $4161 = (___muldi3(($4157|0),($4160|0),654183,0)|0);
 $4162 = tempRet0;
 $4163 = $57;
 $4164 = $4163;
 $4165 = HEAP32[$4164>>2]|0;
 $4166 = (($4163) + 4)|0;
 $4167 = $4166;
 $4168 = HEAP32[$4167>>2]|0;
 $4169 = (_i64Add(($4165|0),($4168|0),($4161|0),($4162|0))|0);
 $4170 = tempRet0;
 $4171 = $57;
 $4172 = $4171;
 HEAP32[$4172>>2] = $4169;
 $4173 = (($4171) + 4)|0;
 $4174 = $4173;
 HEAP32[$4174>>2] = $4170;
 $4175 = $67;
 $4176 = $4175;
 $4177 = HEAP32[$4176>>2]|0;
 $4178 = (($4175) + 4)|0;
 $4179 = $4178;
 $4180 = HEAP32[$4179>>2]|0;
 $4181 = (___muldi3(($4177|0),($4180|0),997805,0)|0);
 $4182 = tempRet0;
 $4183 = $58;
 $4184 = $4183;
 $4185 = HEAP32[$4184>>2]|0;
 $4186 = (($4183) + 4)|0;
 $4187 = $4186;
 $4188 = HEAP32[$4187>>2]|0;
 $4189 = (_i64Subtract(($4185|0),($4188|0),($4181|0),($4182|0))|0);
 $4190 = tempRet0;
 $4191 = $58;
 $4192 = $4191;
 HEAP32[$4192>>2] = $4189;
 $4193 = (($4191) + 4)|0;
 $4194 = $4193;
 HEAP32[$4194>>2] = $4190;
 $4195 = $67;
 $4196 = $4195;
 $4197 = HEAP32[$4196>>2]|0;
 $4198 = (($4195) + 4)|0;
 $4199 = $4198;
 $4200 = HEAP32[$4199>>2]|0;
 $4201 = (___muldi3(($4197|0),($4200|0),136657,0)|0);
 $4202 = tempRet0;
 $4203 = $59;
 $4204 = $4203;
 $4205 = HEAP32[$4204>>2]|0;
 $4206 = (($4203) + 4)|0;
 $4207 = $4206;
 $4208 = HEAP32[$4207>>2]|0;
 $4209 = (_i64Add(($4205|0),($4208|0),($4201|0),($4202|0))|0);
 $4210 = tempRet0;
 $4211 = $59;
 $4212 = $4211;
 HEAP32[$4212>>2] = $4209;
 $4213 = (($4211) + 4)|0;
 $4214 = $4213;
 HEAP32[$4214>>2] = $4210;
 $4215 = $67;
 $4216 = $4215;
 $4217 = HEAP32[$4216>>2]|0;
 $4218 = (($4215) + 4)|0;
 $4219 = $4218;
 $4220 = HEAP32[$4219>>2]|0;
 $4221 = (___muldi3(($4217|0),($4220|0),683901,0)|0);
 $4222 = tempRet0;
 $4223 = $60;
 $4224 = $4223;
 $4225 = HEAP32[$4224>>2]|0;
 $4226 = (($4223) + 4)|0;
 $4227 = $4226;
 $4228 = HEAP32[$4227>>2]|0;
 $4229 = (_i64Subtract(($4225|0),($4228|0),($4221|0),($4222|0))|0);
 $4230 = tempRet0;
 $4231 = $60;
 $4232 = $4231;
 HEAP32[$4232>>2] = $4229;
 $4233 = (($4231) + 4)|0;
 $4234 = $4233;
 HEAP32[$4234>>2] = $4230;
 $4235 = $67;
 $4236 = $4235;
 HEAP32[$4236>>2] = 0;
 $4237 = (($4235) + 4)|0;
 $4238 = $4237;
 HEAP32[$4238>>2] = 0;
 $4239 = $66;
 $4240 = $4239;
 $4241 = HEAP32[$4240>>2]|0;
 $4242 = (($4239) + 4)|0;
 $4243 = $4242;
 $4244 = HEAP32[$4243>>2]|0;
 $4245 = (___muldi3(($4241|0),($4244|0),666643,0)|0);
 $4246 = tempRet0;
 $4247 = $54;
 $4248 = $4247;
 $4249 = HEAP32[$4248>>2]|0;
 $4250 = (($4247) + 4)|0;
 $4251 = $4250;
 $4252 = HEAP32[$4251>>2]|0;
 $4253 = (_i64Add(($4249|0),($4252|0),($4245|0),($4246|0))|0);
 $4254 = tempRet0;
 $4255 = $54;
 $4256 = $4255;
 HEAP32[$4256>>2] = $4253;
 $4257 = (($4255) + 4)|0;
 $4258 = $4257;
 HEAP32[$4258>>2] = $4254;
 $4259 = $66;
 $4260 = $4259;
 $4261 = HEAP32[$4260>>2]|0;
 $4262 = (($4259) + 4)|0;
 $4263 = $4262;
 $4264 = HEAP32[$4263>>2]|0;
 $4265 = (___muldi3(($4261|0),($4264|0),470296,0)|0);
 $4266 = tempRet0;
 $4267 = $55;
 $4268 = $4267;
 $4269 = HEAP32[$4268>>2]|0;
 $4270 = (($4267) + 4)|0;
 $4271 = $4270;
 $4272 = HEAP32[$4271>>2]|0;
 $4273 = (_i64Add(($4269|0),($4272|0),($4265|0),($4266|0))|0);
 $4274 = tempRet0;
 $4275 = $55;
 $4276 = $4275;
 HEAP32[$4276>>2] = $4273;
 $4277 = (($4275) + 4)|0;
 $4278 = $4277;
 HEAP32[$4278>>2] = $4274;
 $4279 = $66;
 $4280 = $4279;
 $4281 = HEAP32[$4280>>2]|0;
 $4282 = (($4279) + 4)|0;
 $4283 = $4282;
 $4284 = HEAP32[$4283>>2]|0;
 $4285 = (___muldi3(($4281|0),($4284|0),654183,0)|0);
 $4286 = tempRet0;
 $4287 = $56;
 $4288 = $4287;
 $4289 = HEAP32[$4288>>2]|0;
 $4290 = (($4287) + 4)|0;
 $4291 = $4290;
 $4292 = HEAP32[$4291>>2]|0;
 $4293 = (_i64Add(($4289|0),($4292|0),($4285|0),($4286|0))|0);
 $4294 = tempRet0;
 $4295 = $56;
 $4296 = $4295;
 HEAP32[$4296>>2] = $4293;
 $4297 = (($4295) + 4)|0;
 $4298 = $4297;
 HEAP32[$4298>>2] = $4294;
 $4299 = $66;
 $4300 = $4299;
 $4301 = HEAP32[$4300>>2]|0;
 $4302 = (($4299) + 4)|0;
 $4303 = $4302;
 $4304 = HEAP32[$4303>>2]|0;
 $4305 = (___muldi3(($4301|0),($4304|0),997805,0)|0);
 $4306 = tempRet0;
 $4307 = $57;
 $4308 = $4307;
 $4309 = HEAP32[$4308>>2]|0;
 $4310 = (($4307) + 4)|0;
 $4311 = $4310;
 $4312 = HEAP32[$4311>>2]|0;
 $4313 = (_i64Subtract(($4309|0),($4312|0),($4305|0),($4306|0))|0);
 $4314 = tempRet0;
 $4315 = $57;
 $4316 = $4315;
 HEAP32[$4316>>2] = $4313;
 $4317 = (($4315) + 4)|0;
 $4318 = $4317;
 HEAP32[$4318>>2] = $4314;
 $4319 = $66;
 $4320 = $4319;
 $4321 = HEAP32[$4320>>2]|0;
 $4322 = (($4319) + 4)|0;
 $4323 = $4322;
 $4324 = HEAP32[$4323>>2]|0;
 $4325 = (___muldi3(($4321|0),($4324|0),136657,0)|0);
 $4326 = tempRet0;
 $4327 = $58;
 $4328 = $4327;
 $4329 = HEAP32[$4328>>2]|0;
 $4330 = (($4327) + 4)|0;
 $4331 = $4330;
 $4332 = HEAP32[$4331>>2]|0;
 $4333 = (_i64Add(($4329|0),($4332|0),($4325|0),($4326|0))|0);
 $4334 = tempRet0;
 $4335 = $58;
 $4336 = $4335;
 HEAP32[$4336>>2] = $4333;
 $4337 = (($4335) + 4)|0;
 $4338 = $4337;
 HEAP32[$4338>>2] = $4334;
 $4339 = $66;
 $4340 = $4339;
 $4341 = HEAP32[$4340>>2]|0;
 $4342 = (($4339) + 4)|0;
 $4343 = $4342;
 $4344 = HEAP32[$4343>>2]|0;
 $4345 = (___muldi3(($4341|0),($4344|0),683901,0)|0);
 $4346 = tempRet0;
 $4347 = $59;
 $4348 = $4347;
 $4349 = HEAP32[$4348>>2]|0;
 $4350 = (($4347) + 4)|0;
 $4351 = $4350;
 $4352 = HEAP32[$4351>>2]|0;
 $4353 = (_i64Subtract(($4349|0),($4352|0),($4345|0),($4346|0))|0);
 $4354 = tempRet0;
 $4355 = $59;
 $4356 = $4355;
 HEAP32[$4356>>2] = $4353;
 $4357 = (($4355) + 4)|0;
 $4358 = $4357;
 HEAP32[$4358>>2] = $4354;
 $4359 = $66;
 $4360 = $4359;
 HEAP32[$4360>>2] = 0;
 $4361 = (($4359) + 4)|0;
 $4362 = $4361;
 HEAP32[$4362>>2] = 0;
 $4363 = $65;
 $4364 = $4363;
 $4365 = HEAP32[$4364>>2]|0;
 $4366 = (($4363) + 4)|0;
 $4367 = $4366;
 $4368 = HEAP32[$4367>>2]|0;
 $4369 = (___muldi3(($4365|0),($4368|0),666643,0)|0);
 $4370 = tempRet0;
 $4371 = $53;
 $4372 = $4371;
 $4373 = HEAP32[$4372>>2]|0;
 $4374 = (($4371) + 4)|0;
 $4375 = $4374;
 $4376 = HEAP32[$4375>>2]|0;
 $4377 = (_i64Add(($4373|0),($4376|0),($4369|0),($4370|0))|0);
 $4378 = tempRet0;
 $4379 = $53;
 $4380 = $4379;
 HEAP32[$4380>>2] = $4377;
 $4381 = (($4379) + 4)|0;
 $4382 = $4381;
 HEAP32[$4382>>2] = $4378;
 $4383 = $65;
 $4384 = $4383;
 $4385 = HEAP32[$4384>>2]|0;
 $4386 = (($4383) + 4)|0;
 $4387 = $4386;
 $4388 = HEAP32[$4387>>2]|0;
 $4389 = (___muldi3(($4385|0),($4388|0),470296,0)|0);
 $4390 = tempRet0;
 $4391 = $54;
 $4392 = $4391;
 $4393 = HEAP32[$4392>>2]|0;
 $4394 = (($4391) + 4)|0;
 $4395 = $4394;
 $4396 = HEAP32[$4395>>2]|0;
 $4397 = (_i64Add(($4393|0),($4396|0),($4389|0),($4390|0))|0);
 $4398 = tempRet0;
 $4399 = $54;
 $4400 = $4399;
 HEAP32[$4400>>2] = $4397;
 $4401 = (($4399) + 4)|0;
 $4402 = $4401;
 HEAP32[$4402>>2] = $4398;
 $4403 = $65;
 $4404 = $4403;
 $4405 = HEAP32[$4404>>2]|0;
 $4406 = (($4403) + 4)|0;
 $4407 = $4406;
 $4408 = HEAP32[$4407>>2]|0;
 $4409 = (___muldi3(($4405|0),($4408|0),654183,0)|0);
 $4410 = tempRet0;
 $4411 = $55;
 $4412 = $4411;
 $4413 = HEAP32[$4412>>2]|0;
 $4414 = (($4411) + 4)|0;
 $4415 = $4414;
 $4416 = HEAP32[$4415>>2]|0;
 $4417 = (_i64Add(($4413|0),($4416|0),($4409|0),($4410|0))|0);
 $4418 = tempRet0;
 $4419 = $55;
 $4420 = $4419;
 HEAP32[$4420>>2] = $4417;
 $4421 = (($4419) + 4)|0;
 $4422 = $4421;
 HEAP32[$4422>>2] = $4418;
 $4423 = $65;
 $4424 = $4423;
 $4425 = HEAP32[$4424>>2]|0;
 $4426 = (($4423) + 4)|0;
 $4427 = $4426;
 $4428 = HEAP32[$4427>>2]|0;
 $4429 = (___muldi3(($4425|0),($4428|0),997805,0)|0);
 $4430 = tempRet0;
 $4431 = $56;
 $4432 = $4431;
 $4433 = HEAP32[$4432>>2]|0;
 $4434 = (($4431) + 4)|0;
 $4435 = $4434;
 $4436 = HEAP32[$4435>>2]|0;
 $4437 = (_i64Subtract(($4433|0),($4436|0),($4429|0),($4430|0))|0);
 $4438 = tempRet0;
 $4439 = $56;
 $4440 = $4439;
 HEAP32[$4440>>2] = $4437;
 $4441 = (($4439) + 4)|0;
 $4442 = $4441;
 HEAP32[$4442>>2] = $4438;
 $4443 = $65;
 $4444 = $4443;
 $4445 = HEAP32[$4444>>2]|0;
 $4446 = (($4443) + 4)|0;
 $4447 = $4446;
 $4448 = HEAP32[$4447>>2]|0;
 $4449 = (___muldi3(($4445|0),($4448|0),136657,0)|0);
 $4450 = tempRet0;
 $4451 = $57;
 $4452 = $4451;
 $4453 = HEAP32[$4452>>2]|0;
 $4454 = (($4451) + 4)|0;
 $4455 = $4454;
 $4456 = HEAP32[$4455>>2]|0;
 $4457 = (_i64Add(($4453|0),($4456|0),($4449|0),($4450|0))|0);
 $4458 = tempRet0;
 $4459 = $57;
 $4460 = $4459;
 HEAP32[$4460>>2] = $4457;
 $4461 = (($4459) + 4)|0;
 $4462 = $4461;
 HEAP32[$4462>>2] = $4458;
 $4463 = $65;
 $4464 = $4463;
 $4465 = HEAP32[$4464>>2]|0;
 $4466 = (($4463) + 4)|0;
 $4467 = $4466;
 $4468 = HEAP32[$4467>>2]|0;
 $4469 = (___muldi3(($4465|0),($4468|0),683901,0)|0);
 $4470 = tempRet0;
 $4471 = $58;
 $4472 = $4471;
 $4473 = HEAP32[$4472>>2]|0;
 $4474 = (($4471) + 4)|0;
 $4475 = $4474;
 $4476 = HEAP32[$4475>>2]|0;
 $4477 = (_i64Subtract(($4473|0),($4476|0),($4469|0),($4470|0))|0);
 $4478 = tempRet0;
 $4479 = $58;
 $4480 = $4479;
 HEAP32[$4480>>2] = $4477;
 $4481 = (($4479) + 4)|0;
 $4482 = $4481;
 HEAP32[$4482>>2] = $4478;
 $4483 = $65;
 $4484 = $4483;
 HEAP32[$4484>>2] = 0;
 $4485 = (($4483) + 4)|0;
 $4486 = $4485;
 HEAP32[$4486>>2] = 0;
 $4487 = $64;
 $4488 = $4487;
 $4489 = HEAP32[$4488>>2]|0;
 $4490 = (($4487) + 4)|0;
 $4491 = $4490;
 $4492 = HEAP32[$4491>>2]|0;
 $4493 = (___muldi3(($4489|0),($4492|0),666643,0)|0);
 $4494 = tempRet0;
 $4495 = $52;
 $4496 = $4495;
 $4497 = HEAP32[$4496>>2]|0;
 $4498 = (($4495) + 4)|0;
 $4499 = $4498;
 $4500 = HEAP32[$4499>>2]|0;
 $4501 = (_i64Add(($4497|0),($4500|0),($4493|0),($4494|0))|0);
 $4502 = tempRet0;
 $4503 = $52;
 $4504 = $4503;
 HEAP32[$4504>>2] = $4501;
 $4505 = (($4503) + 4)|0;
 $4506 = $4505;
 HEAP32[$4506>>2] = $4502;
 $4507 = $64;
 $4508 = $4507;
 $4509 = HEAP32[$4508>>2]|0;
 $4510 = (($4507) + 4)|0;
 $4511 = $4510;
 $4512 = HEAP32[$4511>>2]|0;
 $4513 = (___muldi3(($4509|0),($4512|0),470296,0)|0);
 $4514 = tempRet0;
 $4515 = $53;
 $4516 = $4515;
 $4517 = HEAP32[$4516>>2]|0;
 $4518 = (($4515) + 4)|0;
 $4519 = $4518;
 $4520 = HEAP32[$4519>>2]|0;
 $4521 = (_i64Add(($4517|0),($4520|0),($4513|0),($4514|0))|0);
 $4522 = tempRet0;
 $4523 = $53;
 $4524 = $4523;
 HEAP32[$4524>>2] = $4521;
 $4525 = (($4523) + 4)|0;
 $4526 = $4525;
 HEAP32[$4526>>2] = $4522;
 $4527 = $64;
 $4528 = $4527;
 $4529 = HEAP32[$4528>>2]|0;
 $4530 = (($4527) + 4)|0;
 $4531 = $4530;
 $4532 = HEAP32[$4531>>2]|0;
 $4533 = (___muldi3(($4529|0),($4532|0),654183,0)|0);
 $4534 = tempRet0;
 $4535 = $54;
 $4536 = $4535;
 $4537 = HEAP32[$4536>>2]|0;
 $4538 = (($4535) + 4)|0;
 $4539 = $4538;
 $4540 = HEAP32[$4539>>2]|0;
 $4541 = (_i64Add(($4537|0),($4540|0),($4533|0),($4534|0))|0);
 $4542 = tempRet0;
 $4543 = $54;
 $4544 = $4543;
 HEAP32[$4544>>2] = $4541;
 $4545 = (($4543) + 4)|0;
 $4546 = $4545;
 HEAP32[$4546>>2] = $4542;
 $4547 = $64;
 $4548 = $4547;
 $4549 = HEAP32[$4548>>2]|0;
 $4550 = (($4547) + 4)|0;
 $4551 = $4550;
 $4552 = HEAP32[$4551>>2]|0;
 $4553 = (___muldi3(($4549|0),($4552|0),997805,0)|0);
 $4554 = tempRet0;
 $4555 = $55;
 $4556 = $4555;
 $4557 = HEAP32[$4556>>2]|0;
 $4558 = (($4555) + 4)|0;
 $4559 = $4558;
 $4560 = HEAP32[$4559>>2]|0;
 $4561 = (_i64Subtract(($4557|0),($4560|0),($4553|0),($4554|0))|0);
 $4562 = tempRet0;
 $4563 = $55;
 $4564 = $4563;
 HEAP32[$4564>>2] = $4561;
 $4565 = (($4563) + 4)|0;
 $4566 = $4565;
 HEAP32[$4566>>2] = $4562;
 $4567 = $64;
 $4568 = $4567;
 $4569 = HEAP32[$4568>>2]|0;
 $4570 = (($4567) + 4)|0;
 $4571 = $4570;
 $4572 = HEAP32[$4571>>2]|0;
 $4573 = (___muldi3(($4569|0),($4572|0),136657,0)|0);
 $4574 = tempRet0;
 $4575 = $56;
 $4576 = $4575;
 $4577 = HEAP32[$4576>>2]|0;
 $4578 = (($4575) + 4)|0;
 $4579 = $4578;
 $4580 = HEAP32[$4579>>2]|0;
 $4581 = (_i64Add(($4577|0),($4580|0),($4573|0),($4574|0))|0);
 $4582 = tempRet0;
 $4583 = $56;
 $4584 = $4583;
 HEAP32[$4584>>2] = $4581;
 $4585 = (($4583) + 4)|0;
 $4586 = $4585;
 HEAP32[$4586>>2] = $4582;
 $4587 = $64;
 $4588 = $4587;
 $4589 = HEAP32[$4588>>2]|0;
 $4590 = (($4587) + 4)|0;
 $4591 = $4590;
 $4592 = HEAP32[$4591>>2]|0;
 $4593 = (___muldi3(($4589|0),($4592|0),683901,0)|0);
 $4594 = tempRet0;
 $4595 = $57;
 $4596 = $4595;
 $4597 = HEAP32[$4596>>2]|0;
 $4598 = (($4595) + 4)|0;
 $4599 = $4598;
 $4600 = HEAP32[$4599>>2]|0;
 $4601 = (_i64Subtract(($4597|0),($4600|0),($4593|0),($4594|0))|0);
 $4602 = tempRet0;
 $4603 = $57;
 $4604 = $4603;
 HEAP32[$4604>>2] = $4601;
 $4605 = (($4603) + 4)|0;
 $4606 = $4605;
 HEAP32[$4606>>2] = $4602;
 $4607 = $64;
 $4608 = $4607;
 HEAP32[$4608>>2] = 0;
 $4609 = (($4607) + 4)|0;
 $4610 = $4609;
 HEAP32[$4610>>2] = 0;
 $4611 = $63;
 $4612 = $4611;
 $4613 = HEAP32[$4612>>2]|0;
 $4614 = (($4611) + 4)|0;
 $4615 = $4614;
 $4616 = HEAP32[$4615>>2]|0;
 $4617 = (___muldi3(($4613|0),($4616|0),666643,0)|0);
 $4618 = tempRet0;
 $4619 = $51;
 $4620 = $4619;
 $4621 = HEAP32[$4620>>2]|0;
 $4622 = (($4619) + 4)|0;
 $4623 = $4622;
 $4624 = HEAP32[$4623>>2]|0;
 $4625 = (_i64Add(($4621|0),($4624|0),($4617|0),($4618|0))|0);
 $4626 = tempRet0;
 $4627 = $51;
 $4628 = $4627;
 HEAP32[$4628>>2] = $4625;
 $4629 = (($4627) + 4)|0;
 $4630 = $4629;
 HEAP32[$4630>>2] = $4626;
 $4631 = $63;
 $4632 = $4631;
 $4633 = HEAP32[$4632>>2]|0;
 $4634 = (($4631) + 4)|0;
 $4635 = $4634;
 $4636 = HEAP32[$4635>>2]|0;
 $4637 = (___muldi3(($4633|0),($4636|0),470296,0)|0);
 $4638 = tempRet0;
 $4639 = $52;
 $4640 = $4639;
 $4641 = HEAP32[$4640>>2]|0;
 $4642 = (($4639) + 4)|0;
 $4643 = $4642;
 $4644 = HEAP32[$4643>>2]|0;
 $4645 = (_i64Add(($4641|0),($4644|0),($4637|0),($4638|0))|0);
 $4646 = tempRet0;
 $4647 = $52;
 $4648 = $4647;
 HEAP32[$4648>>2] = $4645;
 $4649 = (($4647) + 4)|0;
 $4650 = $4649;
 HEAP32[$4650>>2] = $4646;
 $4651 = $63;
 $4652 = $4651;
 $4653 = HEAP32[$4652>>2]|0;
 $4654 = (($4651) + 4)|0;
 $4655 = $4654;
 $4656 = HEAP32[$4655>>2]|0;
 $4657 = (___muldi3(($4653|0),($4656|0),654183,0)|0);
 $4658 = tempRet0;
 $4659 = $53;
 $4660 = $4659;
 $4661 = HEAP32[$4660>>2]|0;
 $4662 = (($4659) + 4)|0;
 $4663 = $4662;
 $4664 = HEAP32[$4663>>2]|0;
 $4665 = (_i64Add(($4661|0),($4664|0),($4657|0),($4658|0))|0);
 $4666 = tempRet0;
 $4667 = $53;
 $4668 = $4667;
 HEAP32[$4668>>2] = $4665;
 $4669 = (($4667) + 4)|0;
 $4670 = $4669;
 HEAP32[$4670>>2] = $4666;
 $4671 = $63;
 $4672 = $4671;
 $4673 = HEAP32[$4672>>2]|0;
 $4674 = (($4671) + 4)|0;
 $4675 = $4674;
 $4676 = HEAP32[$4675>>2]|0;
 $4677 = (___muldi3(($4673|0),($4676|0),997805,0)|0);
 $4678 = tempRet0;
 $4679 = $54;
 $4680 = $4679;
 $4681 = HEAP32[$4680>>2]|0;
 $4682 = (($4679) + 4)|0;
 $4683 = $4682;
 $4684 = HEAP32[$4683>>2]|0;
 $4685 = (_i64Subtract(($4681|0),($4684|0),($4677|0),($4678|0))|0);
 $4686 = tempRet0;
 $4687 = $54;
 $4688 = $4687;
 HEAP32[$4688>>2] = $4685;
 $4689 = (($4687) + 4)|0;
 $4690 = $4689;
 HEAP32[$4690>>2] = $4686;
 $4691 = $63;
 $4692 = $4691;
 $4693 = HEAP32[$4692>>2]|0;
 $4694 = (($4691) + 4)|0;
 $4695 = $4694;
 $4696 = HEAP32[$4695>>2]|0;
 $4697 = (___muldi3(($4693|0),($4696|0),136657,0)|0);
 $4698 = tempRet0;
 $4699 = $55;
 $4700 = $4699;
 $4701 = HEAP32[$4700>>2]|0;
 $4702 = (($4699) + 4)|0;
 $4703 = $4702;
 $4704 = HEAP32[$4703>>2]|0;
 $4705 = (_i64Add(($4701|0),($4704|0),($4697|0),($4698|0))|0);
 $4706 = tempRet0;
 $4707 = $55;
 $4708 = $4707;
 HEAP32[$4708>>2] = $4705;
 $4709 = (($4707) + 4)|0;
 $4710 = $4709;
 HEAP32[$4710>>2] = $4706;
 $4711 = $63;
 $4712 = $4711;
 $4713 = HEAP32[$4712>>2]|0;
 $4714 = (($4711) + 4)|0;
 $4715 = $4714;
 $4716 = HEAP32[$4715>>2]|0;
 $4717 = (___muldi3(($4713|0),($4716|0),683901,0)|0);
 $4718 = tempRet0;
 $4719 = $56;
 $4720 = $4719;
 $4721 = HEAP32[$4720>>2]|0;
 $4722 = (($4719) + 4)|0;
 $4723 = $4722;
 $4724 = HEAP32[$4723>>2]|0;
 $4725 = (_i64Subtract(($4721|0),($4724|0),($4717|0),($4718|0))|0);
 $4726 = tempRet0;
 $4727 = $56;
 $4728 = $4727;
 HEAP32[$4728>>2] = $4725;
 $4729 = (($4727) + 4)|0;
 $4730 = $4729;
 HEAP32[$4730>>2] = $4726;
 $4731 = $63;
 $4732 = $4731;
 HEAP32[$4732>>2] = 0;
 $4733 = (($4731) + 4)|0;
 $4734 = $4733;
 HEAP32[$4734>>2] = 0;
 $4735 = $62;
 $4736 = $4735;
 $4737 = HEAP32[$4736>>2]|0;
 $4738 = (($4735) + 4)|0;
 $4739 = $4738;
 $4740 = HEAP32[$4739>>2]|0;
 $4741 = (___muldi3(($4737|0),($4740|0),666643,0)|0);
 $4742 = tempRet0;
 $4743 = $50;
 $4744 = $4743;
 $4745 = HEAP32[$4744>>2]|0;
 $4746 = (($4743) + 4)|0;
 $4747 = $4746;
 $4748 = HEAP32[$4747>>2]|0;
 $4749 = (_i64Add(($4745|0),($4748|0),($4741|0),($4742|0))|0);
 $4750 = tempRet0;
 $4751 = $50;
 $4752 = $4751;
 HEAP32[$4752>>2] = $4749;
 $4753 = (($4751) + 4)|0;
 $4754 = $4753;
 HEAP32[$4754>>2] = $4750;
 $4755 = $62;
 $4756 = $4755;
 $4757 = HEAP32[$4756>>2]|0;
 $4758 = (($4755) + 4)|0;
 $4759 = $4758;
 $4760 = HEAP32[$4759>>2]|0;
 $4761 = (___muldi3(($4757|0),($4760|0),470296,0)|0);
 $4762 = tempRet0;
 $4763 = $51;
 $4764 = $4763;
 $4765 = HEAP32[$4764>>2]|0;
 $4766 = (($4763) + 4)|0;
 $4767 = $4766;
 $4768 = HEAP32[$4767>>2]|0;
 $4769 = (_i64Add(($4765|0),($4768|0),($4761|0),($4762|0))|0);
 $4770 = tempRet0;
 $4771 = $51;
 $4772 = $4771;
 HEAP32[$4772>>2] = $4769;
 $4773 = (($4771) + 4)|0;
 $4774 = $4773;
 HEAP32[$4774>>2] = $4770;
 $4775 = $62;
 $4776 = $4775;
 $4777 = HEAP32[$4776>>2]|0;
 $4778 = (($4775) + 4)|0;
 $4779 = $4778;
 $4780 = HEAP32[$4779>>2]|0;
 $4781 = (___muldi3(($4777|0),($4780|0),654183,0)|0);
 $4782 = tempRet0;
 $4783 = $52;
 $4784 = $4783;
 $4785 = HEAP32[$4784>>2]|0;
 $4786 = (($4783) + 4)|0;
 $4787 = $4786;
 $4788 = HEAP32[$4787>>2]|0;
 $4789 = (_i64Add(($4785|0),($4788|0),($4781|0),($4782|0))|0);
 $4790 = tempRet0;
 $4791 = $52;
 $4792 = $4791;
 HEAP32[$4792>>2] = $4789;
 $4793 = (($4791) + 4)|0;
 $4794 = $4793;
 HEAP32[$4794>>2] = $4790;
 $4795 = $62;
 $4796 = $4795;
 $4797 = HEAP32[$4796>>2]|0;
 $4798 = (($4795) + 4)|0;
 $4799 = $4798;
 $4800 = HEAP32[$4799>>2]|0;
 $4801 = (___muldi3(($4797|0),($4800|0),997805,0)|0);
 $4802 = tempRet0;
 $4803 = $53;
 $4804 = $4803;
 $4805 = HEAP32[$4804>>2]|0;
 $4806 = (($4803) + 4)|0;
 $4807 = $4806;
 $4808 = HEAP32[$4807>>2]|0;
 $4809 = (_i64Subtract(($4805|0),($4808|0),($4801|0),($4802|0))|0);
 $4810 = tempRet0;
 $4811 = $53;
 $4812 = $4811;
 HEAP32[$4812>>2] = $4809;
 $4813 = (($4811) + 4)|0;
 $4814 = $4813;
 HEAP32[$4814>>2] = $4810;
 $4815 = $62;
 $4816 = $4815;
 $4817 = HEAP32[$4816>>2]|0;
 $4818 = (($4815) + 4)|0;
 $4819 = $4818;
 $4820 = HEAP32[$4819>>2]|0;
 $4821 = (___muldi3(($4817|0),($4820|0),136657,0)|0);
 $4822 = tempRet0;
 $4823 = $54;
 $4824 = $4823;
 $4825 = HEAP32[$4824>>2]|0;
 $4826 = (($4823) + 4)|0;
 $4827 = $4826;
 $4828 = HEAP32[$4827>>2]|0;
 $4829 = (_i64Add(($4825|0),($4828|0),($4821|0),($4822|0))|0);
 $4830 = tempRet0;
 $4831 = $54;
 $4832 = $4831;
 HEAP32[$4832>>2] = $4829;
 $4833 = (($4831) + 4)|0;
 $4834 = $4833;
 HEAP32[$4834>>2] = $4830;
 $4835 = $62;
 $4836 = $4835;
 $4837 = HEAP32[$4836>>2]|0;
 $4838 = (($4835) + 4)|0;
 $4839 = $4838;
 $4840 = HEAP32[$4839>>2]|0;
 $4841 = (___muldi3(($4837|0),($4840|0),683901,0)|0);
 $4842 = tempRet0;
 $4843 = $55;
 $4844 = $4843;
 $4845 = HEAP32[$4844>>2]|0;
 $4846 = (($4843) + 4)|0;
 $4847 = $4846;
 $4848 = HEAP32[$4847>>2]|0;
 $4849 = (_i64Subtract(($4845|0),($4848|0),($4841|0),($4842|0))|0);
 $4850 = tempRet0;
 $4851 = $55;
 $4852 = $4851;
 HEAP32[$4852>>2] = $4849;
 $4853 = (($4851) + 4)|0;
 $4854 = $4853;
 HEAP32[$4854>>2] = $4850;
 $4855 = $62;
 $4856 = $4855;
 HEAP32[$4856>>2] = 0;
 $4857 = (($4855) + 4)|0;
 $4858 = $4857;
 HEAP32[$4858>>2] = 0;
 $4859 = $50;
 $4860 = $4859;
 $4861 = HEAP32[$4860>>2]|0;
 $4862 = (($4859) + 4)|0;
 $4863 = $4862;
 $4864 = HEAP32[$4863>>2]|0;
 $4865 = (_i64Add(($4861|0),($4864|0),1048576,0)|0);
 $4866 = tempRet0;
 $4867 = (_bitshift64Ashr(($4865|0),($4866|0),21)|0);
 $4868 = tempRet0;
 $4869 = $74;
 $4870 = $4869;
 HEAP32[$4870>>2] = $4867;
 $4871 = (($4869) + 4)|0;
 $4872 = $4871;
 HEAP32[$4872>>2] = $4868;
 $4873 = $74;
 $4874 = $4873;
 $4875 = HEAP32[$4874>>2]|0;
 $4876 = (($4873) + 4)|0;
 $4877 = $4876;
 $4878 = HEAP32[$4877>>2]|0;
 $4879 = $51;
 $4880 = $4879;
 $4881 = HEAP32[$4880>>2]|0;
 $4882 = (($4879) + 4)|0;
 $4883 = $4882;
 $4884 = HEAP32[$4883>>2]|0;
 $4885 = (_i64Add(($4881|0),($4884|0),($4875|0),($4878|0))|0);
 $4886 = tempRet0;
 $4887 = $51;
 $4888 = $4887;
 HEAP32[$4888>>2] = $4885;
 $4889 = (($4887) + 4)|0;
 $4890 = $4889;
 HEAP32[$4890>>2] = $4886;
 $4891 = $74;
 $4892 = $4891;
 $4893 = HEAP32[$4892>>2]|0;
 $4894 = (($4891) + 4)|0;
 $4895 = $4894;
 $4896 = HEAP32[$4895>>2]|0;
 $4897 = (_bitshift64Shl(($4893|0),($4896|0),21)|0);
 $4898 = tempRet0;
 $4899 = $50;
 $4900 = $4899;
 $4901 = HEAP32[$4900>>2]|0;
 $4902 = (($4899) + 4)|0;
 $4903 = $4902;
 $4904 = HEAP32[$4903>>2]|0;
 $4905 = (_i64Subtract(($4901|0),($4904|0),($4897|0),($4898|0))|0);
 $4906 = tempRet0;
 $4907 = $50;
 $4908 = $4907;
 HEAP32[$4908>>2] = $4905;
 $4909 = (($4907) + 4)|0;
 $4910 = $4909;
 HEAP32[$4910>>2] = $4906;
 $4911 = $52;
 $4912 = $4911;
 $4913 = HEAP32[$4912>>2]|0;
 $4914 = (($4911) + 4)|0;
 $4915 = $4914;
 $4916 = HEAP32[$4915>>2]|0;
 $4917 = (_i64Add(($4913|0),($4916|0),1048576,0)|0);
 $4918 = tempRet0;
 $4919 = (_bitshift64Ashr(($4917|0),($4918|0),21)|0);
 $4920 = tempRet0;
 $4921 = $76;
 $4922 = $4921;
 HEAP32[$4922>>2] = $4919;
 $4923 = (($4921) + 4)|0;
 $4924 = $4923;
 HEAP32[$4924>>2] = $4920;
 $4925 = $76;
 $4926 = $4925;
 $4927 = HEAP32[$4926>>2]|0;
 $4928 = (($4925) + 4)|0;
 $4929 = $4928;
 $4930 = HEAP32[$4929>>2]|0;
 $4931 = $53;
 $4932 = $4931;
 $4933 = HEAP32[$4932>>2]|0;
 $4934 = (($4931) + 4)|0;
 $4935 = $4934;
 $4936 = HEAP32[$4935>>2]|0;
 $4937 = (_i64Add(($4933|0),($4936|0),($4927|0),($4930|0))|0);
 $4938 = tempRet0;
 $4939 = $53;
 $4940 = $4939;
 HEAP32[$4940>>2] = $4937;
 $4941 = (($4939) + 4)|0;
 $4942 = $4941;
 HEAP32[$4942>>2] = $4938;
 $4943 = $76;
 $4944 = $4943;
 $4945 = HEAP32[$4944>>2]|0;
 $4946 = (($4943) + 4)|0;
 $4947 = $4946;
 $4948 = HEAP32[$4947>>2]|0;
 $4949 = (_bitshift64Shl(($4945|0),($4948|0),21)|0);
 $4950 = tempRet0;
 $4951 = $52;
 $4952 = $4951;
 $4953 = HEAP32[$4952>>2]|0;
 $4954 = (($4951) + 4)|0;
 $4955 = $4954;
 $4956 = HEAP32[$4955>>2]|0;
 $4957 = (_i64Subtract(($4953|0),($4956|0),($4949|0),($4950|0))|0);
 $4958 = tempRet0;
 $4959 = $52;
 $4960 = $4959;
 HEAP32[$4960>>2] = $4957;
 $4961 = (($4959) + 4)|0;
 $4962 = $4961;
 HEAP32[$4962>>2] = $4958;
 $4963 = $54;
 $4964 = $4963;
 $4965 = HEAP32[$4964>>2]|0;
 $4966 = (($4963) + 4)|0;
 $4967 = $4966;
 $4968 = HEAP32[$4967>>2]|0;
 $4969 = (_i64Add(($4965|0),($4968|0),1048576,0)|0);
 $4970 = tempRet0;
 $4971 = (_bitshift64Ashr(($4969|0),($4970|0),21)|0);
 $4972 = tempRet0;
 $4973 = $78;
 $4974 = $4973;
 HEAP32[$4974>>2] = $4971;
 $4975 = (($4973) + 4)|0;
 $4976 = $4975;
 HEAP32[$4976>>2] = $4972;
 $4977 = $78;
 $4978 = $4977;
 $4979 = HEAP32[$4978>>2]|0;
 $4980 = (($4977) + 4)|0;
 $4981 = $4980;
 $4982 = HEAP32[$4981>>2]|0;
 $4983 = $55;
 $4984 = $4983;
 $4985 = HEAP32[$4984>>2]|0;
 $4986 = (($4983) + 4)|0;
 $4987 = $4986;
 $4988 = HEAP32[$4987>>2]|0;
 $4989 = (_i64Add(($4985|0),($4988|0),($4979|0),($4982|0))|0);
 $4990 = tempRet0;
 $4991 = $55;
 $4992 = $4991;
 HEAP32[$4992>>2] = $4989;
 $4993 = (($4991) + 4)|0;
 $4994 = $4993;
 HEAP32[$4994>>2] = $4990;
 $4995 = $78;
 $4996 = $4995;
 $4997 = HEAP32[$4996>>2]|0;
 $4998 = (($4995) + 4)|0;
 $4999 = $4998;
 $5000 = HEAP32[$4999>>2]|0;
 $5001 = (_bitshift64Shl(($4997|0),($5000|0),21)|0);
 $5002 = tempRet0;
 $5003 = $54;
 $5004 = $5003;
 $5005 = HEAP32[$5004>>2]|0;
 $5006 = (($5003) + 4)|0;
 $5007 = $5006;
 $5008 = HEAP32[$5007>>2]|0;
 $5009 = (_i64Subtract(($5005|0),($5008|0),($5001|0),($5002|0))|0);
 $5010 = tempRet0;
 $5011 = $54;
 $5012 = $5011;
 HEAP32[$5012>>2] = $5009;
 $5013 = (($5011) + 4)|0;
 $5014 = $5013;
 HEAP32[$5014>>2] = $5010;
 $5015 = $56;
 $5016 = $5015;
 $5017 = HEAP32[$5016>>2]|0;
 $5018 = (($5015) + 4)|0;
 $5019 = $5018;
 $5020 = HEAP32[$5019>>2]|0;
 $5021 = (_i64Add(($5017|0),($5020|0),1048576,0)|0);
 $5022 = tempRet0;
 $5023 = (_bitshift64Ashr(($5021|0),($5022|0),21)|0);
 $5024 = tempRet0;
 $5025 = $80;
 $5026 = $5025;
 HEAP32[$5026>>2] = $5023;
 $5027 = (($5025) + 4)|0;
 $5028 = $5027;
 HEAP32[$5028>>2] = $5024;
 $5029 = $80;
 $5030 = $5029;
 $5031 = HEAP32[$5030>>2]|0;
 $5032 = (($5029) + 4)|0;
 $5033 = $5032;
 $5034 = HEAP32[$5033>>2]|0;
 $5035 = $57;
 $5036 = $5035;
 $5037 = HEAP32[$5036>>2]|0;
 $5038 = (($5035) + 4)|0;
 $5039 = $5038;
 $5040 = HEAP32[$5039>>2]|0;
 $5041 = (_i64Add(($5037|0),($5040|0),($5031|0),($5034|0))|0);
 $5042 = tempRet0;
 $5043 = $57;
 $5044 = $5043;
 HEAP32[$5044>>2] = $5041;
 $5045 = (($5043) + 4)|0;
 $5046 = $5045;
 HEAP32[$5046>>2] = $5042;
 $5047 = $80;
 $5048 = $5047;
 $5049 = HEAP32[$5048>>2]|0;
 $5050 = (($5047) + 4)|0;
 $5051 = $5050;
 $5052 = HEAP32[$5051>>2]|0;
 $5053 = (_bitshift64Shl(($5049|0),($5052|0),21)|0);
 $5054 = tempRet0;
 $5055 = $56;
 $5056 = $5055;
 $5057 = HEAP32[$5056>>2]|0;
 $5058 = (($5055) + 4)|0;
 $5059 = $5058;
 $5060 = HEAP32[$5059>>2]|0;
 $5061 = (_i64Subtract(($5057|0),($5060|0),($5053|0),($5054|0))|0);
 $5062 = tempRet0;
 $5063 = $56;
 $5064 = $5063;
 HEAP32[$5064>>2] = $5061;
 $5065 = (($5063) + 4)|0;
 $5066 = $5065;
 HEAP32[$5066>>2] = $5062;
 $5067 = $58;
 $5068 = $5067;
 $5069 = HEAP32[$5068>>2]|0;
 $5070 = (($5067) + 4)|0;
 $5071 = $5070;
 $5072 = HEAP32[$5071>>2]|0;
 $5073 = (_i64Add(($5069|0),($5072|0),1048576,0)|0);
 $5074 = tempRet0;
 $5075 = (_bitshift64Ashr(($5073|0),($5074|0),21)|0);
 $5076 = tempRet0;
 $5077 = $82;
 $5078 = $5077;
 HEAP32[$5078>>2] = $5075;
 $5079 = (($5077) + 4)|0;
 $5080 = $5079;
 HEAP32[$5080>>2] = $5076;
 $5081 = $82;
 $5082 = $5081;
 $5083 = HEAP32[$5082>>2]|0;
 $5084 = (($5081) + 4)|0;
 $5085 = $5084;
 $5086 = HEAP32[$5085>>2]|0;
 $5087 = $59;
 $5088 = $5087;
 $5089 = HEAP32[$5088>>2]|0;
 $5090 = (($5087) + 4)|0;
 $5091 = $5090;
 $5092 = HEAP32[$5091>>2]|0;
 $5093 = (_i64Add(($5089|0),($5092|0),($5083|0),($5086|0))|0);
 $5094 = tempRet0;
 $5095 = $59;
 $5096 = $5095;
 HEAP32[$5096>>2] = $5093;
 $5097 = (($5095) + 4)|0;
 $5098 = $5097;
 HEAP32[$5098>>2] = $5094;
 $5099 = $82;
 $5100 = $5099;
 $5101 = HEAP32[$5100>>2]|0;
 $5102 = (($5099) + 4)|0;
 $5103 = $5102;
 $5104 = HEAP32[$5103>>2]|0;
 $5105 = (_bitshift64Shl(($5101|0),($5104|0),21)|0);
 $5106 = tempRet0;
 $5107 = $58;
 $5108 = $5107;
 $5109 = HEAP32[$5108>>2]|0;
 $5110 = (($5107) + 4)|0;
 $5111 = $5110;
 $5112 = HEAP32[$5111>>2]|0;
 $5113 = (_i64Subtract(($5109|0),($5112|0),($5105|0),($5106|0))|0);
 $5114 = tempRet0;
 $5115 = $58;
 $5116 = $5115;
 HEAP32[$5116>>2] = $5113;
 $5117 = (($5115) + 4)|0;
 $5118 = $5117;
 HEAP32[$5118>>2] = $5114;
 $5119 = $60;
 $5120 = $5119;
 $5121 = HEAP32[$5120>>2]|0;
 $5122 = (($5119) + 4)|0;
 $5123 = $5122;
 $5124 = HEAP32[$5123>>2]|0;
 $5125 = (_i64Add(($5121|0),($5124|0),1048576,0)|0);
 $5126 = tempRet0;
 $5127 = (_bitshift64Ashr(($5125|0),($5126|0),21)|0);
 $5128 = tempRet0;
 $5129 = $84;
 $5130 = $5129;
 HEAP32[$5130>>2] = $5127;
 $5131 = (($5129) + 4)|0;
 $5132 = $5131;
 HEAP32[$5132>>2] = $5128;
 $5133 = $84;
 $5134 = $5133;
 $5135 = HEAP32[$5134>>2]|0;
 $5136 = (($5133) + 4)|0;
 $5137 = $5136;
 $5138 = HEAP32[$5137>>2]|0;
 $5139 = $61;
 $5140 = $5139;
 $5141 = HEAP32[$5140>>2]|0;
 $5142 = (($5139) + 4)|0;
 $5143 = $5142;
 $5144 = HEAP32[$5143>>2]|0;
 $5145 = (_i64Add(($5141|0),($5144|0),($5135|0),($5138|0))|0);
 $5146 = tempRet0;
 $5147 = $61;
 $5148 = $5147;
 HEAP32[$5148>>2] = $5145;
 $5149 = (($5147) + 4)|0;
 $5150 = $5149;
 HEAP32[$5150>>2] = $5146;
 $5151 = $84;
 $5152 = $5151;
 $5153 = HEAP32[$5152>>2]|0;
 $5154 = (($5151) + 4)|0;
 $5155 = $5154;
 $5156 = HEAP32[$5155>>2]|0;
 $5157 = (_bitshift64Shl(($5153|0),($5156|0),21)|0);
 $5158 = tempRet0;
 $5159 = $60;
 $5160 = $5159;
 $5161 = HEAP32[$5160>>2]|0;
 $5162 = (($5159) + 4)|0;
 $5163 = $5162;
 $5164 = HEAP32[$5163>>2]|0;
 $5165 = (_i64Subtract(($5161|0),($5164|0),($5157|0),($5158|0))|0);
 $5166 = tempRet0;
 $5167 = $60;
 $5168 = $5167;
 HEAP32[$5168>>2] = $5165;
 $5169 = (($5167) + 4)|0;
 $5170 = $5169;
 HEAP32[$5170>>2] = $5166;
 $5171 = $51;
 $5172 = $5171;
 $5173 = HEAP32[$5172>>2]|0;
 $5174 = (($5171) + 4)|0;
 $5175 = $5174;
 $5176 = HEAP32[$5175>>2]|0;
 $5177 = (_i64Add(($5173|0),($5176|0),1048576,0)|0);
 $5178 = tempRet0;
 $5179 = (_bitshift64Ashr(($5177|0),($5178|0),21)|0);
 $5180 = tempRet0;
 $5181 = $75;
 $5182 = $5181;
 HEAP32[$5182>>2] = $5179;
 $5183 = (($5181) + 4)|0;
 $5184 = $5183;
 HEAP32[$5184>>2] = $5180;
 $5185 = $75;
 $5186 = $5185;
 $5187 = HEAP32[$5186>>2]|0;
 $5188 = (($5185) + 4)|0;
 $5189 = $5188;
 $5190 = HEAP32[$5189>>2]|0;
 $5191 = $52;
 $5192 = $5191;
 $5193 = HEAP32[$5192>>2]|0;
 $5194 = (($5191) + 4)|0;
 $5195 = $5194;
 $5196 = HEAP32[$5195>>2]|0;
 $5197 = (_i64Add(($5193|0),($5196|0),($5187|0),($5190|0))|0);
 $5198 = tempRet0;
 $5199 = $52;
 $5200 = $5199;
 HEAP32[$5200>>2] = $5197;
 $5201 = (($5199) + 4)|0;
 $5202 = $5201;
 HEAP32[$5202>>2] = $5198;
 $5203 = $75;
 $5204 = $5203;
 $5205 = HEAP32[$5204>>2]|0;
 $5206 = (($5203) + 4)|0;
 $5207 = $5206;
 $5208 = HEAP32[$5207>>2]|0;
 $5209 = (_bitshift64Shl(($5205|0),($5208|0),21)|0);
 $5210 = tempRet0;
 $5211 = $51;
 $5212 = $5211;
 $5213 = HEAP32[$5212>>2]|0;
 $5214 = (($5211) + 4)|0;
 $5215 = $5214;
 $5216 = HEAP32[$5215>>2]|0;
 $5217 = (_i64Subtract(($5213|0),($5216|0),($5209|0),($5210|0))|0);
 $5218 = tempRet0;
 $5219 = $51;
 $5220 = $5219;
 HEAP32[$5220>>2] = $5217;
 $5221 = (($5219) + 4)|0;
 $5222 = $5221;
 HEAP32[$5222>>2] = $5218;
 $5223 = $53;
 $5224 = $5223;
 $5225 = HEAP32[$5224>>2]|0;
 $5226 = (($5223) + 4)|0;
 $5227 = $5226;
 $5228 = HEAP32[$5227>>2]|0;
 $5229 = (_i64Add(($5225|0),($5228|0),1048576,0)|0);
 $5230 = tempRet0;
 $5231 = (_bitshift64Ashr(($5229|0),($5230|0),21)|0);
 $5232 = tempRet0;
 $5233 = $77;
 $5234 = $5233;
 HEAP32[$5234>>2] = $5231;
 $5235 = (($5233) + 4)|0;
 $5236 = $5235;
 HEAP32[$5236>>2] = $5232;
 $5237 = $77;
 $5238 = $5237;
 $5239 = HEAP32[$5238>>2]|0;
 $5240 = (($5237) + 4)|0;
 $5241 = $5240;
 $5242 = HEAP32[$5241>>2]|0;
 $5243 = $54;
 $5244 = $5243;
 $5245 = HEAP32[$5244>>2]|0;
 $5246 = (($5243) + 4)|0;
 $5247 = $5246;
 $5248 = HEAP32[$5247>>2]|0;
 $5249 = (_i64Add(($5245|0),($5248|0),($5239|0),($5242|0))|0);
 $5250 = tempRet0;
 $5251 = $54;
 $5252 = $5251;
 HEAP32[$5252>>2] = $5249;
 $5253 = (($5251) + 4)|0;
 $5254 = $5253;
 HEAP32[$5254>>2] = $5250;
 $5255 = $77;
 $5256 = $5255;
 $5257 = HEAP32[$5256>>2]|0;
 $5258 = (($5255) + 4)|0;
 $5259 = $5258;
 $5260 = HEAP32[$5259>>2]|0;
 $5261 = (_bitshift64Shl(($5257|0),($5260|0),21)|0);
 $5262 = tempRet0;
 $5263 = $53;
 $5264 = $5263;
 $5265 = HEAP32[$5264>>2]|0;
 $5266 = (($5263) + 4)|0;
 $5267 = $5266;
 $5268 = HEAP32[$5267>>2]|0;
 $5269 = (_i64Subtract(($5265|0),($5268|0),($5261|0),($5262|0))|0);
 $5270 = tempRet0;
 $5271 = $53;
 $5272 = $5271;
 HEAP32[$5272>>2] = $5269;
 $5273 = (($5271) + 4)|0;
 $5274 = $5273;
 HEAP32[$5274>>2] = $5270;
 $5275 = $55;
 $5276 = $5275;
 $5277 = HEAP32[$5276>>2]|0;
 $5278 = (($5275) + 4)|0;
 $5279 = $5278;
 $5280 = HEAP32[$5279>>2]|0;
 $5281 = (_i64Add(($5277|0),($5280|0),1048576,0)|0);
 $5282 = tempRet0;
 $5283 = (_bitshift64Ashr(($5281|0),($5282|0),21)|0);
 $5284 = tempRet0;
 $5285 = $79;
 $5286 = $5285;
 HEAP32[$5286>>2] = $5283;
 $5287 = (($5285) + 4)|0;
 $5288 = $5287;
 HEAP32[$5288>>2] = $5284;
 $5289 = $79;
 $5290 = $5289;
 $5291 = HEAP32[$5290>>2]|0;
 $5292 = (($5289) + 4)|0;
 $5293 = $5292;
 $5294 = HEAP32[$5293>>2]|0;
 $5295 = $56;
 $5296 = $5295;
 $5297 = HEAP32[$5296>>2]|0;
 $5298 = (($5295) + 4)|0;
 $5299 = $5298;
 $5300 = HEAP32[$5299>>2]|0;
 $5301 = (_i64Add(($5297|0),($5300|0),($5291|0),($5294|0))|0);
 $5302 = tempRet0;
 $5303 = $56;
 $5304 = $5303;
 HEAP32[$5304>>2] = $5301;
 $5305 = (($5303) + 4)|0;
 $5306 = $5305;
 HEAP32[$5306>>2] = $5302;
 $5307 = $79;
 $5308 = $5307;
 $5309 = HEAP32[$5308>>2]|0;
 $5310 = (($5307) + 4)|0;
 $5311 = $5310;
 $5312 = HEAP32[$5311>>2]|0;
 $5313 = (_bitshift64Shl(($5309|0),($5312|0),21)|0);
 $5314 = tempRet0;
 $5315 = $55;
 $5316 = $5315;
 $5317 = HEAP32[$5316>>2]|0;
 $5318 = (($5315) + 4)|0;
 $5319 = $5318;
 $5320 = HEAP32[$5319>>2]|0;
 $5321 = (_i64Subtract(($5317|0),($5320|0),($5313|0),($5314|0))|0);
 $5322 = tempRet0;
 $5323 = $55;
 $5324 = $5323;
 HEAP32[$5324>>2] = $5321;
 $5325 = (($5323) + 4)|0;
 $5326 = $5325;
 HEAP32[$5326>>2] = $5322;
 $5327 = $57;
 $5328 = $5327;
 $5329 = HEAP32[$5328>>2]|0;
 $5330 = (($5327) + 4)|0;
 $5331 = $5330;
 $5332 = HEAP32[$5331>>2]|0;
 $5333 = (_i64Add(($5329|0),($5332|0),1048576,0)|0);
 $5334 = tempRet0;
 $5335 = (_bitshift64Ashr(($5333|0),($5334|0),21)|0);
 $5336 = tempRet0;
 $5337 = $81;
 $5338 = $5337;
 HEAP32[$5338>>2] = $5335;
 $5339 = (($5337) + 4)|0;
 $5340 = $5339;
 HEAP32[$5340>>2] = $5336;
 $5341 = $81;
 $5342 = $5341;
 $5343 = HEAP32[$5342>>2]|0;
 $5344 = (($5341) + 4)|0;
 $5345 = $5344;
 $5346 = HEAP32[$5345>>2]|0;
 $5347 = $58;
 $5348 = $5347;
 $5349 = HEAP32[$5348>>2]|0;
 $5350 = (($5347) + 4)|0;
 $5351 = $5350;
 $5352 = HEAP32[$5351>>2]|0;
 $5353 = (_i64Add(($5349|0),($5352|0),($5343|0),($5346|0))|0);
 $5354 = tempRet0;
 $5355 = $58;
 $5356 = $5355;
 HEAP32[$5356>>2] = $5353;
 $5357 = (($5355) + 4)|0;
 $5358 = $5357;
 HEAP32[$5358>>2] = $5354;
 $5359 = $81;
 $5360 = $5359;
 $5361 = HEAP32[$5360>>2]|0;
 $5362 = (($5359) + 4)|0;
 $5363 = $5362;
 $5364 = HEAP32[$5363>>2]|0;
 $5365 = (_bitshift64Shl(($5361|0),($5364|0),21)|0);
 $5366 = tempRet0;
 $5367 = $57;
 $5368 = $5367;
 $5369 = HEAP32[$5368>>2]|0;
 $5370 = (($5367) + 4)|0;
 $5371 = $5370;
 $5372 = HEAP32[$5371>>2]|0;
 $5373 = (_i64Subtract(($5369|0),($5372|0),($5365|0),($5366|0))|0);
 $5374 = tempRet0;
 $5375 = $57;
 $5376 = $5375;
 HEAP32[$5376>>2] = $5373;
 $5377 = (($5375) + 4)|0;
 $5378 = $5377;
 HEAP32[$5378>>2] = $5374;
 $5379 = $59;
 $5380 = $5379;
 $5381 = HEAP32[$5380>>2]|0;
 $5382 = (($5379) + 4)|0;
 $5383 = $5382;
 $5384 = HEAP32[$5383>>2]|0;
 $5385 = (_i64Add(($5381|0),($5384|0),1048576,0)|0);
 $5386 = tempRet0;
 $5387 = (_bitshift64Ashr(($5385|0),($5386|0),21)|0);
 $5388 = tempRet0;
 $5389 = $83;
 $5390 = $5389;
 HEAP32[$5390>>2] = $5387;
 $5391 = (($5389) + 4)|0;
 $5392 = $5391;
 HEAP32[$5392>>2] = $5388;
 $5393 = $83;
 $5394 = $5393;
 $5395 = HEAP32[$5394>>2]|0;
 $5396 = (($5393) + 4)|0;
 $5397 = $5396;
 $5398 = HEAP32[$5397>>2]|0;
 $5399 = $60;
 $5400 = $5399;
 $5401 = HEAP32[$5400>>2]|0;
 $5402 = (($5399) + 4)|0;
 $5403 = $5402;
 $5404 = HEAP32[$5403>>2]|0;
 $5405 = (_i64Add(($5401|0),($5404|0),($5395|0),($5398|0))|0);
 $5406 = tempRet0;
 $5407 = $60;
 $5408 = $5407;
 HEAP32[$5408>>2] = $5405;
 $5409 = (($5407) + 4)|0;
 $5410 = $5409;
 HEAP32[$5410>>2] = $5406;
 $5411 = $83;
 $5412 = $5411;
 $5413 = HEAP32[$5412>>2]|0;
 $5414 = (($5411) + 4)|0;
 $5415 = $5414;
 $5416 = HEAP32[$5415>>2]|0;
 $5417 = (_bitshift64Shl(($5413|0),($5416|0),21)|0);
 $5418 = tempRet0;
 $5419 = $59;
 $5420 = $5419;
 $5421 = HEAP32[$5420>>2]|0;
 $5422 = (($5419) + 4)|0;
 $5423 = $5422;
 $5424 = HEAP32[$5423>>2]|0;
 $5425 = (_i64Subtract(($5421|0),($5424|0),($5417|0),($5418|0))|0);
 $5426 = tempRet0;
 $5427 = $59;
 $5428 = $5427;
 HEAP32[$5428>>2] = $5425;
 $5429 = (($5427) + 4)|0;
 $5430 = $5429;
 HEAP32[$5430>>2] = $5426;
 $5431 = $61;
 $5432 = $5431;
 $5433 = HEAP32[$5432>>2]|0;
 $5434 = (($5431) + 4)|0;
 $5435 = $5434;
 $5436 = HEAP32[$5435>>2]|0;
 $5437 = (___muldi3(($5433|0),($5436|0),666643,0)|0);
 $5438 = tempRet0;
 $5439 = $49;
 $5440 = $5439;
 $5441 = HEAP32[$5440>>2]|0;
 $5442 = (($5439) + 4)|0;
 $5443 = $5442;
 $5444 = HEAP32[$5443>>2]|0;
 $5445 = (_i64Add(($5441|0),($5444|0),($5437|0),($5438|0))|0);
 $5446 = tempRet0;
 $5447 = $49;
 $5448 = $5447;
 HEAP32[$5448>>2] = $5445;
 $5449 = (($5447) + 4)|0;
 $5450 = $5449;
 HEAP32[$5450>>2] = $5446;
 $5451 = $61;
 $5452 = $5451;
 $5453 = HEAP32[$5452>>2]|0;
 $5454 = (($5451) + 4)|0;
 $5455 = $5454;
 $5456 = HEAP32[$5455>>2]|0;
 $5457 = (___muldi3(($5453|0),($5456|0),470296,0)|0);
 $5458 = tempRet0;
 $5459 = $50;
 $5460 = $5459;
 $5461 = HEAP32[$5460>>2]|0;
 $5462 = (($5459) + 4)|0;
 $5463 = $5462;
 $5464 = HEAP32[$5463>>2]|0;
 $5465 = (_i64Add(($5461|0),($5464|0),($5457|0),($5458|0))|0);
 $5466 = tempRet0;
 $5467 = $50;
 $5468 = $5467;
 HEAP32[$5468>>2] = $5465;
 $5469 = (($5467) + 4)|0;
 $5470 = $5469;
 HEAP32[$5470>>2] = $5466;
 $5471 = $61;
 $5472 = $5471;
 $5473 = HEAP32[$5472>>2]|0;
 $5474 = (($5471) + 4)|0;
 $5475 = $5474;
 $5476 = HEAP32[$5475>>2]|0;
 $5477 = (___muldi3(($5473|0),($5476|0),654183,0)|0);
 $5478 = tempRet0;
 $5479 = $51;
 $5480 = $5479;
 $5481 = HEAP32[$5480>>2]|0;
 $5482 = (($5479) + 4)|0;
 $5483 = $5482;
 $5484 = HEAP32[$5483>>2]|0;
 $5485 = (_i64Add(($5481|0),($5484|0),($5477|0),($5478|0))|0);
 $5486 = tempRet0;
 $5487 = $51;
 $5488 = $5487;
 HEAP32[$5488>>2] = $5485;
 $5489 = (($5487) + 4)|0;
 $5490 = $5489;
 HEAP32[$5490>>2] = $5486;
 $5491 = $61;
 $5492 = $5491;
 $5493 = HEAP32[$5492>>2]|0;
 $5494 = (($5491) + 4)|0;
 $5495 = $5494;
 $5496 = HEAP32[$5495>>2]|0;
 $5497 = (___muldi3(($5493|0),($5496|0),997805,0)|0);
 $5498 = tempRet0;
 $5499 = $52;
 $5500 = $5499;
 $5501 = HEAP32[$5500>>2]|0;
 $5502 = (($5499) + 4)|0;
 $5503 = $5502;
 $5504 = HEAP32[$5503>>2]|0;
 $5505 = (_i64Subtract(($5501|0),($5504|0),($5497|0),($5498|0))|0);
 $5506 = tempRet0;
 $5507 = $52;
 $5508 = $5507;
 HEAP32[$5508>>2] = $5505;
 $5509 = (($5507) + 4)|0;
 $5510 = $5509;
 HEAP32[$5510>>2] = $5506;
 $5511 = $61;
 $5512 = $5511;
 $5513 = HEAP32[$5512>>2]|0;
 $5514 = (($5511) + 4)|0;
 $5515 = $5514;
 $5516 = HEAP32[$5515>>2]|0;
 $5517 = (___muldi3(($5513|0),($5516|0),136657,0)|0);
 $5518 = tempRet0;
 $5519 = $53;
 $5520 = $5519;
 $5521 = HEAP32[$5520>>2]|0;
 $5522 = (($5519) + 4)|0;
 $5523 = $5522;
 $5524 = HEAP32[$5523>>2]|0;
 $5525 = (_i64Add(($5521|0),($5524|0),($5517|0),($5518|0))|0);
 $5526 = tempRet0;
 $5527 = $53;
 $5528 = $5527;
 HEAP32[$5528>>2] = $5525;
 $5529 = (($5527) + 4)|0;
 $5530 = $5529;
 HEAP32[$5530>>2] = $5526;
 $5531 = $61;
 $5532 = $5531;
 $5533 = HEAP32[$5532>>2]|0;
 $5534 = (($5531) + 4)|0;
 $5535 = $5534;
 $5536 = HEAP32[$5535>>2]|0;
 $5537 = (___muldi3(($5533|0),($5536|0),683901,0)|0);
 $5538 = tempRet0;
 $5539 = $54;
 $5540 = $5539;
 $5541 = HEAP32[$5540>>2]|0;
 $5542 = (($5539) + 4)|0;
 $5543 = $5542;
 $5544 = HEAP32[$5543>>2]|0;
 $5545 = (_i64Subtract(($5541|0),($5544|0),($5537|0),($5538|0))|0);
 $5546 = tempRet0;
 $5547 = $54;
 $5548 = $5547;
 HEAP32[$5548>>2] = $5545;
 $5549 = (($5547) + 4)|0;
 $5550 = $5549;
 HEAP32[$5550>>2] = $5546;
 $5551 = $61;
 $5552 = $5551;
 HEAP32[$5552>>2] = 0;
 $5553 = (($5551) + 4)|0;
 $5554 = $5553;
 HEAP32[$5554>>2] = 0;
 $5555 = $60;
 $5556 = $5555;
 $5557 = HEAP32[$5556>>2]|0;
 $5558 = (($5555) + 4)|0;
 $5559 = $5558;
 $5560 = HEAP32[$5559>>2]|0;
 $5561 = (___muldi3(($5557|0),($5560|0),666643,0)|0);
 $5562 = tempRet0;
 $5563 = $48;
 $5564 = $5563;
 $5565 = HEAP32[$5564>>2]|0;
 $5566 = (($5563) + 4)|0;
 $5567 = $5566;
 $5568 = HEAP32[$5567>>2]|0;
 $5569 = (_i64Add(($5565|0),($5568|0),($5561|0),($5562|0))|0);
 $5570 = tempRet0;
 $5571 = $48;
 $5572 = $5571;
 HEAP32[$5572>>2] = $5569;
 $5573 = (($5571) + 4)|0;
 $5574 = $5573;
 HEAP32[$5574>>2] = $5570;
 $5575 = $60;
 $5576 = $5575;
 $5577 = HEAP32[$5576>>2]|0;
 $5578 = (($5575) + 4)|0;
 $5579 = $5578;
 $5580 = HEAP32[$5579>>2]|0;
 $5581 = (___muldi3(($5577|0),($5580|0),470296,0)|0);
 $5582 = tempRet0;
 $5583 = $49;
 $5584 = $5583;
 $5585 = HEAP32[$5584>>2]|0;
 $5586 = (($5583) + 4)|0;
 $5587 = $5586;
 $5588 = HEAP32[$5587>>2]|0;
 $5589 = (_i64Add(($5585|0),($5588|0),($5581|0),($5582|0))|0);
 $5590 = tempRet0;
 $5591 = $49;
 $5592 = $5591;
 HEAP32[$5592>>2] = $5589;
 $5593 = (($5591) + 4)|0;
 $5594 = $5593;
 HEAP32[$5594>>2] = $5590;
 $5595 = $60;
 $5596 = $5595;
 $5597 = HEAP32[$5596>>2]|0;
 $5598 = (($5595) + 4)|0;
 $5599 = $5598;
 $5600 = HEAP32[$5599>>2]|0;
 $5601 = (___muldi3(($5597|0),($5600|0),654183,0)|0);
 $5602 = tempRet0;
 $5603 = $50;
 $5604 = $5603;
 $5605 = HEAP32[$5604>>2]|0;
 $5606 = (($5603) + 4)|0;
 $5607 = $5606;
 $5608 = HEAP32[$5607>>2]|0;
 $5609 = (_i64Add(($5605|0),($5608|0),($5601|0),($5602|0))|0);
 $5610 = tempRet0;
 $5611 = $50;
 $5612 = $5611;
 HEAP32[$5612>>2] = $5609;
 $5613 = (($5611) + 4)|0;
 $5614 = $5613;
 HEAP32[$5614>>2] = $5610;
 $5615 = $60;
 $5616 = $5615;
 $5617 = HEAP32[$5616>>2]|0;
 $5618 = (($5615) + 4)|0;
 $5619 = $5618;
 $5620 = HEAP32[$5619>>2]|0;
 $5621 = (___muldi3(($5617|0),($5620|0),997805,0)|0);
 $5622 = tempRet0;
 $5623 = $51;
 $5624 = $5623;
 $5625 = HEAP32[$5624>>2]|0;
 $5626 = (($5623) + 4)|0;
 $5627 = $5626;
 $5628 = HEAP32[$5627>>2]|0;
 $5629 = (_i64Subtract(($5625|0),($5628|0),($5621|0),($5622|0))|0);
 $5630 = tempRet0;
 $5631 = $51;
 $5632 = $5631;
 HEAP32[$5632>>2] = $5629;
 $5633 = (($5631) + 4)|0;
 $5634 = $5633;
 HEAP32[$5634>>2] = $5630;
 $5635 = $60;
 $5636 = $5635;
 $5637 = HEAP32[$5636>>2]|0;
 $5638 = (($5635) + 4)|0;
 $5639 = $5638;
 $5640 = HEAP32[$5639>>2]|0;
 $5641 = (___muldi3(($5637|0),($5640|0),136657,0)|0);
 $5642 = tempRet0;
 $5643 = $52;
 $5644 = $5643;
 $5645 = HEAP32[$5644>>2]|0;
 $5646 = (($5643) + 4)|0;
 $5647 = $5646;
 $5648 = HEAP32[$5647>>2]|0;
 $5649 = (_i64Add(($5645|0),($5648|0),($5641|0),($5642|0))|0);
 $5650 = tempRet0;
 $5651 = $52;
 $5652 = $5651;
 HEAP32[$5652>>2] = $5649;
 $5653 = (($5651) + 4)|0;
 $5654 = $5653;
 HEAP32[$5654>>2] = $5650;
 $5655 = $60;
 $5656 = $5655;
 $5657 = HEAP32[$5656>>2]|0;
 $5658 = (($5655) + 4)|0;
 $5659 = $5658;
 $5660 = HEAP32[$5659>>2]|0;
 $5661 = (___muldi3(($5657|0),($5660|0),683901,0)|0);
 $5662 = tempRet0;
 $5663 = $53;
 $5664 = $5663;
 $5665 = HEAP32[$5664>>2]|0;
 $5666 = (($5663) + 4)|0;
 $5667 = $5666;
 $5668 = HEAP32[$5667>>2]|0;
 $5669 = (_i64Subtract(($5665|0),($5668|0),($5661|0),($5662|0))|0);
 $5670 = tempRet0;
 $5671 = $53;
 $5672 = $5671;
 HEAP32[$5672>>2] = $5669;
 $5673 = (($5671) + 4)|0;
 $5674 = $5673;
 HEAP32[$5674>>2] = $5670;
 $5675 = $60;
 $5676 = $5675;
 HEAP32[$5676>>2] = 0;
 $5677 = (($5675) + 4)|0;
 $5678 = $5677;
 HEAP32[$5678>>2] = 0;
 $5679 = $59;
 $5680 = $5679;
 $5681 = HEAP32[$5680>>2]|0;
 $5682 = (($5679) + 4)|0;
 $5683 = $5682;
 $5684 = HEAP32[$5683>>2]|0;
 $5685 = (___muldi3(($5681|0),($5684|0),666643,0)|0);
 $5686 = tempRet0;
 $5687 = $47;
 $5688 = $5687;
 $5689 = HEAP32[$5688>>2]|0;
 $5690 = (($5687) + 4)|0;
 $5691 = $5690;
 $5692 = HEAP32[$5691>>2]|0;
 $5693 = (_i64Add(($5689|0),($5692|0),($5685|0),($5686|0))|0);
 $5694 = tempRet0;
 $5695 = $47;
 $5696 = $5695;
 HEAP32[$5696>>2] = $5693;
 $5697 = (($5695) + 4)|0;
 $5698 = $5697;
 HEAP32[$5698>>2] = $5694;
 $5699 = $59;
 $5700 = $5699;
 $5701 = HEAP32[$5700>>2]|0;
 $5702 = (($5699) + 4)|0;
 $5703 = $5702;
 $5704 = HEAP32[$5703>>2]|0;
 $5705 = (___muldi3(($5701|0),($5704|0),470296,0)|0);
 $5706 = tempRet0;
 $5707 = $48;
 $5708 = $5707;
 $5709 = HEAP32[$5708>>2]|0;
 $5710 = (($5707) + 4)|0;
 $5711 = $5710;
 $5712 = HEAP32[$5711>>2]|0;
 $5713 = (_i64Add(($5709|0),($5712|0),($5705|0),($5706|0))|0);
 $5714 = tempRet0;
 $5715 = $48;
 $5716 = $5715;
 HEAP32[$5716>>2] = $5713;
 $5717 = (($5715) + 4)|0;
 $5718 = $5717;
 HEAP32[$5718>>2] = $5714;
 $5719 = $59;
 $5720 = $5719;
 $5721 = HEAP32[$5720>>2]|0;
 $5722 = (($5719) + 4)|0;
 $5723 = $5722;
 $5724 = HEAP32[$5723>>2]|0;
 $5725 = (___muldi3(($5721|0),($5724|0),654183,0)|0);
 $5726 = tempRet0;
 $5727 = $49;
 $5728 = $5727;
 $5729 = HEAP32[$5728>>2]|0;
 $5730 = (($5727) + 4)|0;
 $5731 = $5730;
 $5732 = HEAP32[$5731>>2]|0;
 $5733 = (_i64Add(($5729|0),($5732|0),($5725|0),($5726|0))|0);
 $5734 = tempRet0;
 $5735 = $49;
 $5736 = $5735;
 HEAP32[$5736>>2] = $5733;
 $5737 = (($5735) + 4)|0;
 $5738 = $5737;
 HEAP32[$5738>>2] = $5734;
 $5739 = $59;
 $5740 = $5739;
 $5741 = HEAP32[$5740>>2]|0;
 $5742 = (($5739) + 4)|0;
 $5743 = $5742;
 $5744 = HEAP32[$5743>>2]|0;
 $5745 = (___muldi3(($5741|0),($5744|0),997805,0)|0);
 $5746 = tempRet0;
 $5747 = $50;
 $5748 = $5747;
 $5749 = HEAP32[$5748>>2]|0;
 $5750 = (($5747) + 4)|0;
 $5751 = $5750;
 $5752 = HEAP32[$5751>>2]|0;
 $5753 = (_i64Subtract(($5749|0),($5752|0),($5745|0),($5746|0))|0);
 $5754 = tempRet0;
 $5755 = $50;
 $5756 = $5755;
 HEAP32[$5756>>2] = $5753;
 $5757 = (($5755) + 4)|0;
 $5758 = $5757;
 HEAP32[$5758>>2] = $5754;
 $5759 = $59;
 $5760 = $5759;
 $5761 = HEAP32[$5760>>2]|0;
 $5762 = (($5759) + 4)|0;
 $5763 = $5762;
 $5764 = HEAP32[$5763>>2]|0;
 $5765 = (___muldi3(($5761|0),($5764|0),136657,0)|0);
 $5766 = tempRet0;
 $5767 = $51;
 $5768 = $5767;
 $5769 = HEAP32[$5768>>2]|0;
 $5770 = (($5767) + 4)|0;
 $5771 = $5770;
 $5772 = HEAP32[$5771>>2]|0;
 $5773 = (_i64Add(($5769|0),($5772|0),($5765|0),($5766|0))|0);
 $5774 = tempRet0;
 $5775 = $51;
 $5776 = $5775;
 HEAP32[$5776>>2] = $5773;
 $5777 = (($5775) + 4)|0;
 $5778 = $5777;
 HEAP32[$5778>>2] = $5774;
 $5779 = $59;
 $5780 = $5779;
 $5781 = HEAP32[$5780>>2]|0;
 $5782 = (($5779) + 4)|0;
 $5783 = $5782;
 $5784 = HEAP32[$5783>>2]|0;
 $5785 = (___muldi3(($5781|0),($5784|0),683901,0)|0);
 $5786 = tempRet0;
 $5787 = $52;
 $5788 = $5787;
 $5789 = HEAP32[$5788>>2]|0;
 $5790 = (($5787) + 4)|0;
 $5791 = $5790;
 $5792 = HEAP32[$5791>>2]|0;
 $5793 = (_i64Subtract(($5789|0),($5792|0),($5785|0),($5786|0))|0);
 $5794 = tempRet0;
 $5795 = $52;
 $5796 = $5795;
 HEAP32[$5796>>2] = $5793;
 $5797 = (($5795) + 4)|0;
 $5798 = $5797;
 HEAP32[$5798>>2] = $5794;
 $5799 = $59;
 $5800 = $5799;
 HEAP32[$5800>>2] = 0;
 $5801 = (($5799) + 4)|0;
 $5802 = $5801;
 HEAP32[$5802>>2] = 0;
 $5803 = $58;
 $5804 = $5803;
 $5805 = HEAP32[$5804>>2]|0;
 $5806 = (($5803) + 4)|0;
 $5807 = $5806;
 $5808 = HEAP32[$5807>>2]|0;
 $5809 = (___muldi3(($5805|0),($5808|0),666643,0)|0);
 $5810 = tempRet0;
 $5811 = $46;
 $5812 = $5811;
 $5813 = HEAP32[$5812>>2]|0;
 $5814 = (($5811) + 4)|0;
 $5815 = $5814;
 $5816 = HEAP32[$5815>>2]|0;
 $5817 = (_i64Add(($5813|0),($5816|0),($5809|0),($5810|0))|0);
 $5818 = tempRet0;
 $5819 = $46;
 $5820 = $5819;
 HEAP32[$5820>>2] = $5817;
 $5821 = (($5819) + 4)|0;
 $5822 = $5821;
 HEAP32[$5822>>2] = $5818;
 $5823 = $58;
 $5824 = $5823;
 $5825 = HEAP32[$5824>>2]|0;
 $5826 = (($5823) + 4)|0;
 $5827 = $5826;
 $5828 = HEAP32[$5827>>2]|0;
 $5829 = (___muldi3(($5825|0),($5828|0),470296,0)|0);
 $5830 = tempRet0;
 $5831 = $47;
 $5832 = $5831;
 $5833 = HEAP32[$5832>>2]|0;
 $5834 = (($5831) + 4)|0;
 $5835 = $5834;
 $5836 = HEAP32[$5835>>2]|0;
 $5837 = (_i64Add(($5833|0),($5836|0),($5829|0),($5830|0))|0);
 $5838 = tempRet0;
 $5839 = $47;
 $5840 = $5839;
 HEAP32[$5840>>2] = $5837;
 $5841 = (($5839) + 4)|0;
 $5842 = $5841;
 HEAP32[$5842>>2] = $5838;
 $5843 = $58;
 $5844 = $5843;
 $5845 = HEAP32[$5844>>2]|0;
 $5846 = (($5843) + 4)|0;
 $5847 = $5846;
 $5848 = HEAP32[$5847>>2]|0;
 $5849 = (___muldi3(($5845|0),($5848|0),654183,0)|0);
 $5850 = tempRet0;
 $5851 = $48;
 $5852 = $5851;
 $5853 = HEAP32[$5852>>2]|0;
 $5854 = (($5851) + 4)|0;
 $5855 = $5854;
 $5856 = HEAP32[$5855>>2]|0;
 $5857 = (_i64Add(($5853|0),($5856|0),($5849|0),($5850|0))|0);
 $5858 = tempRet0;
 $5859 = $48;
 $5860 = $5859;
 HEAP32[$5860>>2] = $5857;
 $5861 = (($5859) + 4)|0;
 $5862 = $5861;
 HEAP32[$5862>>2] = $5858;
 $5863 = $58;
 $5864 = $5863;
 $5865 = HEAP32[$5864>>2]|0;
 $5866 = (($5863) + 4)|0;
 $5867 = $5866;
 $5868 = HEAP32[$5867>>2]|0;
 $5869 = (___muldi3(($5865|0),($5868|0),997805,0)|0);
 $5870 = tempRet0;
 $5871 = $49;
 $5872 = $5871;
 $5873 = HEAP32[$5872>>2]|0;
 $5874 = (($5871) + 4)|0;
 $5875 = $5874;
 $5876 = HEAP32[$5875>>2]|0;
 $5877 = (_i64Subtract(($5873|0),($5876|0),($5869|0),($5870|0))|0);
 $5878 = tempRet0;
 $5879 = $49;
 $5880 = $5879;
 HEAP32[$5880>>2] = $5877;
 $5881 = (($5879) + 4)|0;
 $5882 = $5881;
 HEAP32[$5882>>2] = $5878;
 $5883 = $58;
 $5884 = $5883;
 $5885 = HEAP32[$5884>>2]|0;
 $5886 = (($5883) + 4)|0;
 $5887 = $5886;
 $5888 = HEAP32[$5887>>2]|0;
 $5889 = (___muldi3(($5885|0),($5888|0),136657,0)|0);
 $5890 = tempRet0;
 $5891 = $50;
 $5892 = $5891;
 $5893 = HEAP32[$5892>>2]|0;
 $5894 = (($5891) + 4)|0;
 $5895 = $5894;
 $5896 = HEAP32[$5895>>2]|0;
 $5897 = (_i64Add(($5893|0),($5896|0),($5889|0),($5890|0))|0);
 $5898 = tempRet0;
 $5899 = $50;
 $5900 = $5899;
 HEAP32[$5900>>2] = $5897;
 $5901 = (($5899) + 4)|0;
 $5902 = $5901;
 HEAP32[$5902>>2] = $5898;
 $5903 = $58;
 $5904 = $5903;
 $5905 = HEAP32[$5904>>2]|0;
 $5906 = (($5903) + 4)|0;
 $5907 = $5906;
 $5908 = HEAP32[$5907>>2]|0;
 $5909 = (___muldi3(($5905|0),($5908|0),683901,0)|0);
 $5910 = tempRet0;
 $5911 = $51;
 $5912 = $5911;
 $5913 = HEAP32[$5912>>2]|0;
 $5914 = (($5911) + 4)|0;
 $5915 = $5914;
 $5916 = HEAP32[$5915>>2]|0;
 $5917 = (_i64Subtract(($5913|0),($5916|0),($5909|0),($5910|0))|0);
 $5918 = tempRet0;
 $5919 = $51;
 $5920 = $5919;
 HEAP32[$5920>>2] = $5917;
 $5921 = (($5919) + 4)|0;
 $5922 = $5921;
 HEAP32[$5922>>2] = $5918;
 $5923 = $58;
 $5924 = $5923;
 HEAP32[$5924>>2] = 0;
 $5925 = (($5923) + 4)|0;
 $5926 = $5925;
 HEAP32[$5926>>2] = 0;
 $5927 = $57;
 $5928 = $5927;
 $5929 = HEAP32[$5928>>2]|0;
 $5930 = (($5927) + 4)|0;
 $5931 = $5930;
 $5932 = HEAP32[$5931>>2]|0;
 $5933 = (___muldi3(($5929|0),($5932|0),666643,0)|0);
 $5934 = tempRet0;
 $5935 = $45;
 $5936 = $5935;
 $5937 = HEAP32[$5936>>2]|0;
 $5938 = (($5935) + 4)|0;
 $5939 = $5938;
 $5940 = HEAP32[$5939>>2]|0;
 $5941 = (_i64Add(($5937|0),($5940|0),($5933|0),($5934|0))|0);
 $5942 = tempRet0;
 $5943 = $45;
 $5944 = $5943;
 HEAP32[$5944>>2] = $5941;
 $5945 = (($5943) + 4)|0;
 $5946 = $5945;
 HEAP32[$5946>>2] = $5942;
 $5947 = $57;
 $5948 = $5947;
 $5949 = HEAP32[$5948>>2]|0;
 $5950 = (($5947) + 4)|0;
 $5951 = $5950;
 $5952 = HEAP32[$5951>>2]|0;
 $5953 = (___muldi3(($5949|0),($5952|0),470296,0)|0);
 $5954 = tempRet0;
 $5955 = $46;
 $5956 = $5955;
 $5957 = HEAP32[$5956>>2]|0;
 $5958 = (($5955) + 4)|0;
 $5959 = $5958;
 $5960 = HEAP32[$5959>>2]|0;
 $5961 = (_i64Add(($5957|0),($5960|0),($5953|0),($5954|0))|0);
 $5962 = tempRet0;
 $5963 = $46;
 $5964 = $5963;
 HEAP32[$5964>>2] = $5961;
 $5965 = (($5963) + 4)|0;
 $5966 = $5965;
 HEAP32[$5966>>2] = $5962;
 $5967 = $57;
 $5968 = $5967;
 $5969 = HEAP32[$5968>>2]|0;
 $5970 = (($5967) + 4)|0;
 $5971 = $5970;
 $5972 = HEAP32[$5971>>2]|0;
 $5973 = (___muldi3(($5969|0),($5972|0),654183,0)|0);
 $5974 = tempRet0;
 $5975 = $47;
 $5976 = $5975;
 $5977 = HEAP32[$5976>>2]|0;
 $5978 = (($5975) + 4)|0;
 $5979 = $5978;
 $5980 = HEAP32[$5979>>2]|0;
 $5981 = (_i64Add(($5977|0),($5980|0),($5973|0),($5974|0))|0);
 $5982 = tempRet0;
 $5983 = $47;
 $5984 = $5983;
 HEAP32[$5984>>2] = $5981;
 $5985 = (($5983) + 4)|0;
 $5986 = $5985;
 HEAP32[$5986>>2] = $5982;
 $5987 = $57;
 $5988 = $5987;
 $5989 = HEAP32[$5988>>2]|0;
 $5990 = (($5987) + 4)|0;
 $5991 = $5990;
 $5992 = HEAP32[$5991>>2]|0;
 $5993 = (___muldi3(($5989|0),($5992|0),997805,0)|0);
 $5994 = tempRet0;
 $5995 = $48;
 $5996 = $5995;
 $5997 = HEAP32[$5996>>2]|0;
 $5998 = (($5995) + 4)|0;
 $5999 = $5998;
 $6000 = HEAP32[$5999>>2]|0;
 $6001 = (_i64Subtract(($5997|0),($6000|0),($5993|0),($5994|0))|0);
 $6002 = tempRet0;
 $6003 = $48;
 $6004 = $6003;
 HEAP32[$6004>>2] = $6001;
 $6005 = (($6003) + 4)|0;
 $6006 = $6005;
 HEAP32[$6006>>2] = $6002;
 $6007 = $57;
 $6008 = $6007;
 $6009 = HEAP32[$6008>>2]|0;
 $6010 = (($6007) + 4)|0;
 $6011 = $6010;
 $6012 = HEAP32[$6011>>2]|0;
 $6013 = (___muldi3(($6009|0),($6012|0),136657,0)|0);
 $6014 = tempRet0;
 $6015 = $49;
 $6016 = $6015;
 $6017 = HEAP32[$6016>>2]|0;
 $6018 = (($6015) + 4)|0;
 $6019 = $6018;
 $6020 = HEAP32[$6019>>2]|0;
 $6021 = (_i64Add(($6017|0),($6020|0),($6013|0),($6014|0))|0);
 $6022 = tempRet0;
 $6023 = $49;
 $6024 = $6023;
 HEAP32[$6024>>2] = $6021;
 $6025 = (($6023) + 4)|0;
 $6026 = $6025;
 HEAP32[$6026>>2] = $6022;
 $6027 = $57;
 $6028 = $6027;
 $6029 = HEAP32[$6028>>2]|0;
 $6030 = (($6027) + 4)|0;
 $6031 = $6030;
 $6032 = HEAP32[$6031>>2]|0;
 $6033 = (___muldi3(($6029|0),($6032|0),683901,0)|0);
 $6034 = tempRet0;
 $6035 = $50;
 $6036 = $6035;
 $6037 = HEAP32[$6036>>2]|0;
 $6038 = (($6035) + 4)|0;
 $6039 = $6038;
 $6040 = HEAP32[$6039>>2]|0;
 $6041 = (_i64Subtract(($6037|0),($6040|0),($6033|0),($6034|0))|0);
 $6042 = tempRet0;
 $6043 = $50;
 $6044 = $6043;
 HEAP32[$6044>>2] = $6041;
 $6045 = (($6043) + 4)|0;
 $6046 = $6045;
 HEAP32[$6046>>2] = $6042;
 $6047 = $57;
 $6048 = $6047;
 HEAP32[$6048>>2] = 0;
 $6049 = (($6047) + 4)|0;
 $6050 = $6049;
 HEAP32[$6050>>2] = 0;
 $6051 = $56;
 $6052 = $6051;
 $6053 = HEAP32[$6052>>2]|0;
 $6054 = (($6051) + 4)|0;
 $6055 = $6054;
 $6056 = HEAP32[$6055>>2]|0;
 $6057 = (___muldi3(($6053|0),($6056|0),666643,0)|0);
 $6058 = tempRet0;
 $6059 = $44;
 $6060 = $6059;
 $6061 = HEAP32[$6060>>2]|0;
 $6062 = (($6059) + 4)|0;
 $6063 = $6062;
 $6064 = HEAP32[$6063>>2]|0;
 $6065 = (_i64Add(($6061|0),($6064|0),($6057|0),($6058|0))|0);
 $6066 = tempRet0;
 $6067 = $44;
 $6068 = $6067;
 HEAP32[$6068>>2] = $6065;
 $6069 = (($6067) + 4)|0;
 $6070 = $6069;
 HEAP32[$6070>>2] = $6066;
 $6071 = $56;
 $6072 = $6071;
 $6073 = HEAP32[$6072>>2]|0;
 $6074 = (($6071) + 4)|0;
 $6075 = $6074;
 $6076 = HEAP32[$6075>>2]|0;
 $6077 = (___muldi3(($6073|0),($6076|0),470296,0)|0);
 $6078 = tempRet0;
 $6079 = $45;
 $6080 = $6079;
 $6081 = HEAP32[$6080>>2]|0;
 $6082 = (($6079) + 4)|0;
 $6083 = $6082;
 $6084 = HEAP32[$6083>>2]|0;
 $6085 = (_i64Add(($6081|0),($6084|0),($6077|0),($6078|0))|0);
 $6086 = tempRet0;
 $6087 = $45;
 $6088 = $6087;
 HEAP32[$6088>>2] = $6085;
 $6089 = (($6087) + 4)|0;
 $6090 = $6089;
 HEAP32[$6090>>2] = $6086;
 $6091 = $56;
 $6092 = $6091;
 $6093 = HEAP32[$6092>>2]|0;
 $6094 = (($6091) + 4)|0;
 $6095 = $6094;
 $6096 = HEAP32[$6095>>2]|0;
 $6097 = (___muldi3(($6093|0),($6096|0),654183,0)|0);
 $6098 = tempRet0;
 $6099 = $46;
 $6100 = $6099;
 $6101 = HEAP32[$6100>>2]|0;
 $6102 = (($6099) + 4)|0;
 $6103 = $6102;
 $6104 = HEAP32[$6103>>2]|0;
 $6105 = (_i64Add(($6101|0),($6104|0),($6097|0),($6098|0))|0);
 $6106 = tempRet0;
 $6107 = $46;
 $6108 = $6107;
 HEAP32[$6108>>2] = $6105;
 $6109 = (($6107) + 4)|0;
 $6110 = $6109;
 HEAP32[$6110>>2] = $6106;
 $6111 = $56;
 $6112 = $6111;
 $6113 = HEAP32[$6112>>2]|0;
 $6114 = (($6111) + 4)|0;
 $6115 = $6114;
 $6116 = HEAP32[$6115>>2]|0;
 $6117 = (___muldi3(($6113|0),($6116|0),997805,0)|0);
 $6118 = tempRet0;
 $6119 = $47;
 $6120 = $6119;
 $6121 = HEAP32[$6120>>2]|0;
 $6122 = (($6119) + 4)|0;
 $6123 = $6122;
 $6124 = HEAP32[$6123>>2]|0;
 $6125 = (_i64Subtract(($6121|0),($6124|0),($6117|0),($6118|0))|0);
 $6126 = tempRet0;
 $6127 = $47;
 $6128 = $6127;
 HEAP32[$6128>>2] = $6125;
 $6129 = (($6127) + 4)|0;
 $6130 = $6129;
 HEAP32[$6130>>2] = $6126;
 $6131 = $56;
 $6132 = $6131;
 $6133 = HEAP32[$6132>>2]|0;
 $6134 = (($6131) + 4)|0;
 $6135 = $6134;
 $6136 = HEAP32[$6135>>2]|0;
 $6137 = (___muldi3(($6133|0),($6136|0),136657,0)|0);
 $6138 = tempRet0;
 $6139 = $48;
 $6140 = $6139;
 $6141 = HEAP32[$6140>>2]|0;
 $6142 = (($6139) + 4)|0;
 $6143 = $6142;
 $6144 = HEAP32[$6143>>2]|0;
 $6145 = (_i64Add(($6141|0),($6144|0),($6137|0),($6138|0))|0);
 $6146 = tempRet0;
 $6147 = $48;
 $6148 = $6147;
 HEAP32[$6148>>2] = $6145;
 $6149 = (($6147) + 4)|0;
 $6150 = $6149;
 HEAP32[$6150>>2] = $6146;
 $6151 = $56;
 $6152 = $6151;
 $6153 = HEAP32[$6152>>2]|0;
 $6154 = (($6151) + 4)|0;
 $6155 = $6154;
 $6156 = HEAP32[$6155>>2]|0;
 $6157 = (___muldi3(($6153|0),($6156|0),683901,0)|0);
 $6158 = tempRet0;
 $6159 = $49;
 $6160 = $6159;
 $6161 = HEAP32[$6160>>2]|0;
 $6162 = (($6159) + 4)|0;
 $6163 = $6162;
 $6164 = HEAP32[$6163>>2]|0;
 $6165 = (_i64Subtract(($6161|0),($6164|0),($6157|0),($6158|0))|0);
 $6166 = tempRet0;
 $6167 = $49;
 $6168 = $6167;
 HEAP32[$6168>>2] = $6165;
 $6169 = (($6167) + 4)|0;
 $6170 = $6169;
 HEAP32[$6170>>2] = $6166;
 $6171 = $56;
 $6172 = $6171;
 HEAP32[$6172>>2] = 0;
 $6173 = (($6171) + 4)|0;
 $6174 = $6173;
 HEAP32[$6174>>2] = 0;
 $6175 = $44;
 $6176 = $6175;
 $6177 = HEAP32[$6176>>2]|0;
 $6178 = (($6175) + 4)|0;
 $6179 = $6178;
 $6180 = HEAP32[$6179>>2]|0;
 $6181 = (_i64Add(($6177|0),($6180|0),1048576,0)|0);
 $6182 = tempRet0;
 $6183 = (_bitshift64Ashr(($6181|0),($6182|0),21)|0);
 $6184 = tempRet0;
 $6185 = $68;
 $6186 = $6185;
 HEAP32[$6186>>2] = $6183;
 $6187 = (($6185) + 4)|0;
 $6188 = $6187;
 HEAP32[$6188>>2] = $6184;
 $6189 = $68;
 $6190 = $6189;
 $6191 = HEAP32[$6190>>2]|0;
 $6192 = (($6189) + 4)|0;
 $6193 = $6192;
 $6194 = HEAP32[$6193>>2]|0;
 $6195 = $45;
 $6196 = $6195;
 $6197 = HEAP32[$6196>>2]|0;
 $6198 = (($6195) + 4)|0;
 $6199 = $6198;
 $6200 = HEAP32[$6199>>2]|0;
 $6201 = (_i64Add(($6197|0),($6200|0),($6191|0),($6194|0))|0);
 $6202 = tempRet0;
 $6203 = $45;
 $6204 = $6203;
 HEAP32[$6204>>2] = $6201;
 $6205 = (($6203) + 4)|0;
 $6206 = $6205;
 HEAP32[$6206>>2] = $6202;
 $6207 = $68;
 $6208 = $6207;
 $6209 = HEAP32[$6208>>2]|0;
 $6210 = (($6207) + 4)|0;
 $6211 = $6210;
 $6212 = HEAP32[$6211>>2]|0;
 $6213 = (_bitshift64Shl(($6209|0),($6212|0),21)|0);
 $6214 = tempRet0;
 $6215 = $44;
 $6216 = $6215;
 $6217 = HEAP32[$6216>>2]|0;
 $6218 = (($6215) + 4)|0;
 $6219 = $6218;
 $6220 = HEAP32[$6219>>2]|0;
 $6221 = (_i64Subtract(($6217|0),($6220|0),($6213|0),($6214|0))|0);
 $6222 = tempRet0;
 $6223 = $44;
 $6224 = $6223;
 HEAP32[$6224>>2] = $6221;
 $6225 = (($6223) + 4)|0;
 $6226 = $6225;
 HEAP32[$6226>>2] = $6222;
 $6227 = $46;
 $6228 = $6227;
 $6229 = HEAP32[$6228>>2]|0;
 $6230 = (($6227) + 4)|0;
 $6231 = $6230;
 $6232 = HEAP32[$6231>>2]|0;
 $6233 = (_i64Add(($6229|0),($6232|0),1048576,0)|0);
 $6234 = tempRet0;
 $6235 = (_bitshift64Ashr(($6233|0),($6234|0),21)|0);
 $6236 = tempRet0;
 $6237 = $70;
 $6238 = $6237;
 HEAP32[$6238>>2] = $6235;
 $6239 = (($6237) + 4)|0;
 $6240 = $6239;
 HEAP32[$6240>>2] = $6236;
 $6241 = $70;
 $6242 = $6241;
 $6243 = HEAP32[$6242>>2]|0;
 $6244 = (($6241) + 4)|0;
 $6245 = $6244;
 $6246 = HEAP32[$6245>>2]|0;
 $6247 = $47;
 $6248 = $6247;
 $6249 = HEAP32[$6248>>2]|0;
 $6250 = (($6247) + 4)|0;
 $6251 = $6250;
 $6252 = HEAP32[$6251>>2]|0;
 $6253 = (_i64Add(($6249|0),($6252|0),($6243|0),($6246|0))|0);
 $6254 = tempRet0;
 $6255 = $47;
 $6256 = $6255;
 HEAP32[$6256>>2] = $6253;
 $6257 = (($6255) + 4)|0;
 $6258 = $6257;
 HEAP32[$6258>>2] = $6254;
 $6259 = $70;
 $6260 = $6259;
 $6261 = HEAP32[$6260>>2]|0;
 $6262 = (($6259) + 4)|0;
 $6263 = $6262;
 $6264 = HEAP32[$6263>>2]|0;
 $6265 = (_bitshift64Shl(($6261|0),($6264|0),21)|0);
 $6266 = tempRet0;
 $6267 = $46;
 $6268 = $6267;
 $6269 = HEAP32[$6268>>2]|0;
 $6270 = (($6267) + 4)|0;
 $6271 = $6270;
 $6272 = HEAP32[$6271>>2]|0;
 $6273 = (_i64Subtract(($6269|0),($6272|0),($6265|0),($6266|0))|0);
 $6274 = tempRet0;
 $6275 = $46;
 $6276 = $6275;
 HEAP32[$6276>>2] = $6273;
 $6277 = (($6275) + 4)|0;
 $6278 = $6277;
 HEAP32[$6278>>2] = $6274;
 $6279 = $48;
 $6280 = $6279;
 $6281 = HEAP32[$6280>>2]|0;
 $6282 = (($6279) + 4)|0;
 $6283 = $6282;
 $6284 = HEAP32[$6283>>2]|0;
 $6285 = (_i64Add(($6281|0),($6284|0),1048576,0)|0);
 $6286 = tempRet0;
 $6287 = (_bitshift64Ashr(($6285|0),($6286|0),21)|0);
 $6288 = tempRet0;
 $6289 = $72;
 $6290 = $6289;
 HEAP32[$6290>>2] = $6287;
 $6291 = (($6289) + 4)|0;
 $6292 = $6291;
 HEAP32[$6292>>2] = $6288;
 $6293 = $72;
 $6294 = $6293;
 $6295 = HEAP32[$6294>>2]|0;
 $6296 = (($6293) + 4)|0;
 $6297 = $6296;
 $6298 = HEAP32[$6297>>2]|0;
 $6299 = $49;
 $6300 = $6299;
 $6301 = HEAP32[$6300>>2]|0;
 $6302 = (($6299) + 4)|0;
 $6303 = $6302;
 $6304 = HEAP32[$6303>>2]|0;
 $6305 = (_i64Add(($6301|0),($6304|0),($6295|0),($6298|0))|0);
 $6306 = tempRet0;
 $6307 = $49;
 $6308 = $6307;
 HEAP32[$6308>>2] = $6305;
 $6309 = (($6307) + 4)|0;
 $6310 = $6309;
 HEAP32[$6310>>2] = $6306;
 $6311 = $72;
 $6312 = $6311;
 $6313 = HEAP32[$6312>>2]|0;
 $6314 = (($6311) + 4)|0;
 $6315 = $6314;
 $6316 = HEAP32[$6315>>2]|0;
 $6317 = (_bitshift64Shl(($6313|0),($6316|0),21)|0);
 $6318 = tempRet0;
 $6319 = $48;
 $6320 = $6319;
 $6321 = HEAP32[$6320>>2]|0;
 $6322 = (($6319) + 4)|0;
 $6323 = $6322;
 $6324 = HEAP32[$6323>>2]|0;
 $6325 = (_i64Subtract(($6321|0),($6324|0),($6317|0),($6318|0))|0);
 $6326 = tempRet0;
 $6327 = $48;
 $6328 = $6327;
 HEAP32[$6328>>2] = $6325;
 $6329 = (($6327) + 4)|0;
 $6330 = $6329;
 HEAP32[$6330>>2] = $6326;
 $6331 = $50;
 $6332 = $6331;
 $6333 = HEAP32[$6332>>2]|0;
 $6334 = (($6331) + 4)|0;
 $6335 = $6334;
 $6336 = HEAP32[$6335>>2]|0;
 $6337 = (_i64Add(($6333|0),($6336|0),1048576,0)|0);
 $6338 = tempRet0;
 $6339 = (_bitshift64Ashr(($6337|0),($6338|0),21)|0);
 $6340 = tempRet0;
 $6341 = $74;
 $6342 = $6341;
 HEAP32[$6342>>2] = $6339;
 $6343 = (($6341) + 4)|0;
 $6344 = $6343;
 HEAP32[$6344>>2] = $6340;
 $6345 = $74;
 $6346 = $6345;
 $6347 = HEAP32[$6346>>2]|0;
 $6348 = (($6345) + 4)|0;
 $6349 = $6348;
 $6350 = HEAP32[$6349>>2]|0;
 $6351 = $51;
 $6352 = $6351;
 $6353 = HEAP32[$6352>>2]|0;
 $6354 = (($6351) + 4)|0;
 $6355 = $6354;
 $6356 = HEAP32[$6355>>2]|0;
 $6357 = (_i64Add(($6353|0),($6356|0),($6347|0),($6350|0))|0);
 $6358 = tempRet0;
 $6359 = $51;
 $6360 = $6359;
 HEAP32[$6360>>2] = $6357;
 $6361 = (($6359) + 4)|0;
 $6362 = $6361;
 HEAP32[$6362>>2] = $6358;
 $6363 = $74;
 $6364 = $6363;
 $6365 = HEAP32[$6364>>2]|0;
 $6366 = (($6363) + 4)|0;
 $6367 = $6366;
 $6368 = HEAP32[$6367>>2]|0;
 $6369 = (_bitshift64Shl(($6365|0),($6368|0),21)|0);
 $6370 = tempRet0;
 $6371 = $50;
 $6372 = $6371;
 $6373 = HEAP32[$6372>>2]|0;
 $6374 = (($6371) + 4)|0;
 $6375 = $6374;
 $6376 = HEAP32[$6375>>2]|0;
 $6377 = (_i64Subtract(($6373|0),($6376|0),($6369|0),($6370|0))|0);
 $6378 = tempRet0;
 $6379 = $50;
 $6380 = $6379;
 HEAP32[$6380>>2] = $6377;
 $6381 = (($6379) + 4)|0;
 $6382 = $6381;
 HEAP32[$6382>>2] = $6378;
 $6383 = $52;
 $6384 = $6383;
 $6385 = HEAP32[$6384>>2]|0;
 $6386 = (($6383) + 4)|0;
 $6387 = $6386;
 $6388 = HEAP32[$6387>>2]|0;
 $6389 = (_i64Add(($6385|0),($6388|0),1048576,0)|0);
 $6390 = tempRet0;
 $6391 = (_bitshift64Ashr(($6389|0),($6390|0),21)|0);
 $6392 = tempRet0;
 $6393 = $76;
 $6394 = $6393;
 HEAP32[$6394>>2] = $6391;
 $6395 = (($6393) + 4)|0;
 $6396 = $6395;
 HEAP32[$6396>>2] = $6392;
 $6397 = $76;
 $6398 = $6397;
 $6399 = HEAP32[$6398>>2]|0;
 $6400 = (($6397) + 4)|0;
 $6401 = $6400;
 $6402 = HEAP32[$6401>>2]|0;
 $6403 = $53;
 $6404 = $6403;
 $6405 = HEAP32[$6404>>2]|0;
 $6406 = (($6403) + 4)|0;
 $6407 = $6406;
 $6408 = HEAP32[$6407>>2]|0;
 $6409 = (_i64Add(($6405|0),($6408|0),($6399|0),($6402|0))|0);
 $6410 = tempRet0;
 $6411 = $53;
 $6412 = $6411;
 HEAP32[$6412>>2] = $6409;
 $6413 = (($6411) + 4)|0;
 $6414 = $6413;
 HEAP32[$6414>>2] = $6410;
 $6415 = $76;
 $6416 = $6415;
 $6417 = HEAP32[$6416>>2]|0;
 $6418 = (($6415) + 4)|0;
 $6419 = $6418;
 $6420 = HEAP32[$6419>>2]|0;
 $6421 = (_bitshift64Shl(($6417|0),($6420|0),21)|0);
 $6422 = tempRet0;
 $6423 = $52;
 $6424 = $6423;
 $6425 = HEAP32[$6424>>2]|0;
 $6426 = (($6423) + 4)|0;
 $6427 = $6426;
 $6428 = HEAP32[$6427>>2]|0;
 $6429 = (_i64Subtract(($6425|0),($6428|0),($6421|0),($6422|0))|0);
 $6430 = tempRet0;
 $6431 = $52;
 $6432 = $6431;
 HEAP32[$6432>>2] = $6429;
 $6433 = (($6431) + 4)|0;
 $6434 = $6433;
 HEAP32[$6434>>2] = $6430;
 $6435 = $54;
 $6436 = $6435;
 $6437 = HEAP32[$6436>>2]|0;
 $6438 = (($6435) + 4)|0;
 $6439 = $6438;
 $6440 = HEAP32[$6439>>2]|0;
 $6441 = (_i64Add(($6437|0),($6440|0),1048576,0)|0);
 $6442 = tempRet0;
 $6443 = (_bitshift64Ashr(($6441|0),($6442|0),21)|0);
 $6444 = tempRet0;
 $6445 = $78;
 $6446 = $6445;
 HEAP32[$6446>>2] = $6443;
 $6447 = (($6445) + 4)|0;
 $6448 = $6447;
 HEAP32[$6448>>2] = $6444;
 $6449 = $78;
 $6450 = $6449;
 $6451 = HEAP32[$6450>>2]|0;
 $6452 = (($6449) + 4)|0;
 $6453 = $6452;
 $6454 = HEAP32[$6453>>2]|0;
 $6455 = $55;
 $6456 = $6455;
 $6457 = HEAP32[$6456>>2]|0;
 $6458 = (($6455) + 4)|0;
 $6459 = $6458;
 $6460 = HEAP32[$6459>>2]|0;
 $6461 = (_i64Add(($6457|0),($6460|0),($6451|0),($6454|0))|0);
 $6462 = tempRet0;
 $6463 = $55;
 $6464 = $6463;
 HEAP32[$6464>>2] = $6461;
 $6465 = (($6463) + 4)|0;
 $6466 = $6465;
 HEAP32[$6466>>2] = $6462;
 $6467 = $78;
 $6468 = $6467;
 $6469 = HEAP32[$6468>>2]|0;
 $6470 = (($6467) + 4)|0;
 $6471 = $6470;
 $6472 = HEAP32[$6471>>2]|0;
 $6473 = (_bitshift64Shl(($6469|0),($6472|0),21)|0);
 $6474 = tempRet0;
 $6475 = $54;
 $6476 = $6475;
 $6477 = HEAP32[$6476>>2]|0;
 $6478 = (($6475) + 4)|0;
 $6479 = $6478;
 $6480 = HEAP32[$6479>>2]|0;
 $6481 = (_i64Subtract(($6477|0),($6480|0),($6473|0),($6474|0))|0);
 $6482 = tempRet0;
 $6483 = $54;
 $6484 = $6483;
 HEAP32[$6484>>2] = $6481;
 $6485 = (($6483) + 4)|0;
 $6486 = $6485;
 HEAP32[$6486>>2] = $6482;
 $6487 = $45;
 $6488 = $6487;
 $6489 = HEAP32[$6488>>2]|0;
 $6490 = (($6487) + 4)|0;
 $6491 = $6490;
 $6492 = HEAP32[$6491>>2]|0;
 $6493 = (_i64Add(($6489|0),($6492|0),1048576,0)|0);
 $6494 = tempRet0;
 $6495 = (_bitshift64Ashr(($6493|0),($6494|0),21)|0);
 $6496 = tempRet0;
 $6497 = $69;
 $6498 = $6497;
 HEAP32[$6498>>2] = $6495;
 $6499 = (($6497) + 4)|0;
 $6500 = $6499;
 HEAP32[$6500>>2] = $6496;
 $6501 = $69;
 $6502 = $6501;
 $6503 = HEAP32[$6502>>2]|0;
 $6504 = (($6501) + 4)|0;
 $6505 = $6504;
 $6506 = HEAP32[$6505>>2]|0;
 $6507 = $46;
 $6508 = $6507;
 $6509 = HEAP32[$6508>>2]|0;
 $6510 = (($6507) + 4)|0;
 $6511 = $6510;
 $6512 = HEAP32[$6511>>2]|0;
 $6513 = (_i64Add(($6509|0),($6512|0),($6503|0),($6506|0))|0);
 $6514 = tempRet0;
 $6515 = $46;
 $6516 = $6515;
 HEAP32[$6516>>2] = $6513;
 $6517 = (($6515) + 4)|0;
 $6518 = $6517;
 HEAP32[$6518>>2] = $6514;
 $6519 = $69;
 $6520 = $6519;
 $6521 = HEAP32[$6520>>2]|0;
 $6522 = (($6519) + 4)|0;
 $6523 = $6522;
 $6524 = HEAP32[$6523>>2]|0;
 $6525 = (_bitshift64Shl(($6521|0),($6524|0),21)|0);
 $6526 = tempRet0;
 $6527 = $45;
 $6528 = $6527;
 $6529 = HEAP32[$6528>>2]|0;
 $6530 = (($6527) + 4)|0;
 $6531 = $6530;
 $6532 = HEAP32[$6531>>2]|0;
 $6533 = (_i64Subtract(($6529|0),($6532|0),($6525|0),($6526|0))|0);
 $6534 = tempRet0;
 $6535 = $45;
 $6536 = $6535;
 HEAP32[$6536>>2] = $6533;
 $6537 = (($6535) + 4)|0;
 $6538 = $6537;
 HEAP32[$6538>>2] = $6534;
 $6539 = $47;
 $6540 = $6539;
 $6541 = HEAP32[$6540>>2]|0;
 $6542 = (($6539) + 4)|0;
 $6543 = $6542;
 $6544 = HEAP32[$6543>>2]|0;
 $6545 = (_i64Add(($6541|0),($6544|0),1048576,0)|0);
 $6546 = tempRet0;
 $6547 = (_bitshift64Ashr(($6545|0),($6546|0),21)|0);
 $6548 = tempRet0;
 $6549 = $71;
 $6550 = $6549;
 HEAP32[$6550>>2] = $6547;
 $6551 = (($6549) + 4)|0;
 $6552 = $6551;
 HEAP32[$6552>>2] = $6548;
 $6553 = $71;
 $6554 = $6553;
 $6555 = HEAP32[$6554>>2]|0;
 $6556 = (($6553) + 4)|0;
 $6557 = $6556;
 $6558 = HEAP32[$6557>>2]|0;
 $6559 = $48;
 $6560 = $6559;
 $6561 = HEAP32[$6560>>2]|0;
 $6562 = (($6559) + 4)|0;
 $6563 = $6562;
 $6564 = HEAP32[$6563>>2]|0;
 $6565 = (_i64Add(($6561|0),($6564|0),($6555|0),($6558|0))|0);
 $6566 = tempRet0;
 $6567 = $48;
 $6568 = $6567;
 HEAP32[$6568>>2] = $6565;
 $6569 = (($6567) + 4)|0;
 $6570 = $6569;
 HEAP32[$6570>>2] = $6566;
 $6571 = $71;
 $6572 = $6571;
 $6573 = HEAP32[$6572>>2]|0;
 $6574 = (($6571) + 4)|0;
 $6575 = $6574;
 $6576 = HEAP32[$6575>>2]|0;
 $6577 = (_bitshift64Shl(($6573|0),($6576|0),21)|0);
 $6578 = tempRet0;
 $6579 = $47;
 $6580 = $6579;
 $6581 = HEAP32[$6580>>2]|0;
 $6582 = (($6579) + 4)|0;
 $6583 = $6582;
 $6584 = HEAP32[$6583>>2]|0;
 $6585 = (_i64Subtract(($6581|0),($6584|0),($6577|0),($6578|0))|0);
 $6586 = tempRet0;
 $6587 = $47;
 $6588 = $6587;
 HEAP32[$6588>>2] = $6585;
 $6589 = (($6587) + 4)|0;
 $6590 = $6589;
 HEAP32[$6590>>2] = $6586;
 $6591 = $49;
 $6592 = $6591;
 $6593 = HEAP32[$6592>>2]|0;
 $6594 = (($6591) + 4)|0;
 $6595 = $6594;
 $6596 = HEAP32[$6595>>2]|0;
 $6597 = (_i64Add(($6593|0),($6596|0),1048576,0)|0);
 $6598 = tempRet0;
 $6599 = (_bitshift64Ashr(($6597|0),($6598|0),21)|0);
 $6600 = tempRet0;
 $6601 = $73;
 $6602 = $6601;
 HEAP32[$6602>>2] = $6599;
 $6603 = (($6601) + 4)|0;
 $6604 = $6603;
 HEAP32[$6604>>2] = $6600;
 $6605 = $73;
 $6606 = $6605;
 $6607 = HEAP32[$6606>>2]|0;
 $6608 = (($6605) + 4)|0;
 $6609 = $6608;
 $6610 = HEAP32[$6609>>2]|0;
 $6611 = $50;
 $6612 = $6611;
 $6613 = HEAP32[$6612>>2]|0;
 $6614 = (($6611) + 4)|0;
 $6615 = $6614;
 $6616 = HEAP32[$6615>>2]|0;
 $6617 = (_i64Add(($6613|0),($6616|0),($6607|0),($6610|0))|0);
 $6618 = tempRet0;
 $6619 = $50;
 $6620 = $6619;
 HEAP32[$6620>>2] = $6617;
 $6621 = (($6619) + 4)|0;
 $6622 = $6621;
 HEAP32[$6622>>2] = $6618;
 $6623 = $73;
 $6624 = $6623;
 $6625 = HEAP32[$6624>>2]|0;
 $6626 = (($6623) + 4)|0;
 $6627 = $6626;
 $6628 = HEAP32[$6627>>2]|0;
 $6629 = (_bitshift64Shl(($6625|0),($6628|0),21)|0);
 $6630 = tempRet0;
 $6631 = $49;
 $6632 = $6631;
 $6633 = HEAP32[$6632>>2]|0;
 $6634 = (($6631) + 4)|0;
 $6635 = $6634;
 $6636 = HEAP32[$6635>>2]|0;
 $6637 = (_i64Subtract(($6633|0),($6636|0),($6629|0),($6630|0))|0);
 $6638 = tempRet0;
 $6639 = $49;
 $6640 = $6639;
 HEAP32[$6640>>2] = $6637;
 $6641 = (($6639) + 4)|0;
 $6642 = $6641;
 HEAP32[$6642>>2] = $6638;
 $6643 = $51;
 $6644 = $6643;
 $6645 = HEAP32[$6644>>2]|0;
 $6646 = (($6643) + 4)|0;
 $6647 = $6646;
 $6648 = HEAP32[$6647>>2]|0;
 $6649 = (_i64Add(($6645|0),($6648|0),1048576,0)|0);
 $6650 = tempRet0;
 $6651 = (_bitshift64Ashr(($6649|0),($6650|0),21)|0);
 $6652 = tempRet0;
 $6653 = $75;
 $6654 = $6653;
 HEAP32[$6654>>2] = $6651;
 $6655 = (($6653) + 4)|0;
 $6656 = $6655;
 HEAP32[$6656>>2] = $6652;
 $6657 = $75;
 $6658 = $6657;
 $6659 = HEAP32[$6658>>2]|0;
 $6660 = (($6657) + 4)|0;
 $6661 = $6660;
 $6662 = HEAP32[$6661>>2]|0;
 $6663 = $52;
 $6664 = $6663;
 $6665 = HEAP32[$6664>>2]|0;
 $6666 = (($6663) + 4)|0;
 $6667 = $6666;
 $6668 = HEAP32[$6667>>2]|0;
 $6669 = (_i64Add(($6665|0),($6668|0),($6659|0),($6662|0))|0);
 $6670 = tempRet0;
 $6671 = $52;
 $6672 = $6671;
 HEAP32[$6672>>2] = $6669;
 $6673 = (($6671) + 4)|0;
 $6674 = $6673;
 HEAP32[$6674>>2] = $6670;
 $6675 = $75;
 $6676 = $6675;
 $6677 = HEAP32[$6676>>2]|0;
 $6678 = (($6675) + 4)|0;
 $6679 = $6678;
 $6680 = HEAP32[$6679>>2]|0;
 $6681 = (_bitshift64Shl(($6677|0),($6680|0),21)|0);
 $6682 = tempRet0;
 $6683 = $51;
 $6684 = $6683;
 $6685 = HEAP32[$6684>>2]|0;
 $6686 = (($6683) + 4)|0;
 $6687 = $6686;
 $6688 = HEAP32[$6687>>2]|0;
 $6689 = (_i64Subtract(($6685|0),($6688|0),($6681|0),($6682|0))|0);
 $6690 = tempRet0;
 $6691 = $51;
 $6692 = $6691;
 HEAP32[$6692>>2] = $6689;
 $6693 = (($6691) + 4)|0;
 $6694 = $6693;
 HEAP32[$6694>>2] = $6690;
 $6695 = $53;
 $6696 = $6695;
 $6697 = HEAP32[$6696>>2]|0;
 $6698 = (($6695) + 4)|0;
 $6699 = $6698;
 $6700 = HEAP32[$6699>>2]|0;
 $6701 = (_i64Add(($6697|0),($6700|0),1048576,0)|0);
 $6702 = tempRet0;
 $6703 = (_bitshift64Ashr(($6701|0),($6702|0),21)|0);
 $6704 = tempRet0;
 $6705 = $77;
 $6706 = $6705;
 HEAP32[$6706>>2] = $6703;
 $6707 = (($6705) + 4)|0;
 $6708 = $6707;
 HEAP32[$6708>>2] = $6704;
 $6709 = $77;
 $6710 = $6709;
 $6711 = HEAP32[$6710>>2]|0;
 $6712 = (($6709) + 4)|0;
 $6713 = $6712;
 $6714 = HEAP32[$6713>>2]|0;
 $6715 = $54;
 $6716 = $6715;
 $6717 = HEAP32[$6716>>2]|0;
 $6718 = (($6715) + 4)|0;
 $6719 = $6718;
 $6720 = HEAP32[$6719>>2]|0;
 $6721 = (_i64Add(($6717|0),($6720|0),($6711|0),($6714|0))|0);
 $6722 = tempRet0;
 $6723 = $54;
 $6724 = $6723;
 HEAP32[$6724>>2] = $6721;
 $6725 = (($6723) + 4)|0;
 $6726 = $6725;
 HEAP32[$6726>>2] = $6722;
 $6727 = $77;
 $6728 = $6727;
 $6729 = HEAP32[$6728>>2]|0;
 $6730 = (($6727) + 4)|0;
 $6731 = $6730;
 $6732 = HEAP32[$6731>>2]|0;
 $6733 = (_bitshift64Shl(($6729|0),($6732|0),21)|0);
 $6734 = tempRet0;
 $6735 = $53;
 $6736 = $6735;
 $6737 = HEAP32[$6736>>2]|0;
 $6738 = (($6735) + 4)|0;
 $6739 = $6738;
 $6740 = HEAP32[$6739>>2]|0;
 $6741 = (_i64Subtract(($6737|0),($6740|0),($6733|0),($6734|0))|0);
 $6742 = tempRet0;
 $6743 = $53;
 $6744 = $6743;
 HEAP32[$6744>>2] = $6741;
 $6745 = (($6743) + 4)|0;
 $6746 = $6745;
 HEAP32[$6746>>2] = $6742;
 $6747 = $55;
 $6748 = $6747;
 $6749 = HEAP32[$6748>>2]|0;
 $6750 = (($6747) + 4)|0;
 $6751 = $6750;
 $6752 = HEAP32[$6751>>2]|0;
 $6753 = (_i64Add(($6749|0),($6752|0),1048576,0)|0);
 $6754 = tempRet0;
 $6755 = (_bitshift64Ashr(($6753|0),($6754|0),21)|0);
 $6756 = tempRet0;
 $6757 = $79;
 $6758 = $6757;
 HEAP32[$6758>>2] = $6755;
 $6759 = (($6757) + 4)|0;
 $6760 = $6759;
 HEAP32[$6760>>2] = $6756;
 $6761 = $79;
 $6762 = $6761;
 $6763 = HEAP32[$6762>>2]|0;
 $6764 = (($6761) + 4)|0;
 $6765 = $6764;
 $6766 = HEAP32[$6765>>2]|0;
 $6767 = $56;
 $6768 = $6767;
 $6769 = HEAP32[$6768>>2]|0;
 $6770 = (($6767) + 4)|0;
 $6771 = $6770;
 $6772 = HEAP32[$6771>>2]|0;
 $6773 = (_i64Add(($6769|0),($6772|0),($6763|0),($6766|0))|0);
 $6774 = tempRet0;
 $6775 = $56;
 $6776 = $6775;
 HEAP32[$6776>>2] = $6773;
 $6777 = (($6775) + 4)|0;
 $6778 = $6777;
 HEAP32[$6778>>2] = $6774;
 $6779 = $79;
 $6780 = $6779;
 $6781 = HEAP32[$6780>>2]|0;
 $6782 = (($6779) + 4)|0;
 $6783 = $6782;
 $6784 = HEAP32[$6783>>2]|0;
 $6785 = (_bitshift64Shl(($6781|0),($6784|0),21)|0);
 $6786 = tempRet0;
 $6787 = $55;
 $6788 = $6787;
 $6789 = HEAP32[$6788>>2]|0;
 $6790 = (($6787) + 4)|0;
 $6791 = $6790;
 $6792 = HEAP32[$6791>>2]|0;
 $6793 = (_i64Subtract(($6789|0),($6792|0),($6785|0),($6786|0))|0);
 $6794 = tempRet0;
 $6795 = $55;
 $6796 = $6795;
 HEAP32[$6796>>2] = $6793;
 $6797 = (($6795) + 4)|0;
 $6798 = $6797;
 HEAP32[$6798>>2] = $6794;
 $6799 = $56;
 $6800 = $6799;
 $6801 = HEAP32[$6800>>2]|0;
 $6802 = (($6799) + 4)|0;
 $6803 = $6802;
 $6804 = HEAP32[$6803>>2]|0;
 $6805 = (___muldi3(($6801|0),($6804|0),666643,0)|0);
 $6806 = tempRet0;
 $6807 = $44;
 $6808 = $6807;
 $6809 = HEAP32[$6808>>2]|0;
 $6810 = (($6807) + 4)|0;
 $6811 = $6810;
 $6812 = HEAP32[$6811>>2]|0;
 $6813 = (_i64Add(($6809|0),($6812|0),($6805|0),($6806|0))|0);
 $6814 = tempRet0;
 $6815 = $44;
 $6816 = $6815;
 HEAP32[$6816>>2] = $6813;
 $6817 = (($6815) + 4)|0;
 $6818 = $6817;
 HEAP32[$6818>>2] = $6814;
 $6819 = $56;
 $6820 = $6819;
 $6821 = HEAP32[$6820>>2]|0;
 $6822 = (($6819) + 4)|0;
 $6823 = $6822;
 $6824 = HEAP32[$6823>>2]|0;
 $6825 = (___muldi3(($6821|0),($6824|0),470296,0)|0);
 $6826 = tempRet0;
 $6827 = $45;
 $6828 = $6827;
 $6829 = HEAP32[$6828>>2]|0;
 $6830 = (($6827) + 4)|0;
 $6831 = $6830;
 $6832 = HEAP32[$6831>>2]|0;
 $6833 = (_i64Add(($6829|0),($6832|0),($6825|0),($6826|0))|0);
 $6834 = tempRet0;
 $6835 = $45;
 $6836 = $6835;
 HEAP32[$6836>>2] = $6833;
 $6837 = (($6835) + 4)|0;
 $6838 = $6837;
 HEAP32[$6838>>2] = $6834;
 $6839 = $56;
 $6840 = $6839;
 $6841 = HEAP32[$6840>>2]|0;
 $6842 = (($6839) + 4)|0;
 $6843 = $6842;
 $6844 = HEAP32[$6843>>2]|0;
 $6845 = (___muldi3(($6841|0),($6844|0),654183,0)|0);
 $6846 = tempRet0;
 $6847 = $46;
 $6848 = $6847;
 $6849 = HEAP32[$6848>>2]|0;
 $6850 = (($6847) + 4)|0;
 $6851 = $6850;
 $6852 = HEAP32[$6851>>2]|0;
 $6853 = (_i64Add(($6849|0),($6852|0),($6845|0),($6846|0))|0);
 $6854 = tempRet0;
 $6855 = $46;
 $6856 = $6855;
 HEAP32[$6856>>2] = $6853;
 $6857 = (($6855) + 4)|0;
 $6858 = $6857;
 HEAP32[$6858>>2] = $6854;
 $6859 = $56;
 $6860 = $6859;
 $6861 = HEAP32[$6860>>2]|0;
 $6862 = (($6859) + 4)|0;
 $6863 = $6862;
 $6864 = HEAP32[$6863>>2]|0;
 $6865 = (___muldi3(($6861|0),($6864|0),997805,0)|0);
 $6866 = tempRet0;
 $6867 = $47;
 $6868 = $6867;
 $6869 = HEAP32[$6868>>2]|0;
 $6870 = (($6867) + 4)|0;
 $6871 = $6870;
 $6872 = HEAP32[$6871>>2]|0;
 $6873 = (_i64Subtract(($6869|0),($6872|0),($6865|0),($6866|0))|0);
 $6874 = tempRet0;
 $6875 = $47;
 $6876 = $6875;
 HEAP32[$6876>>2] = $6873;
 $6877 = (($6875) + 4)|0;
 $6878 = $6877;
 HEAP32[$6878>>2] = $6874;
 $6879 = $56;
 $6880 = $6879;
 $6881 = HEAP32[$6880>>2]|0;
 $6882 = (($6879) + 4)|0;
 $6883 = $6882;
 $6884 = HEAP32[$6883>>2]|0;
 $6885 = (___muldi3(($6881|0),($6884|0),136657,0)|0);
 $6886 = tempRet0;
 $6887 = $48;
 $6888 = $6887;
 $6889 = HEAP32[$6888>>2]|0;
 $6890 = (($6887) + 4)|0;
 $6891 = $6890;
 $6892 = HEAP32[$6891>>2]|0;
 $6893 = (_i64Add(($6889|0),($6892|0),($6885|0),($6886|0))|0);
 $6894 = tempRet0;
 $6895 = $48;
 $6896 = $6895;
 HEAP32[$6896>>2] = $6893;
 $6897 = (($6895) + 4)|0;
 $6898 = $6897;
 HEAP32[$6898>>2] = $6894;
 $6899 = $56;
 $6900 = $6899;
 $6901 = HEAP32[$6900>>2]|0;
 $6902 = (($6899) + 4)|0;
 $6903 = $6902;
 $6904 = HEAP32[$6903>>2]|0;
 $6905 = (___muldi3(($6901|0),($6904|0),683901,0)|0);
 $6906 = tempRet0;
 $6907 = $49;
 $6908 = $6907;
 $6909 = HEAP32[$6908>>2]|0;
 $6910 = (($6907) + 4)|0;
 $6911 = $6910;
 $6912 = HEAP32[$6911>>2]|0;
 $6913 = (_i64Subtract(($6909|0),($6912|0),($6905|0),($6906|0))|0);
 $6914 = tempRet0;
 $6915 = $49;
 $6916 = $6915;
 HEAP32[$6916>>2] = $6913;
 $6917 = (($6915) + 4)|0;
 $6918 = $6917;
 HEAP32[$6918>>2] = $6914;
 $6919 = $56;
 $6920 = $6919;
 HEAP32[$6920>>2] = 0;
 $6921 = (($6919) + 4)|0;
 $6922 = $6921;
 HEAP32[$6922>>2] = 0;
 $6923 = $44;
 $6924 = $6923;
 $6925 = HEAP32[$6924>>2]|0;
 $6926 = (($6923) + 4)|0;
 $6927 = $6926;
 $6928 = HEAP32[$6927>>2]|0;
 $6929 = (_bitshift64Ashr(($6925|0),($6928|0),21)|0);
 $6930 = tempRet0;
 $6931 = $68;
 $6932 = $6931;
 HEAP32[$6932>>2] = $6929;
 $6933 = (($6931) + 4)|0;
 $6934 = $6933;
 HEAP32[$6934>>2] = $6930;
 $6935 = $68;
 $6936 = $6935;
 $6937 = HEAP32[$6936>>2]|0;
 $6938 = (($6935) + 4)|0;
 $6939 = $6938;
 $6940 = HEAP32[$6939>>2]|0;
 $6941 = $45;
 $6942 = $6941;
 $6943 = HEAP32[$6942>>2]|0;
 $6944 = (($6941) + 4)|0;
 $6945 = $6944;
 $6946 = HEAP32[$6945>>2]|0;
 $6947 = (_i64Add(($6943|0),($6946|0),($6937|0),($6940|0))|0);
 $6948 = tempRet0;
 $6949 = $45;
 $6950 = $6949;
 HEAP32[$6950>>2] = $6947;
 $6951 = (($6949) + 4)|0;
 $6952 = $6951;
 HEAP32[$6952>>2] = $6948;
 $6953 = $68;
 $6954 = $6953;
 $6955 = HEAP32[$6954>>2]|0;
 $6956 = (($6953) + 4)|0;
 $6957 = $6956;
 $6958 = HEAP32[$6957>>2]|0;
 $6959 = (_bitshift64Shl(($6955|0),($6958|0),21)|0);
 $6960 = tempRet0;
 $6961 = $44;
 $6962 = $6961;
 $6963 = HEAP32[$6962>>2]|0;
 $6964 = (($6961) + 4)|0;
 $6965 = $6964;
 $6966 = HEAP32[$6965>>2]|0;
 $6967 = (_i64Subtract(($6963|0),($6966|0),($6959|0),($6960|0))|0);
 $6968 = tempRet0;
 $6969 = $44;
 $6970 = $6969;
 HEAP32[$6970>>2] = $6967;
 $6971 = (($6969) + 4)|0;
 $6972 = $6971;
 HEAP32[$6972>>2] = $6968;
 $6973 = $45;
 $6974 = $6973;
 $6975 = HEAP32[$6974>>2]|0;
 $6976 = (($6973) + 4)|0;
 $6977 = $6976;
 $6978 = HEAP32[$6977>>2]|0;
 $6979 = (_bitshift64Ashr(($6975|0),($6978|0),21)|0);
 $6980 = tempRet0;
 $6981 = $69;
 $6982 = $6981;
 HEAP32[$6982>>2] = $6979;
 $6983 = (($6981) + 4)|0;
 $6984 = $6983;
 HEAP32[$6984>>2] = $6980;
 $6985 = $69;
 $6986 = $6985;
 $6987 = HEAP32[$6986>>2]|0;
 $6988 = (($6985) + 4)|0;
 $6989 = $6988;
 $6990 = HEAP32[$6989>>2]|0;
 $6991 = $46;
 $6992 = $6991;
 $6993 = HEAP32[$6992>>2]|0;
 $6994 = (($6991) + 4)|0;
 $6995 = $6994;
 $6996 = HEAP32[$6995>>2]|0;
 $6997 = (_i64Add(($6993|0),($6996|0),($6987|0),($6990|0))|0);
 $6998 = tempRet0;
 $6999 = $46;
 $7000 = $6999;
 HEAP32[$7000>>2] = $6997;
 $7001 = (($6999) + 4)|0;
 $7002 = $7001;
 HEAP32[$7002>>2] = $6998;
 $7003 = $69;
 $7004 = $7003;
 $7005 = HEAP32[$7004>>2]|0;
 $7006 = (($7003) + 4)|0;
 $7007 = $7006;
 $7008 = HEAP32[$7007>>2]|0;
 $7009 = (_bitshift64Shl(($7005|0),($7008|0),21)|0);
 $7010 = tempRet0;
 $7011 = $45;
 $7012 = $7011;
 $7013 = HEAP32[$7012>>2]|0;
 $7014 = (($7011) + 4)|0;
 $7015 = $7014;
 $7016 = HEAP32[$7015>>2]|0;
 $7017 = (_i64Subtract(($7013|0),($7016|0),($7009|0),($7010|0))|0);
 $7018 = tempRet0;
 $7019 = $45;
 $7020 = $7019;
 HEAP32[$7020>>2] = $7017;
 $7021 = (($7019) + 4)|0;
 $7022 = $7021;
 HEAP32[$7022>>2] = $7018;
 $7023 = $46;
 $7024 = $7023;
 $7025 = HEAP32[$7024>>2]|0;
 $7026 = (($7023) + 4)|0;
 $7027 = $7026;
 $7028 = HEAP32[$7027>>2]|0;
 $7029 = (_bitshift64Ashr(($7025|0),($7028|0),21)|0);
 $7030 = tempRet0;
 $7031 = $70;
 $7032 = $7031;
 HEAP32[$7032>>2] = $7029;
 $7033 = (($7031) + 4)|0;
 $7034 = $7033;
 HEAP32[$7034>>2] = $7030;
 $7035 = $70;
 $7036 = $7035;
 $7037 = HEAP32[$7036>>2]|0;
 $7038 = (($7035) + 4)|0;
 $7039 = $7038;
 $7040 = HEAP32[$7039>>2]|0;
 $7041 = $47;
 $7042 = $7041;
 $7043 = HEAP32[$7042>>2]|0;
 $7044 = (($7041) + 4)|0;
 $7045 = $7044;
 $7046 = HEAP32[$7045>>2]|0;
 $7047 = (_i64Add(($7043|0),($7046|0),($7037|0),($7040|0))|0);
 $7048 = tempRet0;
 $7049 = $47;
 $7050 = $7049;
 HEAP32[$7050>>2] = $7047;
 $7051 = (($7049) + 4)|0;
 $7052 = $7051;
 HEAP32[$7052>>2] = $7048;
 $7053 = $70;
 $7054 = $7053;
 $7055 = HEAP32[$7054>>2]|0;
 $7056 = (($7053) + 4)|0;
 $7057 = $7056;
 $7058 = HEAP32[$7057>>2]|0;
 $7059 = (_bitshift64Shl(($7055|0),($7058|0),21)|0);
 $7060 = tempRet0;
 $7061 = $46;
 $7062 = $7061;
 $7063 = HEAP32[$7062>>2]|0;
 $7064 = (($7061) + 4)|0;
 $7065 = $7064;
 $7066 = HEAP32[$7065>>2]|0;
 $7067 = (_i64Subtract(($7063|0),($7066|0),($7059|0),($7060|0))|0);
 $7068 = tempRet0;
 $7069 = $46;
 $7070 = $7069;
 HEAP32[$7070>>2] = $7067;
 $7071 = (($7069) + 4)|0;
 $7072 = $7071;
 HEAP32[$7072>>2] = $7068;
 $7073 = $47;
 $7074 = $7073;
 $7075 = HEAP32[$7074>>2]|0;
 $7076 = (($7073) + 4)|0;
 $7077 = $7076;
 $7078 = HEAP32[$7077>>2]|0;
 $7079 = (_bitshift64Ashr(($7075|0),($7078|0),21)|0);
 $7080 = tempRet0;
 $7081 = $71;
 $7082 = $7081;
 HEAP32[$7082>>2] = $7079;
 $7083 = (($7081) + 4)|0;
 $7084 = $7083;
 HEAP32[$7084>>2] = $7080;
 $7085 = $71;
 $7086 = $7085;
 $7087 = HEAP32[$7086>>2]|0;
 $7088 = (($7085) + 4)|0;
 $7089 = $7088;
 $7090 = HEAP32[$7089>>2]|0;
 $7091 = $48;
 $7092 = $7091;
 $7093 = HEAP32[$7092>>2]|0;
 $7094 = (($7091) + 4)|0;
 $7095 = $7094;
 $7096 = HEAP32[$7095>>2]|0;
 $7097 = (_i64Add(($7093|0),($7096|0),($7087|0),($7090|0))|0);
 $7098 = tempRet0;
 $7099 = $48;
 $7100 = $7099;
 HEAP32[$7100>>2] = $7097;
 $7101 = (($7099) + 4)|0;
 $7102 = $7101;
 HEAP32[$7102>>2] = $7098;
 $7103 = $71;
 $7104 = $7103;
 $7105 = HEAP32[$7104>>2]|0;
 $7106 = (($7103) + 4)|0;
 $7107 = $7106;
 $7108 = HEAP32[$7107>>2]|0;
 $7109 = (_bitshift64Shl(($7105|0),($7108|0),21)|0);
 $7110 = tempRet0;
 $7111 = $47;
 $7112 = $7111;
 $7113 = HEAP32[$7112>>2]|0;
 $7114 = (($7111) + 4)|0;
 $7115 = $7114;
 $7116 = HEAP32[$7115>>2]|0;
 $7117 = (_i64Subtract(($7113|0),($7116|0),($7109|0),($7110|0))|0);
 $7118 = tempRet0;
 $7119 = $47;
 $7120 = $7119;
 HEAP32[$7120>>2] = $7117;
 $7121 = (($7119) + 4)|0;
 $7122 = $7121;
 HEAP32[$7122>>2] = $7118;
 $7123 = $48;
 $7124 = $7123;
 $7125 = HEAP32[$7124>>2]|0;
 $7126 = (($7123) + 4)|0;
 $7127 = $7126;
 $7128 = HEAP32[$7127>>2]|0;
 $7129 = (_bitshift64Ashr(($7125|0),($7128|0),21)|0);
 $7130 = tempRet0;
 $7131 = $72;
 $7132 = $7131;
 HEAP32[$7132>>2] = $7129;
 $7133 = (($7131) + 4)|0;
 $7134 = $7133;
 HEAP32[$7134>>2] = $7130;
 $7135 = $72;
 $7136 = $7135;
 $7137 = HEAP32[$7136>>2]|0;
 $7138 = (($7135) + 4)|0;
 $7139 = $7138;
 $7140 = HEAP32[$7139>>2]|0;
 $7141 = $49;
 $7142 = $7141;
 $7143 = HEAP32[$7142>>2]|0;
 $7144 = (($7141) + 4)|0;
 $7145 = $7144;
 $7146 = HEAP32[$7145>>2]|0;
 $7147 = (_i64Add(($7143|0),($7146|0),($7137|0),($7140|0))|0);
 $7148 = tempRet0;
 $7149 = $49;
 $7150 = $7149;
 HEAP32[$7150>>2] = $7147;
 $7151 = (($7149) + 4)|0;
 $7152 = $7151;
 HEAP32[$7152>>2] = $7148;
 $7153 = $72;
 $7154 = $7153;
 $7155 = HEAP32[$7154>>2]|0;
 $7156 = (($7153) + 4)|0;
 $7157 = $7156;
 $7158 = HEAP32[$7157>>2]|0;
 $7159 = (_bitshift64Shl(($7155|0),($7158|0),21)|0);
 $7160 = tempRet0;
 $7161 = $48;
 $7162 = $7161;
 $7163 = HEAP32[$7162>>2]|0;
 $7164 = (($7161) + 4)|0;
 $7165 = $7164;
 $7166 = HEAP32[$7165>>2]|0;
 $7167 = (_i64Subtract(($7163|0),($7166|0),($7159|0),($7160|0))|0);
 $7168 = tempRet0;
 $7169 = $48;
 $7170 = $7169;
 HEAP32[$7170>>2] = $7167;
 $7171 = (($7169) + 4)|0;
 $7172 = $7171;
 HEAP32[$7172>>2] = $7168;
 $7173 = $49;
 $7174 = $7173;
 $7175 = HEAP32[$7174>>2]|0;
 $7176 = (($7173) + 4)|0;
 $7177 = $7176;
 $7178 = HEAP32[$7177>>2]|0;
 $7179 = (_bitshift64Ashr(($7175|0),($7178|0),21)|0);
 $7180 = tempRet0;
 $7181 = $73;
 $7182 = $7181;
 HEAP32[$7182>>2] = $7179;
 $7183 = (($7181) + 4)|0;
 $7184 = $7183;
 HEAP32[$7184>>2] = $7180;
 $7185 = $73;
 $7186 = $7185;
 $7187 = HEAP32[$7186>>2]|0;
 $7188 = (($7185) + 4)|0;
 $7189 = $7188;
 $7190 = HEAP32[$7189>>2]|0;
 $7191 = $50;
 $7192 = $7191;
 $7193 = HEAP32[$7192>>2]|0;
 $7194 = (($7191) + 4)|0;
 $7195 = $7194;
 $7196 = HEAP32[$7195>>2]|0;
 $7197 = (_i64Add(($7193|0),($7196|0),($7187|0),($7190|0))|0);
 $7198 = tempRet0;
 $7199 = $50;
 $7200 = $7199;
 HEAP32[$7200>>2] = $7197;
 $7201 = (($7199) + 4)|0;
 $7202 = $7201;
 HEAP32[$7202>>2] = $7198;
 $7203 = $73;
 $7204 = $7203;
 $7205 = HEAP32[$7204>>2]|0;
 $7206 = (($7203) + 4)|0;
 $7207 = $7206;
 $7208 = HEAP32[$7207>>2]|0;
 $7209 = (_bitshift64Shl(($7205|0),($7208|0),21)|0);
 $7210 = tempRet0;
 $7211 = $49;
 $7212 = $7211;
 $7213 = HEAP32[$7212>>2]|0;
 $7214 = (($7211) + 4)|0;
 $7215 = $7214;
 $7216 = HEAP32[$7215>>2]|0;
 $7217 = (_i64Subtract(($7213|0),($7216|0),($7209|0),($7210|0))|0);
 $7218 = tempRet0;
 $7219 = $49;
 $7220 = $7219;
 HEAP32[$7220>>2] = $7217;
 $7221 = (($7219) + 4)|0;
 $7222 = $7221;
 HEAP32[$7222>>2] = $7218;
 $7223 = $50;
 $7224 = $7223;
 $7225 = HEAP32[$7224>>2]|0;
 $7226 = (($7223) + 4)|0;
 $7227 = $7226;
 $7228 = HEAP32[$7227>>2]|0;
 $7229 = (_bitshift64Ashr(($7225|0),($7228|0),21)|0);
 $7230 = tempRet0;
 $7231 = $74;
 $7232 = $7231;
 HEAP32[$7232>>2] = $7229;
 $7233 = (($7231) + 4)|0;
 $7234 = $7233;
 HEAP32[$7234>>2] = $7230;
 $7235 = $74;
 $7236 = $7235;
 $7237 = HEAP32[$7236>>2]|0;
 $7238 = (($7235) + 4)|0;
 $7239 = $7238;
 $7240 = HEAP32[$7239>>2]|0;
 $7241 = $51;
 $7242 = $7241;
 $7243 = HEAP32[$7242>>2]|0;
 $7244 = (($7241) + 4)|0;
 $7245 = $7244;
 $7246 = HEAP32[$7245>>2]|0;
 $7247 = (_i64Add(($7243|0),($7246|0),($7237|0),($7240|0))|0);
 $7248 = tempRet0;
 $7249 = $51;
 $7250 = $7249;
 HEAP32[$7250>>2] = $7247;
 $7251 = (($7249) + 4)|0;
 $7252 = $7251;
 HEAP32[$7252>>2] = $7248;
 $7253 = $74;
 $7254 = $7253;
 $7255 = HEAP32[$7254>>2]|0;
 $7256 = (($7253) + 4)|0;
 $7257 = $7256;
 $7258 = HEAP32[$7257>>2]|0;
 $7259 = (_bitshift64Shl(($7255|0),($7258|0),21)|0);
 $7260 = tempRet0;
 $7261 = $50;
 $7262 = $7261;
 $7263 = HEAP32[$7262>>2]|0;
 $7264 = (($7261) + 4)|0;
 $7265 = $7264;
 $7266 = HEAP32[$7265>>2]|0;
 $7267 = (_i64Subtract(($7263|0),($7266|0),($7259|0),($7260|0))|0);
 $7268 = tempRet0;
 $7269 = $50;
 $7270 = $7269;
 HEAP32[$7270>>2] = $7267;
 $7271 = (($7269) + 4)|0;
 $7272 = $7271;
 HEAP32[$7272>>2] = $7268;
 $7273 = $51;
 $7274 = $7273;
 $7275 = HEAP32[$7274>>2]|0;
 $7276 = (($7273) + 4)|0;
 $7277 = $7276;
 $7278 = HEAP32[$7277>>2]|0;
 $7279 = (_bitshift64Ashr(($7275|0),($7278|0),21)|0);
 $7280 = tempRet0;
 $7281 = $75;
 $7282 = $7281;
 HEAP32[$7282>>2] = $7279;
 $7283 = (($7281) + 4)|0;
 $7284 = $7283;
 HEAP32[$7284>>2] = $7280;
 $7285 = $75;
 $7286 = $7285;
 $7287 = HEAP32[$7286>>2]|0;
 $7288 = (($7285) + 4)|0;
 $7289 = $7288;
 $7290 = HEAP32[$7289>>2]|0;
 $7291 = $52;
 $7292 = $7291;
 $7293 = HEAP32[$7292>>2]|0;
 $7294 = (($7291) + 4)|0;
 $7295 = $7294;
 $7296 = HEAP32[$7295>>2]|0;
 $7297 = (_i64Add(($7293|0),($7296|0),($7287|0),($7290|0))|0);
 $7298 = tempRet0;
 $7299 = $52;
 $7300 = $7299;
 HEAP32[$7300>>2] = $7297;
 $7301 = (($7299) + 4)|0;
 $7302 = $7301;
 HEAP32[$7302>>2] = $7298;
 $7303 = $75;
 $7304 = $7303;
 $7305 = HEAP32[$7304>>2]|0;
 $7306 = (($7303) + 4)|0;
 $7307 = $7306;
 $7308 = HEAP32[$7307>>2]|0;
 $7309 = (_bitshift64Shl(($7305|0),($7308|0),21)|0);
 $7310 = tempRet0;
 $7311 = $51;
 $7312 = $7311;
 $7313 = HEAP32[$7312>>2]|0;
 $7314 = (($7311) + 4)|0;
 $7315 = $7314;
 $7316 = HEAP32[$7315>>2]|0;
 $7317 = (_i64Subtract(($7313|0),($7316|0),($7309|0),($7310|0))|0);
 $7318 = tempRet0;
 $7319 = $51;
 $7320 = $7319;
 HEAP32[$7320>>2] = $7317;
 $7321 = (($7319) + 4)|0;
 $7322 = $7321;
 HEAP32[$7322>>2] = $7318;
 $7323 = $52;
 $7324 = $7323;
 $7325 = HEAP32[$7324>>2]|0;
 $7326 = (($7323) + 4)|0;
 $7327 = $7326;
 $7328 = HEAP32[$7327>>2]|0;
 $7329 = (_bitshift64Ashr(($7325|0),($7328|0),21)|0);
 $7330 = tempRet0;
 $7331 = $76;
 $7332 = $7331;
 HEAP32[$7332>>2] = $7329;
 $7333 = (($7331) + 4)|0;
 $7334 = $7333;
 HEAP32[$7334>>2] = $7330;
 $7335 = $76;
 $7336 = $7335;
 $7337 = HEAP32[$7336>>2]|0;
 $7338 = (($7335) + 4)|0;
 $7339 = $7338;
 $7340 = HEAP32[$7339>>2]|0;
 $7341 = $53;
 $7342 = $7341;
 $7343 = HEAP32[$7342>>2]|0;
 $7344 = (($7341) + 4)|0;
 $7345 = $7344;
 $7346 = HEAP32[$7345>>2]|0;
 $7347 = (_i64Add(($7343|0),($7346|0),($7337|0),($7340|0))|0);
 $7348 = tempRet0;
 $7349 = $53;
 $7350 = $7349;
 HEAP32[$7350>>2] = $7347;
 $7351 = (($7349) + 4)|0;
 $7352 = $7351;
 HEAP32[$7352>>2] = $7348;
 $7353 = $76;
 $7354 = $7353;
 $7355 = HEAP32[$7354>>2]|0;
 $7356 = (($7353) + 4)|0;
 $7357 = $7356;
 $7358 = HEAP32[$7357>>2]|0;
 $7359 = (_bitshift64Shl(($7355|0),($7358|0),21)|0);
 $7360 = tempRet0;
 $7361 = $52;
 $7362 = $7361;
 $7363 = HEAP32[$7362>>2]|0;
 $7364 = (($7361) + 4)|0;
 $7365 = $7364;
 $7366 = HEAP32[$7365>>2]|0;
 $7367 = (_i64Subtract(($7363|0),($7366|0),($7359|0),($7360|0))|0);
 $7368 = tempRet0;
 $7369 = $52;
 $7370 = $7369;
 HEAP32[$7370>>2] = $7367;
 $7371 = (($7369) + 4)|0;
 $7372 = $7371;
 HEAP32[$7372>>2] = $7368;
 $7373 = $53;
 $7374 = $7373;
 $7375 = HEAP32[$7374>>2]|0;
 $7376 = (($7373) + 4)|0;
 $7377 = $7376;
 $7378 = HEAP32[$7377>>2]|0;
 $7379 = (_bitshift64Ashr(($7375|0),($7378|0),21)|0);
 $7380 = tempRet0;
 $7381 = $77;
 $7382 = $7381;
 HEAP32[$7382>>2] = $7379;
 $7383 = (($7381) + 4)|0;
 $7384 = $7383;
 HEAP32[$7384>>2] = $7380;
 $7385 = $77;
 $7386 = $7385;
 $7387 = HEAP32[$7386>>2]|0;
 $7388 = (($7385) + 4)|0;
 $7389 = $7388;
 $7390 = HEAP32[$7389>>2]|0;
 $7391 = $54;
 $7392 = $7391;
 $7393 = HEAP32[$7392>>2]|0;
 $7394 = (($7391) + 4)|0;
 $7395 = $7394;
 $7396 = HEAP32[$7395>>2]|0;
 $7397 = (_i64Add(($7393|0),($7396|0),($7387|0),($7390|0))|0);
 $7398 = tempRet0;
 $7399 = $54;
 $7400 = $7399;
 HEAP32[$7400>>2] = $7397;
 $7401 = (($7399) + 4)|0;
 $7402 = $7401;
 HEAP32[$7402>>2] = $7398;
 $7403 = $77;
 $7404 = $7403;
 $7405 = HEAP32[$7404>>2]|0;
 $7406 = (($7403) + 4)|0;
 $7407 = $7406;
 $7408 = HEAP32[$7407>>2]|0;
 $7409 = (_bitshift64Shl(($7405|0),($7408|0),21)|0);
 $7410 = tempRet0;
 $7411 = $53;
 $7412 = $7411;
 $7413 = HEAP32[$7412>>2]|0;
 $7414 = (($7411) + 4)|0;
 $7415 = $7414;
 $7416 = HEAP32[$7415>>2]|0;
 $7417 = (_i64Subtract(($7413|0),($7416|0),($7409|0),($7410|0))|0);
 $7418 = tempRet0;
 $7419 = $53;
 $7420 = $7419;
 HEAP32[$7420>>2] = $7417;
 $7421 = (($7419) + 4)|0;
 $7422 = $7421;
 HEAP32[$7422>>2] = $7418;
 $7423 = $54;
 $7424 = $7423;
 $7425 = HEAP32[$7424>>2]|0;
 $7426 = (($7423) + 4)|0;
 $7427 = $7426;
 $7428 = HEAP32[$7427>>2]|0;
 $7429 = (_bitshift64Ashr(($7425|0),($7428|0),21)|0);
 $7430 = tempRet0;
 $7431 = $78;
 $7432 = $7431;
 HEAP32[$7432>>2] = $7429;
 $7433 = (($7431) + 4)|0;
 $7434 = $7433;
 HEAP32[$7434>>2] = $7430;
 $7435 = $78;
 $7436 = $7435;
 $7437 = HEAP32[$7436>>2]|0;
 $7438 = (($7435) + 4)|0;
 $7439 = $7438;
 $7440 = HEAP32[$7439>>2]|0;
 $7441 = $55;
 $7442 = $7441;
 $7443 = HEAP32[$7442>>2]|0;
 $7444 = (($7441) + 4)|0;
 $7445 = $7444;
 $7446 = HEAP32[$7445>>2]|0;
 $7447 = (_i64Add(($7443|0),($7446|0),($7437|0),($7440|0))|0);
 $7448 = tempRet0;
 $7449 = $55;
 $7450 = $7449;
 HEAP32[$7450>>2] = $7447;
 $7451 = (($7449) + 4)|0;
 $7452 = $7451;
 HEAP32[$7452>>2] = $7448;
 $7453 = $78;
 $7454 = $7453;
 $7455 = HEAP32[$7454>>2]|0;
 $7456 = (($7453) + 4)|0;
 $7457 = $7456;
 $7458 = HEAP32[$7457>>2]|0;
 $7459 = (_bitshift64Shl(($7455|0),($7458|0),21)|0);
 $7460 = tempRet0;
 $7461 = $54;
 $7462 = $7461;
 $7463 = HEAP32[$7462>>2]|0;
 $7464 = (($7461) + 4)|0;
 $7465 = $7464;
 $7466 = HEAP32[$7465>>2]|0;
 $7467 = (_i64Subtract(($7463|0),($7466|0),($7459|0),($7460|0))|0);
 $7468 = tempRet0;
 $7469 = $54;
 $7470 = $7469;
 HEAP32[$7470>>2] = $7467;
 $7471 = (($7469) + 4)|0;
 $7472 = $7471;
 HEAP32[$7472>>2] = $7468;
 $7473 = $55;
 $7474 = $7473;
 $7475 = HEAP32[$7474>>2]|0;
 $7476 = (($7473) + 4)|0;
 $7477 = $7476;
 $7478 = HEAP32[$7477>>2]|0;
 $7479 = (_bitshift64Ashr(($7475|0),($7478|0),21)|0);
 $7480 = tempRet0;
 $7481 = $79;
 $7482 = $7481;
 HEAP32[$7482>>2] = $7479;
 $7483 = (($7481) + 4)|0;
 $7484 = $7483;
 HEAP32[$7484>>2] = $7480;
 $7485 = $79;
 $7486 = $7485;
 $7487 = HEAP32[$7486>>2]|0;
 $7488 = (($7485) + 4)|0;
 $7489 = $7488;
 $7490 = HEAP32[$7489>>2]|0;
 $7491 = $56;
 $7492 = $7491;
 $7493 = HEAP32[$7492>>2]|0;
 $7494 = (($7491) + 4)|0;
 $7495 = $7494;
 $7496 = HEAP32[$7495>>2]|0;
 $7497 = (_i64Add(($7493|0),($7496|0),($7487|0),($7490|0))|0);
 $7498 = tempRet0;
 $7499 = $56;
 $7500 = $7499;
 HEAP32[$7500>>2] = $7497;
 $7501 = (($7499) + 4)|0;
 $7502 = $7501;
 HEAP32[$7502>>2] = $7498;
 $7503 = $79;
 $7504 = $7503;
 $7505 = HEAP32[$7504>>2]|0;
 $7506 = (($7503) + 4)|0;
 $7507 = $7506;
 $7508 = HEAP32[$7507>>2]|0;
 $7509 = (_bitshift64Shl(($7505|0),($7508|0),21)|0);
 $7510 = tempRet0;
 $7511 = $55;
 $7512 = $7511;
 $7513 = HEAP32[$7512>>2]|0;
 $7514 = (($7511) + 4)|0;
 $7515 = $7514;
 $7516 = HEAP32[$7515>>2]|0;
 $7517 = (_i64Subtract(($7513|0),($7516|0),($7509|0),($7510|0))|0);
 $7518 = tempRet0;
 $7519 = $55;
 $7520 = $7519;
 HEAP32[$7520>>2] = $7517;
 $7521 = (($7519) + 4)|0;
 $7522 = $7521;
 HEAP32[$7522>>2] = $7518;
 $7523 = $56;
 $7524 = $7523;
 $7525 = HEAP32[$7524>>2]|0;
 $7526 = (($7523) + 4)|0;
 $7527 = $7526;
 $7528 = HEAP32[$7527>>2]|0;
 $7529 = (___muldi3(($7525|0),($7528|0),666643,0)|0);
 $7530 = tempRet0;
 $7531 = $44;
 $7532 = $7531;
 $7533 = HEAP32[$7532>>2]|0;
 $7534 = (($7531) + 4)|0;
 $7535 = $7534;
 $7536 = HEAP32[$7535>>2]|0;
 $7537 = (_i64Add(($7533|0),($7536|0),($7529|0),($7530|0))|0);
 $7538 = tempRet0;
 $7539 = $44;
 $7540 = $7539;
 HEAP32[$7540>>2] = $7537;
 $7541 = (($7539) + 4)|0;
 $7542 = $7541;
 HEAP32[$7542>>2] = $7538;
 $7543 = $56;
 $7544 = $7543;
 $7545 = HEAP32[$7544>>2]|0;
 $7546 = (($7543) + 4)|0;
 $7547 = $7546;
 $7548 = HEAP32[$7547>>2]|0;
 $7549 = (___muldi3(($7545|0),($7548|0),470296,0)|0);
 $7550 = tempRet0;
 $7551 = $45;
 $7552 = $7551;
 $7553 = HEAP32[$7552>>2]|0;
 $7554 = (($7551) + 4)|0;
 $7555 = $7554;
 $7556 = HEAP32[$7555>>2]|0;
 $7557 = (_i64Add(($7553|0),($7556|0),($7549|0),($7550|0))|0);
 $7558 = tempRet0;
 $7559 = $45;
 $7560 = $7559;
 HEAP32[$7560>>2] = $7557;
 $7561 = (($7559) + 4)|0;
 $7562 = $7561;
 HEAP32[$7562>>2] = $7558;
 $7563 = $56;
 $7564 = $7563;
 $7565 = HEAP32[$7564>>2]|0;
 $7566 = (($7563) + 4)|0;
 $7567 = $7566;
 $7568 = HEAP32[$7567>>2]|0;
 $7569 = (___muldi3(($7565|0),($7568|0),654183,0)|0);
 $7570 = tempRet0;
 $7571 = $46;
 $7572 = $7571;
 $7573 = HEAP32[$7572>>2]|0;
 $7574 = (($7571) + 4)|0;
 $7575 = $7574;
 $7576 = HEAP32[$7575>>2]|0;
 $7577 = (_i64Add(($7573|0),($7576|0),($7569|0),($7570|0))|0);
 $7578 = tempRet0;
 $7579 = $46;
 $7580 = $7579;
 HEAP32[$7580>>2] = $7577;
 $7581 = (($7579) + 4)|0;
 $7582 = $7581;
 HEAP32[$7582>>2] = $7578;
 $7583 = $56;
 $7584 = $7583;
 $7585 = HEAP32[$7584>>2]|0;
 $7586 = (($7583) + 4)|0;
 $7587 = $7586;
 $7588 = HEAP32[$7587>>2]|0;
 $7589 = (___muldi3(($7585|0),($7588|0),997805,0)|0);
 $7590 = tempRet0;
 $7591 = $47;
 $7592 = $7591;
 $7593 = HEAP32[$7592>>2]|0;
 $7594 = (($7591) + 4)|0;
 $7595 = $7594;
 $7596 = HEAP32[$7595>>2]|0;
 $7597 = (_i64Subtract(($7593|0),($7596|0),($7589|0),($7590|0))|0);
 $7598 = tempRet0;
 $7599 = $47;
 $7600 = $7599;
 HEAP32[$7600>>2] = $7597;
 $7601 = (($7599) + 4)|0;
 $7602 = $7601;
 HEAP32[$7602>>2] = $7598;
 $7603 = $56;
 $7604 = $7603;
 $7605 = HEAP32[$7604>>2]|0;
 $7606 = (($7603) + 4)|0;
 $7607 = $7606;
 $7608 = HEAP32[$7607>>2]|0;
 $7609 = (___muldi3(($7605|0),($7608|0),136657,0)|0);
 $7610 = tempRet0;
 $7611 = $48;
 $7612 = $7611;
 $7613 = HEAP32[$7612>>2]|0;
 $7614 = (($7611) + 4)|0;
 $7615 = $7614;
 $7616 = HEAP32[$7615>>2]|0;
 $7617 = (_i64Add(($7613|0),($7616|0),($7609|0),($7610|0))|0);
 $7618 = tempRet0;
 $7619 = $48;
 $7620 = $7619;
 HEAP32[$7620>>2] = $7617;
 $7621 = (($7619) + 4)|0;
 $7622 = $7621;
 HEAP32[$7622>>2] = $7618;
 $7623 = $56;
 $7624 = $7623;
 $7625 = HEAP32[$7624>>2]|0;
 $7626 = (($7623) + 4)|0;
 $7627 = $7626;
 $7628 = HEAP32[$7627>>2]|0;
 $7629 = (___muldi3(($7625|0),($7628|0),683901,0)|0);
 $7630 = tempRet0;
 $7631 = $49;
 $7632 = $7631;
 $7633 = HEAP32[$7632>>2]|0;
 $7634 = (($7631) + 4)|0;
 $7635 = $7634;
 $7636 = HEAP32[$7635>>2]|0;
 $7637 = (_i64Subtract(($7633|0),($7636|0),($7629|0),($7630|0))|0);
 $7638 = tempRet0;
 $7639 = $49;
 $7640 = $7639;
 HEAP32[$7640>>2] = $7637;
 $7641 = (($7639) + 4)|0;
 $7642 = $7641;
 HEAP32[$7642>>2] = $7638;
 $7643 = $56;
 $7644 = $7643;
 HEAP32[$7644>>2] = 0;
 $7645 = (($7643) + 4)|0;
 $7646 = $7645;
 HEAP32[$7646>>2] = 0;
 $7647 = $44;
 $7648 = $7647;
 $7649 = HEAP32[$7648>>2]|0;
 $7650 = (($7647) + 4)|0;
 $7651 = $7650;
 $7652 = HEAP32[$7651>>2]|0;
 $7653 = (_bitshift64Ashr(($7649|0),($7652|0),21)|0);
 $7654 = tempRet0;
 $7655 = $68;
 $7656 = $7655;
 HEAP32[$7656>>2] = $7653;
 $7657 = (($7655) + 4)|0;
 $7658 = $7657;
 HEAP32[$7658>>2] = $7654;
 $7659 = $68;
 $7660 = $7659;
 $7661 = HEAP32[$7660>>2]|0;
 $7662 = (($7659) + 4)|0;
 $7663 = $7662;
 $7664 = HEAP32[$7663>>2]|0;
 $7665 = $45;
 $7666 = $7665;
 $7667 = HEAP32[$7666>>2]|0;
 $7668 = (($7665) + 4)|0;
 $7669 = $7668;
 $7670 = HEAP32[$7669>>2]|0;
 $7671 = (_i64Add(($7667|0),($7670|0),($7661|0),($7664|0))|0);
 $7672 = tempRet0;
 $7673 = $45;
 $7674 = $7673;
 HEAP32[$7674>>2] = $7671;
 $7675 = (($7673) + 4)|0;
 $7676 = $7675;
 HEAP32[$7676>>2] = $7672;
 $7677 = $68;
 $7678 = $7677;
 $7679 = HEAP32[$7678>>2]|0;
 $7680 = (($7677) + 4)|0;
 $7681 = $7680;
 $7682 = HEAP32[$7681>>2]|0;
 $7683 = (_bitshift64Shl(($7679|0),($7682|0),21)|0);
 $7684 = tempRet0;
 $7685 = $44;
 $7686 = $7685;
 $7687 = HEAP32[$7686>>2]|0;
 $7688 = (($7685) + 4)|0;
 $7689 = $7688;
 $7690 = HEAP32[$7689>>2]|0;
 $7691 = (_i64Subtract(($7687|0),($7690|0),($7683|0),($7684|0))|0);
 $7692 = tempRet0;
 $7693 = $44;
 $7694 = $7693;
 HEAP32[$7694>>2] = $7691;
 $7695 = (($7693) + 4)|0;
 $7696 = $7695;
 HEAP32[$7696>>2] = $7692;
 $7697 = $45;
 $7698 = $7697;
 $7699 = HEAP32[$7698>>2]|0;
 $7700 = (($7697) + 4)|0;
 $7701 = $7700;
 $7702 = HEAP32[$7701>>2]|0;
 $7703 = (_bitshift64Ashr(($7699|0),($7702|0),21)|0);
 $7704 = tempRet0;
 $7705 = $69;
 $7706 = $7705;
 HEAP32[$7706>>2] = $7703;
 $7707 = (($7705) + 4)|0;
 $7708 = $7707;
 HEAP32[$7708>>2] = $7704;
 $7709 = $69;
 $7710 = $7709;
 $7711 = HEAP32[$7710>>2]|0;
 $7712 = (($7709) + 4)|0;
 $7713 = $7712;
 $7714 = HEAP32[$7713>>2]|0;
 $7715 = $46;
 $7716 = $7715;
 $7717 = HEAP32[$7716>>2]|0;
 $7718 = (($7715) + 4)|0;
 $7719 = $7718;
 $7720 = HEAP32[$7719>>2]|0;
 $7721 = (_i64Add(($7717|0),($7720|0),($7711|0),($7714|0))|0);
 $7722 = tempRet0;
 $7723 = $46;
 $7724 = $7723;
 HEAP32[$7724>>2] = $7721;
 $7725 = (($7723) + 4)|0;
 $7726 = $7725;
 HEAP32[$7726>>2] = $7722;
 $7727 = $69;
 $7728 = $7727;
 $7729 = HEAP32[$7728>>2]|0;
 $7730 = (($7727) + 4)|0;
 $7731 = $7730;
 $7732 = HEAP32[$7731>>2]|0;
 $7733 = (_bitshift64Shl(($7729|0),($7732|0),21)|0);
 $7734 = tempRet0;
 $7735 = $45;
 $7736 = $7735;
 $7737 = HEAP32[$7736>>2]|0;
 $7738 = (($7735) + 4)|0;
 $7739 = $7738;
 $7740 = HEAP32[$7739>>2]|0;
 $7741 = (_i64Subtract(($7737|0),($7740|0),($7733|0),($7734|0))|0);
 $7742 = tempRet0;
 $7743 = $45;
 $7744 = $7743;
 HEAP32[$7744>>2] = $7741;
 $7745 = (($7743) + 4)|0;
 $7746 = $7745;
 HEAP32[$7746>>2] = $7742;
 $7747 = $46;
 $7748 = $7747;
 $7749 = HEAP32[$7748>>2]|0;
 $7750 = (($7747) + 4)|0;
 $7751 = $7750;
 $7752 = HEAP32[$7751>>2]|0;
 $7753 = (_bitshift64Ashr(($7749|0),($7752|0),21)|0);
 $7754 = tempRet0;
 $7755 = $70;
 $7756 = $7755;
 HEAP32[$7756>>2] = $7753;
 $7757 = (($7755) + 4)|0;
 $7758 = $7757;
 HEAP32[$7758>>2] = $7754;
 $7759 = $70;
 $7760 = $7759;
 $7761 = HEAP32[$7760>>2]|0;
 $7762 = (($7759) + 4)|0;
 $7763 = $7762;
 $7764 = HEAP32[$7763>>2]|0;
 $7765 = $47;
 $7766 = $7765;
 $7767 = HEAP32[$7766>>2]|0;
 $7768 = (($7765) + 4)|0;
 $7769 = $7768;
 $7770 = HEAP32[$7769>>2]|0;
 $7771 = (_i64Add(($7767|0),($7770|0),($7761|0),($7764|0))|0);
 $7772 = tempRet0;
 $7773 = $47;
 $7774 = $7773;
 HEAP32[$7774>>2] = $7771;
 $7775 = (($7773) + 4)|0;
 $7776 = $7775;
 HEAP32[$7776>>2] = $7772;
 $7777 = $70;
 $7778 = $7777;
 $7779 = HEAP32[$7778>>2]|0;
 $7780 = (($7777) + 4)|0;
 $7781 = $7780;
 $7782 = HEAP32[$7781>>2]|0;
 $7783 = (_bitshift64Shl(($7779|0),($7782|0),21)|0);
 $7784 = tempRet0;
 $7785 = $46;
 $7786 = $7785;
 $7787 = HEAP32[$7786>>2]|0;
 $7788 = (($7785) + 4)|0;
 $7789 = $7788;
 $7790 = HEAP32[$7789>>2]|0;
 $7791 = (_i64Subtract(($7787|0),($7790|0),($7783|0),($7784|0))|0);
 $7792 = tempRet0;
 $7793 = $46;
 $7794 = $7793;
 HEAP32[$7794>>2] = $7791;
 $7795 = (($7793) + 4)|0;
 $7796 = $7795;
 HEAP32[$7796>>2] = $7792;
 $7797 = $47;
 $7798 = $7797;
 $7799 = HEAP32[$7798>>2]|0;
 $7800 = (($7797) + 4)|0;
 $7801 = $7800;
 $7802 = HEAP32[$7801>>2]|0;
 $7803 = (_bitshift64Ashr(($7799|0),($7802|0),21)|0);
 $7804 = tempRet0;
 $7805 = $71;
 $7806 = $7805;
 HEAP32[$7806>>2] = $7803;
 $7807 = (($7805) + 4)|0;
 $7808 = $7807;
 HEAP32[$7808>>2] = $7804;
 $7809 = $71;
 $7810 = $7809;
 $7811 = HEAP32[$7810>>2]|0;
 $7812 = (($7809) + 4)|0;
 $7813 = $7812;
 $7814 = HEAP32[$7813>>2]|0;
 $7815 = $48;
 $7816 = $7815;
 $7817 = HEAP32[$7816>>2]|0;
 $7818 = (($7815) + 4)|0;
 $7819 = $7818;
 $7820 = HEAP32[$7819>>2]|0;
 $7821 = (_i64Add(($7817|0),($7820|0),($7811|0),($7814|0))|0);
 $7822 = tempRet0;
 $7823 = $48;
 $7824 = $7823;
 HEAP32[$7824>>2] = $7821;
 $7825 = (($7823) + 4)|0;
 $7826 = $7825;
 HEAP32[$7826>>2] = $7822;
 $7827 = $71;
 $7828 = $7827;
 $7829 = HEAP32[$7828>>2]|0;
 $7830 = (($7827) + 4)|0;
 $7831 = $7830;
 $7832 = HEAP32[$7831>>2]|0;
 $7833 = (_bitshift64Shl(($7829|0),($7832|0),21)|0);
 $7834 = tempRet0;
 $7835 = $47;
 $7836 = $7835;
 $7837 = HEAP32[$7836>>2]|0;
 $7838 = (($7835) + 4)|0;
 $7839 = $7838;
 $7840 = HEAP32[$7839>>2]|0;
 $7841 = (_i64Subtract(($7837|0),($7840|0),($7833|0),($7834|0))|0);
 $7842 = tempRet0;
 $7843 = $47;
 $7844 = $7843;
 HEAP32[$7844>>2] = $7841;
 $7845 = (($7843) + 4)|0;
 $7846 = $7845;
 HEAP32[$7846>>2] = $7842;
 $7847 = $48;
 $7848 = $7847;
 $7849 = HEAP32[$7848>>2]|0;
 $7850 = (($7847) + 4)|0;
 $7851 = $7850;
 $7852 = HEAP32[$7851>>2]|0;
 $7853 = (_bitshift64Ashr(($7849|0),($7852|0),21)|0);
 $7854 = tempRet0;
 $7855 = $72;
 $7856 = $7855;
 HEAP32[$7856>>2] = $7853;
 $7857 = (($7855) + 4)|0;
 $7858 = $7857;
 HEAP32[$7858>>2] = $7854;
 $7859 = $72;
 $7860 = $7859;
 $7861 = HEAP32[$7860>>2]|0;
 $7862 = (($7859) + 4)|0;
 $7863 = $7862;
 $7864 = HEAP32[$7863>>2]|0;
 $7865 = $49;
 $7866 = $7865;
 $7867 = HEAP32[$7866>>2]|0;
 $7868 = (($7865) + 4)|0;
 $7869 = $7868;
 $7870 = HEAP32[$7869>>2]|0;
 $7871 = (_i64Add(($7867|0),($7870|0),($7861|0),($7864|0))|0);
 $7872 = tempRet0;
 $7873 = $49;
 $7874 = $7873;
 HEAP32[$7874>>2] = $7871;
 $7875 = (($7873) + 4)|0;
 $7876 = $7875;
 HEAP32[$7876>>2] = $7872;
 $7877 = $72;
 $7878 = $7877;
 $7879 = HEAP32[$7878>>2]|0;
 $7880 = (($7877) + 4)|0;
 $7881 = $7880;
 $7882 = HEAP32[$7881>>2]|0;
 $7883 = (_bitshift64Shl(($7879|0),($7882|0),21)|0);
 $7884 = tempRet0;
 $7885 = $48;
 $7886 = $7885;
 $7887 = HEAP32[$7886>>2]|0;
 $7888 = (($7885) + 4)|0;
 $7889 = $7888;
 $7890 = HEAP32[$7889>>2]|0;
 $7891 = (_i64Subtract(($7887|0),($7890|0),($7883|0),($7884|0))|0);
 $7892 = tempRet0;
 $7893 = $48;
 $7894 = $7893;
 HEAP32[$7894>>2] = $7891;
 $7895 = (($7893) + 4)|0;
 $7896 = $7895;
 HEAP32[$7896>>2] = $7892;
 $7897 = $49;
 $7898 = $7897;
 $7899 = HEAP32[$7898>>2]|0;
 $7900 = (($7897) + 4)|0;
 $7901 = $7900;
 $7902 = HEAP32[$7901>>2]|0;
 $7903 = (_bitshift64Ashr(($7899|0),($7902|0),21)|0);
 $7904 = tempRet0;
 $7905 = $73;
 $7906 = $7905;
 HEAP32[$7906>>2] = $7903;
 $7907 = (($7905) + 4)|0;
 $7908 = $7907;
 HEAP32[$7908>>2] = $7904;
 $7909 = $73;
 $7910 = $7909;
 $7911 = HEAP32[$7910>>2]|0;
 $7912 = (($7909) + 4)|0;
 $7913 = $7912;
 $7914 = HEAP32[$7913>>2]|0;
 $7915 = $50;
 $7916 = $7915;
 $7917 = HEAP32[$7916>>2]|0;
 $7918 = (($7915) + 4)|0;
 $7919 = $7918;
 $7920 = HEAP32[$7919>>2]|0;
 $7921 = (_i64Add(($7917|0),($7920|0),($7911|0),($7914|0))|0);
 $7922 = tempRet0;
 $7923 = $50;
 $7924 = $7923;
 HEAP32[$7924>>2] = $7921;
 $7925 = (($7923) + 4)|0;
 $7926 = $7925;
 HEAP32[$7926>>2] = $7922;
 $7927 = $73;
 $7928 = $7927;
 $7929 = HEAP32[$7928>>2]|0;
 $7930 = (($7927) + 4)|0;
 $7931 = $7930;
 $7932 = HEAP32[$7931>>2]|0;
 $7933 = (_bitshift64Shl(($7929|0),($7932|0),21)|0);
 $7934 = tempRet0;
 $7935 = $49;
 $7936 = $7935;
 $7937 = HEAP32[$7936>>2]|0;
 $7938 = (($7935) + 4)|0;
 $7939 = $7938;
 $7940 = HEAP32[$7939>>2]|0;
 $7941 = (_i64Subtract(($7937|0),($7940|0),($7933|0),($7934|0))|0);
 $7942 = tempRet0;
 $7943 = $49;
 $7944 = $7943;
 HEAP32[$7944>>2] = $7941;
 $7945 = (($7943) + 4)|0;
 $7946 = $7945;
 HEAP32[$7946>>2] = $7942;
 $7947 = $50;
 $7948 = $7947;
 $7949 = HEAP32[$7948>>2]|0;
 $7950 = (($7947) + 4)|0;
 $7951 = $7950;
 $7952 = HEAP32[$7951>>2]|0;
 $7953 = (_bitshift64Ashr(($7949|0),($7952|0),21)|0);
 $7954 = tempRet0;
 $7955 = $74;
 $7956 = $7955;
 HEAP32[$7956>>2] = $7953;
 $7957 = (($7955) + 4)|0;
 $7958 = $7957;
 HEAP32[$7958>>2] = $7954;
 $7959 = $74;
 $7960 = $7959;
 $7961 = HEAP32[$7960>>2]|0;
 $7962 = (($7959) + 4)|0;
 $7963 = $7962;
 $7964 = HEAP32[$7963>>2]|0;
 $7965 = $51;
 $7966 = $7965;
 $7967 = HEAP32[$7966>>2]|0;
 $7968 = (($7965) + 4)|0;
 $7969 = $7968;
 $7970 = HEAP32[$7969>>2]|0;
 $7971 = (_i64Add(($7967|0),($7970|0),($7961|0),($7964|0))|0);
 $7972 = tempRet0;
 $7973 = $51;
 $7974 = $7973;
 HEAP32[$7974>>2] = $7971;
 $7975 = (($7973) + 4)|0;
 $7976 = $7975;
 HEAP32[$7976>>2] = $7972;
 $7977 = $74;
 $7978 = $7977;
 $7979 = HEAP32[$7978>>2]|0;
 $7980 = (($7977) + 4)|0;
 $7981 = $7980;
 $7982 = HEAP32[$7981>>2]|0;
 $7983 = (_bitshift64Shl(($7979|0),($7982|0),21)|0);
 $7984 = tempRet0;
 $7985 = $50;
 $7986 = $7985;
 $7987 = HEAP32[$7986>>2]|0;
 $7988 = (($7985) + 4)|0;
 $7989 = $7988;
 $7990 = HEAP32[$7989>>2]|0;
 $7991 = (_i64Subtract(($7987|0),($7990|0),($7983|0),($7984|0))|0);
 $7992 = tempRet0;
 $7993 = $50;
 $7994 = $7993;
 HEAP32[$7994>>2] = $7991;
 $7995 = (($7993) + 4)|0;
 $7996 = $7995;
 HEAP32[$7996>>2] = $7992;
 $7997 = $51;
 $7998 = $7997;
 $7999 = HEAP32[$7998>>2]|0;
 $8000 = (($7997) + 4)|0;
 $8001 = $8000;
 $8002 = HEAP32[$8001>>2]|0;
 $8003 = (_bitshift64Ashr(($7999|0),($8002|0),21)|0);
 $8004 = tempRet0;
 $8005 = $75;
 $8006 = $8005;
 HEAP32[$8006>>2] = $8003;
 $8007 = (($8005) + 4)|0;
 $8008 = $8007;
 HEAP32[$8008>>2] = $8004;
 $8009 = $75;
 $8010 = $8009;
 $8011 = HEAP32[$8010>>2]|0;
 $8012 = (($8009) + 4)|0;
 $8013 = $8012;
 $8014 = HEAP32[$8013>>2]|0;
 $8015 = $52;
 $8016 = $8015;
 $8017 = HEAP32[$8016>>2]|0;
 $8018 = (($8015) + 4)|0;
 $8019 = $8018;
 $8020 = HEAP32[$8019>>2]|0;
 $8021 = (_i64Add(($8017|0),($8020|0),($8011|0),($8014|0))|0);
 $8022 = tempRet0;
 $8023 = $52;
 $8024 = $8023;
 HEAP32[$8024>>2] = $8021;
 $8025 = (($8023) + 4)|0;
 $8026 = $8025;
 HEAP32[$8026>>2] = $8022;
 $8027 = $75;
 $8028 = $8027;
 $8029 = HEAP32[$8028>>2]|0;
 $8030 = (($8027) + 4)|0;
 $8031 = $8030;
 $8032 = HEAP32[$8031>>2]|0;
 $8033 = (_bitshift64Shl(($8029|0),($8032|0),21)|0);
 $8034 = tempRet0;
 $8035 = $51;
 $8036 = $8035;
 $8037 = HEAP32[$8036>>2]|0;
 $8038 = (($8035) + 4)|0;
 $8039 = $8038;
 $8040 = HEAP32[$8039>>2]|0;
 $8041 = (_i64Subtract(($8037|0),($8040|0),($8033|0),($8034|0))|0);
 $8042 = tempRet0;
 $8043 = $51;
 $8044 = $8043;
 HEAP32[$8044>>2] = $8041;
 $8045 = (($8043) + 4)|0;
 $8046 = $8045;
 HEAP32[$8046>>2] = $8042;
 $8047 = $52;
 $8048 = $8047;
 $8049 = HEAP32[$8048>>2]|0;
 $8050 = (($8047) + 4)|0;
 $8051 = $8050;
 $8052 = HEAP32[$8051>>2]|0;
 $8053 = (_bitshift64Ashr(($8049|0),($8052|0),21)|0);
 $8054 = tempRet0;
 $8055 = $76;
 $8056 = $8055;
 HEAP32[$8056>>2] = $8053;
 $8057 = (($8055) + 4)|0;
 $8058 = $8057;
 HEAP32[$8058>>2] = $8054;
 $8059 = $76;
 $8060 = $8059;
 $8061 = HEAP32[$8060>>2]|0;
 $8062 = (($8059) + 4)|0;
 $8063 = $8062;
 $8064 = HEAP32[$8063>>2]|0;
 $8065 = $53;
 $8066 = $8065;
 $8067 = HEAP32[$8066>>2]|0;
 $8068 = (($8065) + 4)|0;
 $8069 = $8068;
 $8070 = HEAP32[$8069>>2]|0;
 $8071 = (_i64Add(($8067|0),($8070|0),($8061|0),($8064|0))|0);
 $8072 = tempRet0;
 $8073 = $53;
 $8074 = $8073;
 HEAP32[$8074>>2] = $8071;
 $8075 = (($8073) + 4)|0;
 $8076 = $8075;
 HEAP32[$8076>>2] = $8072;
 $8077 = $76;
 $8078 = $8077;
 $8079 = HEAP32[$8078>>2]|0;
 $8080 = (($8077) + 4)|0;
 $8081 = $8080;
 $8082 = HEAP32[$8081>>2]|0;
 $8083 = (_bitshift64Shl(($8079|0),($8082|0),21)|0);
 $8084 = tempRet0;
 $8085 = $52;
 $8086 = $8085;
 $8087 = HEAP32[$8086>>2]|0;
 $8088 = (($8085) + 4)|0;
 $8089 = $8088;
 $8090 = HEAP32[$8089>>2]|0;
 $8091 = (_i64Subtract(($8087|0),($8090|0),($8083|0),($8084|0))|0);
 $8092 = tempRet0;
 $8093 = $52;
 $8094 = $8093;
 HEAP32[$8094>>2] = $8091;
 $8095 = (($8093) + 4)|0;
 $8096 = $8095;
 HEAP32[$8096>>2] = $8092;
 $8097 = $53;
 $8098 = $8097;
 $8099 = HEAP32[$8098>>2]|0;
 $8100 = (($8097) + 4)|0;
 $8101 = $8100;
 $8102 = HEAP32[$8101>>2]|0;
 $8103 = (_bitshift64Ashr(($8099|0),($8102|0),21)|0);
 $8104 = tempRet0;
 $8105 = $77;
 $8106 = $8105;
 HEAP32[$8106>>2] = $8103;
 $8107 = (($8105) + 4)|0;
 $8108 = $8107;
 HEAP32[$8108>>2] = $8104;
 $8109 = $77;
 $8110 = $8109;
 $8111 = HEAP32[$8110>>2]|0;
 $8112 = (($8109) + 4)|0;
 $8113 = $8112;
 $8114 = HEAP32[$8113>>2]|0;
 $8115 = $54;
 $8116 = $8115;
 $8117 = HEAP32[$8116>>2]|0;
 $8118 = (($8115) + 4)|0;
 $8119 = $8118;
 $8120 = HEAP32[$8119>>2]|0;
 $8121 = (_i64Add(($8117|0),($8120|0),($8111|0),($8114|0))|0);
 $8122 = tempRet0;
 $8123 = $54;
 $8124 = $8123;
 HEAP32[$8124>>2] = $8121;
 $8125 = (($8123) + 4)|0;
 $8126 = $8125;
 HEAP32[$8126>>2] = $8122;
 $8127 = $77;
 $8128 = $8127;
 $8129 = HEAP32[$8128>>2]|0;
 $8130 = (($8127) + 4)|0;
 $8131 = $8130;
 $8132 = HEAP32[$8131>>2]|0;
 $8133 = (_bitshift64Shl(($8129|0),($8132|0),21)|0);
 $8134 = tempRet0;
 $8135 = $53;
 $8136 = $8135;
 $8137 = HEAP32[$8136>>2]|0;
 $8138 = (($8135) + 4)|0;
 $8139 = $8138;
 $8140 = HEAP32[$8139>>2]|0;
 $8141 = (_i64Subtract(($8137|0),($8140|0),($8133|0),($8134|0))|0);
 $8142 = tempRet0;
 $8143 = $53;
 $8144 = $8143;
 HEAP32[$8144>>2] = $8141;
 $8145 = (($8143) + 4)|0;
 $8146 = $8145;
 HEAP32[$8146>>2] = $8142;
 $8147 = $54;
 $8148 = $8147;
 $8149 = HEAP32[$8148>>2]|0;
 $8150 = (($8147) + 4)|0;
 $8151 = $8150;
 $8152 = HEAP32[$8151>>2]|0;
 $8153 = (_bitshift64Ashr(($8149|0),($8152|0),21)|0);
 $8154 = tempRet0;
 $8155 = $78;
 $8156 = $8155;
 HEAP32[$8156>>2] = $8153;
 $8157 = (($8155) + 4)|0;
 $8158 = $8157;
 HEAP32[$8158>>2] = $8154;
 $8159 = $78;
 $8160 = $8159;
 $8161 = HEAP32[$8160>>2]|0;
 $8162 = (($8159) + 4)|0;
 $8163 = $8162;
 $8164 = HEAP32[$8163>>2]|0;
 $8165 = $55;
 $8166 = $8165;
 $8167 = HEAP32[$8166>>2]|0;
 $8168 = (($8165) + 4)|0;
 $8169 = $8168;
 $8170 = HEAP32[$8169>>2]|0;
 $8171 = (_i64Add(($8167|0),($8170|0),($8161|0),($8164|0))|0);
 $8172 = tempRet0;
 $8173 = $55;
 $8174 = $8173;
 HEAP32[$8174>>2] = $8171;
 $8175 = (($8173) + 4)|0;
 $8176 = $8175;
 HEAP32[$8176>>2] = $8172;
 $8177 = $78;
 $8178 = $8177;
 $8179 = HEAP32[$8178>>2]|0;
 $8180 = (($8177) + 4)|0;
 $8181 = $8180;
 $8182 = HEAP32[$8181>>2]|0;
 $8183 = (_bitshift64Shl(($8179|0),($8182|0),21)|0);
 $8184 = tempRet0;
 $8185 = $54;
 $8186 = $8185;
 $8187 = HEAP32[$8186>>2]|0;
 $8188 = (($8185) + 4)|0;
 $8189 = $8188;
 $8190 = HEAP32[$8189>>2]|0;
 $8191 = (_i64Subtract(($8187|0),($8190|0),($8183|0),($8184|0))|0);
 $8192 = tempRet0;
 $8193 = $54;
 $8194 = $8193;
 HEAP32[$8194>>2] = $8191;
 $8195 = (($8193) + 4)|0;
 $8196 = $8195;
 HEAP32[$8196>>2] = $8192;
 $8197 = $44;
 $8198 = $8197;
 $8199 = HEAP32[$8198>>2]|0;
 $8200 = (($8197) + 4)|0;
 $8201 = $8200;
 $8202 = HEAP32[$8201>>2]|0;
 $8203 = (_bitshift64Ashr(($8199|0),($8202|0),0)|0);
 $8204 = tempRet0;
 $8205 = $8203&255;
 $8206 = $4;
 HEAP8[$8206>>0] = $8205;
 $8207 = $44;
 $8208 = $8207;
 $8209 = HEAP32[$8208>>2]|0;
 $8210 = (($8207) + 4)|0;
 $8211 = $8210;
 $8212 = HEAP32[$8211>>2]|0;
 $8213 = (_bitshift64Ashr(($8209|0),($8212|0),8)|0);
 $8214 = tempRet0;
 $8215 = $8213&255;
 $8216 = $4;
 $8217 = ((($8216)) + 1|0);
 HEAP8[$8217>>0] = $8215;
 $8218 = $44;
 $8219 = $8218;
 $8220 = HEAP32[$8219>>2]|0;
 $8221 = (($8218) + 4)|0;
 $8222 = $8221;
 $8223 = HEAP32[$8222>>2]|0;
 $8224 = (_bitshift64Ashr(($8220|0),($8223|0),16)|0);
 $8225 = tempRet0;
 $8226 = $45;
 $8227 = $8226;
 $8228 = HEAP32[$8227>>2]|0;
 $8229 = (($8226) + 4)|0;
 $8230 = $8229;
 $8231 = HEAP32[$8230>>2]|0;
 $8232 = (_bitshift64Shl(($8228|0),($8231|0),5)|0);
 $8233 = tempRet0;
 $8234 = $8224 | $8232;
 $8225 | $8233;
 $8235 = $8234&255;
 $8236 = $4;
 $8237 = ((($8236)) + 2|0);
 HEAP8[$8237>>0] = $8235;
 $8238 = $45;
 $8239 = $8238;
 $8240 = HEAP32[$8239>>2]|0;
 $8241 = (($8238) + 4)|0;
 $8242 = $8241;
 $8243 = HEAP32[$8242>>2]|0;
 $8244 = (_bitshift64Ashr(($8240|0),($8243|0),3)|0);
 $8245 = tempRet0;
 $8246 = $8244&255;
 $8247 = $4;
 $8248 = ((($8247)) + 3|0);
 HEAP8[$8248>>0] = $8246;
 $8249 = $45;
 $8250 = $8249;
 $8251 = HEAP32[$8250>>2]|0;
 $8252 = (($8249) + 4)|0;
 $8253 = $8252;
 $8254 = HEAP32[$8253>>2]|0;
 $8255 = (_bitshift64Ashr(($8251|0),($8254|0),11)|0);
 $8256 = tempRet0;
 $8257 = $8255&255;
 $8258 = $4;
 $8259 = ((($8258)) + 4|0);
 HEAP8[$8259>>0] = $8257;
 $8260 = $45;
 $8261 = $8260;
 $8262 = HEAP32[$8261>>2]|0;
 $8263 = (($8260) + 4)|0;
 $8264 = $8263;
 $8265 = HEAP32[$8264>>2]|0;
 $8266 = (_bitshift64Ashr(($8262|0),($8265|0),19)|0);
 $8267 = tempRet0;
 $8268 = $46;
 $8269 = $8268;
 $8270 = HEAP32[$8269>>2]|0;
 $8271 = (($8268) + 4)|0;
 $8272 = $8271;
 $8273 = HEAP32[$8272>>2]|0;
 $8274 = (_bitshift64Shl(($8270|0),($8273|0),2)|0);
 $8275 = tempRet0;
 $8276 = $8266 | $8274;
 $8267 | $8275;
 $8277 = $8276&255;
 $8278 = $4;
 $8279 = ((($8278)) + 5|0);
 HEAP8[$8279>>0] = $8277;
 $8280 = $46;
 $8281 = $8280;
 $8282 = HEAP32[$8281>>2]|0;
 $8283 = (($8280) + 4)|0;
 $8284 = $8283;
 $8285 = HEAP32[$8284>>2]|0;
 $8286 = (_bitshift64Ashr(($8282|0),($8285|0),6)|0);
 $8287 = tempRet0;
 $8288 = $8286&255;
 $8289 = $4;
 $8290 = ((($8289)) + 6|0);
 HEAP8[$8290>>0] = $8288;
 $8291 = $46;
 $8292 = $8291;
 $8293 = HEAP32[$8292>>2]|0;
 $8294 = (($8291) + 4)|0;
 $8295 = $8294;
 $8296 = HEAP32[$8295>>2]|0;
 $8297 = (_bitshift64Ashr(($8293|0),($8296|0),14)|0);
 $8298 = tempRet0;
 $8299 = $47;
 $8300 = $8299;
 $8301 = HEAP32[$8300>>2]|0;
 $8302 = (($8299) + 4)|0;
 $8303 = $8302;
 $8304 = HEAP32[$8303>>2]|0;
 $8305 = (_bitshift64Shl(($8301|0),($8304|0),7)|0);
 $8306 = tempRet0;
 $8307 = $8297 | $8305;
 $8298 | $8306;
 $8308 = $8307&255;
 $8309 = $4;
 $8310 = ((($8309)) + 7|0);
 HEAP8[$8310>>0] = $8308;
 $8311 = $47;
 $8312 = $8311;
 $8313 = HEAP32[$8312>>2]|0;
 $8314 = (($8311) + 4)|0;
 $8315 = $8314;
 $8316 = HEAP32[$8315>>2]|0;
 $8317 = (_bitshift64Ashr(($8313|0),($8316|0),1)|0);
 $8318 = tempRet0;
 $8319 = $8317&255;
 $8320 = $4;
 $8321 = ((($8320)) + 8|0);
 HEAP8[$8321>>0] = $8319;
 $8322 = $47;
 $8323 = $8322;
 $8324 = HEAP32[$8323>>2]|0;
 $8325 = (($8322) + 4)|0;
 $8326 = $8325;
 $8327 = HEAP32[$8326>>2]|0;
 $8328 = (_bitshift64Ashr(($8324|0),($8327|0),9)|0);
 $8329 = tempRet0;
 $8330 = $8328&255;
 $8331 = $4;
 $8332 = ((($8331)) + 9|0);
 HEAP8[$8332>>0] = $8330;
 $8333 = $47;
 $8334 = $8333;
 $8335 = HEAP32[$8334>>2]|0;
 $8336 = (($8333) + 4)|0;
 $8337 = $8336;
 $8338 = HEAP32[$8337>>2]|0;
 $8339 = (_bitshift64Ashr(($8335|0),($8338|0),17)|0);
 $8340 = tempRet0;
 $8341 = $48;
 $8342 = $8341;
 $8343 = HEAP32[$8342>>2]|0;
 $8344 = (($8341) + 4)|0;
 $8345 = $8344;
 $8346 = HEAP32[$8345>>2]|0;
 $8347 = (_bitshift64Shl(($8343|0),($8346|0),4)|0);
 $8348 = tempRet0;
 $8349 = $8339 | $8347;
 $8340 | $8348;
 $8350 = $8349&255;
 $8351 = $4;
 $8352 = ((($8351)) + 10|0);
 HEAP8[$8352>>0] = $8350;
 $8353 = $48;
 $8354 = $8353;
 $8355 = HEAP32[$8354>>2]|0;
 $8356 = (($8353) + 4)|0;
 $8357 = $8356;
 $8358 = HEAP32[$8357>>2]|0;
 $8359 = (_bitshift64Ashr(($8355|0),($8358|0),4)|0);
 $8360 = tempRet0;
 $8361 = $8359&255;
 $8362 = $4;
 $8363 = ((($8362)) + 11|0);
 HEAP8[$8363>>0] = $8361;
 $8364 = $48;
 $8365 = $8364;
 $8366 = HEAP32[$8365>>2]|0;
 $8367 = (($8364) + 4)|0;
 $8368 = $8367;
 $8369 = HEAP32[$8368>>2]|0;
 $8370 = (_bitshift64Ashr(($8366|0),($8369|0),12)|0);
 $8371 = tempRet0;
 $8372 = $8370&255;
 $8373 = $4;
 $8374 = ((($8373)) + 12|0);
 HEAP8[$8374>>0] = $8372;
 $8375 = $48;
 $8376 = $8375;
 $8377 = HEAP32[$8376>>2]|0;
 $8378 = (($8375) + 4)|0;
 $8379 = $8378;
 $8380 = HEAP32[$8379>>2]|0;
 $8381 = (_bitshift64Ashr(($8377|0),($8380|0),20)|0);
 $8382 = tempRet0;
 $8383 = $49;
 $8384 = $8383;
 $8385 = HEAP32[$8384>>2]|0;
 $8386 = (($8383) + 4)|0;
 $8387 = $8386;
 $8388 = HEAP32[$8387>>2]|0;
 $8389 = (_bitshift64Shl(($8385|0),($8388|0),1)|0);
 $8390 = tempRet0;
 $8391 = $8381 | $8389;
 $8382 | $8390;
 $8392 = $8391&255;
 $8393 = $4;
 $8394 = ((($8393)) + 13|0);
 HEAP8[$8394>>0] = $8392;
 $8395 = $49;
 $8396 = $8395;
 $8397 = HEAP32[$8396>>2]|0;
 $8398 = (($8395) + 4)|0;
 $8399 = $8398;
 $8400 = HEAP32[$8399>>2]|0;
 $8401 = (_bitshift64Ashr(($8397|0),($8400|0),7)|0);
 $8402 = tempRet0;
 $8403 = $8401&255;
 $8404 = $4;
 $8405 = ((($8404)) + 14|0);
 HEAP8[$8405>>0] = $8403;
 $8406 = $49;
 $8407 = $8406;
 $8408 = HEAP32[$8407>>2]|0;
 $8409 = (($8406) + 4)|0;
 $8410 = $8409;
 $8411 = HEAP32[$8410>>2]|0;
 $8412 = (_bitshift64Ashr(($8408|0),($8411|0),15)|0);
 $8413 = tempRet0;
 $8414 = $50;
 $8415 = $8414;
 $8416 = HEAP32[$8415>>2]|0;
 $8417 = (($8414) + 4)|0;
 $8418 = $8417;
 $8419 = HEAP32[$8418>>2]|0;
 $8420 = (_bitshift64Shl(($8416|0),($8419|0),6)|0);
 $8421 = tempRet0;
 $8422 = $8412 | $8420;
 $8413 | $8421;
 $8423 = $8422&255;
 $8424 = $4;
 $8425 = ((($8424)) + 15|0);
 HEAP8[$8425>>0] = $8423;
 $8426 = $50;
 $8427 = $8426;
 $8428 = HEAP32[$8427>>2]|0;
 $8429 = (($8426) + 4)|0;
 $8430 = $8429;
 $8431 = HEAP32[$8430>>2]|0;
 $8432 = (_bitshift64Ashr(($8428|0),($8431|0),2)|0);
 $8433 = tempRet0;
 $8434 = $8432&255;
 $8435 = $4;
 $8436 = ((($8435)) + 16|0);
 HEAP8[$8436>>0] = $8434;
 $8437 = $50;
 $8438 = $8437;
 $8439 = HEAP32[$8438>>2]|0;
 $8440 = (($8437) + 4)|0;
 $8441 = $8440;
 $8442 = HEAP32[$8441>>2]|0;
 $8443 = (_bitshift64Ashr(($8439|0),($8442|0),10)|0);
 $8444 = tempRet0;
 $8445 = $8443&255;
 $8446 = $4;
 $8447 = ((($8446)) + 17|0);
 HEAP8[$8447>>0] = $8445;
 $8448 = $50;
 $8449 = $8448;
 $8450 = HEAP32[$8449>>2]|0;
 $8451 = (($8448) + 4)|0;
 $8452 = $8451;
 $8453 = HEAP32[$8452>>2]|0;
 $8454 = (_bitshift64Ashr(($8450|0),($8453|0),18)|0);
 $8455 = tempRet0;
 $8456 = $51;
 $8457 = $8456;
 $8458 = HEAP32[$8457>>2]|0;
 $8459 = (($8456) + 4)|0;
 $8460 = $8459;
 $8461 = HEAP32[$8460>>2]|0;
 $8462 = (_bitshift64Shl(($8458|0),($8461|0),3)|0);
 $8463 = tempRet0;
 $8464 = $8454 | $8462;
 $8455 | $8463;
 $8465 = $8464&255;
 $8466 = $4;
 $8467 = ((($8466)) + 18|0);
 HEAP8[$8467>>0] = $8465;
 $8468 = $51;
 $8469 = $8468;
 $8470 = HEAP32[$8469>>2]|0;
 $8471 = (($8468) + 4)|0;
 $8472 = $8471;
 $8473 = HEAP32[$8472>>2]|0;
 $8474 = (_bitshift64Ashr(($8470|0),($8473|0),5)|0);
 $8475 = tempRet0;
 $8476 = $8474&255;
 $8477 = $4;
 $8478 = ((($8477)) + 19|0);
 HEAP8[$8478>>0] = $8476;
 $8479 = $51;
 $8480 = $8479;
 $8481 = HEAP32[$8480>>2]|0;
 $8482 = (($8479) + 4)|0;
 $8483 = $8482;
 $8484 = HEAP32[$8483>>2]|0;
 $8485 = (_bitshift64Ashr(($8481|0),($8484|0),13)|0);
 $8486 = tempRet0;
 $8487 = $8485&255;
 $8488 = $4;
 $8489 = ((($8488)) + 20|0);
 HEAP8[$8489>>0] = $8487;
 $8490 = $52;
 $8491 = $8490;
 $8492 = HEAP32[$8491>>2]|0;
 $8493 = (($8490) + 4)|0;
 $8494 = $8493;
 $8495 = HEAP32[$8494>>2]|0;
 $8496 = (_bitshift64Ashr(($8492|0),($8495|0),0)|0);
 $8497 = tempRet0;
 $8498 = $8496&255;
 $8499 = $4;
 $8500 = ((($8499)) + 21|0);
 HEAP8[$8500>>0] = $8498;
 $8501 = $52;
 $8502 = $8501;
 $8503 = HEAP32[$8502>>2]|0;
 $8504 = (($8501) + 4)|0;
 $8505 = $8504;
 $8506 = HEAP32[$8505>>2]|0;
 $8507 = (_bitshift64Ashr(($8503|0),($8506|0),8)|0);
 $8508 = tempRet0;
 $8509 = $8507&255;
 $8510 = $4;
 $8511 = ((($8510)) + 22|0);
 HEAP8[$8511>>0] = $8509;
 $8512 = $52;
 $8513 = $8512;
 $8514 = HEAP32[$8513>>2]|0;
 $8515 = (($8512) + 4)|0;
 $8516 = $8515;
 $8517 = HEAP32[$8516>>2]|0;
 $8518 = (_bitshift64Ashr(($8514|0),($8517|0),16)|0);
 $8519 = tempRet0;
 $8520 = $53;
 $8521 = $8520;
 $8522 = HEAP32[$8521>>2]|0;
 $8523 = (($8520) + 4)|0;
 $8524 = $8523;
 $8525 = HEAP32[$8524>>2]|0;
 $8526 = (_bitshift64Shl(($8522|0),($8525|0),5)|0);
 $8527 = tempRet0;
 $8528 = $8518 | $8526;
 $8519 | $8527;
 $8529 = $8528&255;
 $8530 = $4;
 $8531 = ((($8530)) + 23|0);
 HEAP8[$8531>>0] = $8529;
 $8532 = $53;
 $8533 = $8532;
 $8534 = HEAP32[$8533>>2]|0;
 $8535 = (($8532) + 4)|0;
 $8536 = $8535;
 $8537 = HEAP32[$8536>>2]|0;
 $8538 = (_bitshift64Ashr(($8534|0),($8537|0),3)|0);
 $8539 = tempRet0;
 $8540 = $8538&255;
 $8541 = $4;
 $8542 = ((($8541)) + 24|0);
 HEAP8[$8542>>0] = $8540;
 $8543 = $53;
 $8544 = $8543;
 $8545 = HEAP32[$8544>>2]|0;
 $8546 = (($8543) + 4)|0;
 $8547 = $8546;
 $8548 = HEAP32[$8547>>2]|0;
 $8549 = (_bitshift64Ashr(($8545|0),($8548|0),11)|0);
 $8550 = tempRet0;
 $8551 = $8549&255;
 $8552 = $4;
 $8553 = ((($8552)) + 25|0);
 HEAP8[$8553>>0] = $8551;
 $8554 = $53;
 $8555 = $8554;
 $8556 = HEAP32[$8555>>2]|0;
 $8557 = (($8554) + 4)|0;
 $8558 = $8557;
 $8559 = HEAP32[$8558>>2]|0;
 $8560 = (_bitshift64Ashr(($8556|0),($8559|0),19)|0);
 $8561 = tempRet0;
 $8562 = $54;
 $8563 = $8562;
 $8564 = HEAP32[$8563>>2]|0;
 $8565 = (($8562) + 4)|0;
 $8566 = $8565;
 $8567 = HEAP32[$8566>>2]|0;
 $8568 = (_bitshift64Shl(($8564|0),($8567|0),2)|0);
 $8569 = tempRet0;
 $8570 = $8560 | $8568;
 $8561 | $8569;
 $8571 = $8570&255;
 $8572 = $4;
 $8573 = ((($8572)) + 26|0);
 HEAP8[$8573>>0] = $8571;
 $8574 = $54;
 $8575 = $8574;
 $8576 = HEAP32[$8575>>2]|0;
 $8577 = (($8574) + 4)|0;
 $8578 = $8577;
 $8579 = HEAP32[$8578>>2]|0;
 $8580 = (_bitshift64Ashr(($8576|0),($8579|0),6)|0);
 $8581 = tempRet0;
 $8582 = $8580&255;
 $8583 = $4;
 $8584 = ((($8583)) + 27|0);
 HEAP8[$8584>>0] = $8582;
 $8585 = $54;
 $8586 = $8585;
 $8587 = HEAP32[$8586>>2]|0;
 $8588 = (($8585) + 4)|0;
 $8589 = $8588;
 $8590 = HEAP32[$8589>>2]|0;
 $8591 = (_bitshift64Ashr(($8587|0),($8590|0),14)|0);
 $8592 = tempRet0;
 $8593 = $55;
 $8594 = $8593;
 $8595 = HEAP32[$8594>>2]|0;
 $8596 = (($8593) + 4)|0;
 $8597 = $8596;
 $8598 = HEAP32[$8597>>2]|0;
 $8599 = (_bitshift64Shl(($8595|0),($8598|0),7)|0);
 $8600 = tempRet0;
 $8601 = $8591 | $8599;
 $8592 | $8600;
 $8602 = $8601&255;
 $8603 = $4;
 $8604 = ((($8603)) + 28|0);
 HEAP8[$8604>>0] = $8602;
 $8605 = $55;
 $8606 = $8605;
 $8607 = HEAP32[$8606>>2]|0;
 $8608 = (($8605) + 4)|0;
 $8609 = $8608;
 $8610 = HEAP32[$8609>>2]|0;
 $8611 = (_bitshift64Ashr(($8607|0),($8610|0),1)|0);
 $8612 = tempRet0;
 $8613 = $8611&255;
 $8614 = $4;
 $8615 = ((($8614)) + 29|0);
 HEAP8[$8615>>0] = $8613;
 $8616 = $55;
 $8617 = $8616;
 $8618 = HEAP32[$8617>>2]|0;
 $8619 = (($8616) + 4)|0;
 $8620 = $8619;
 $8621 = HEAP32[$8620>>2]|0;
 $8622 = (_bitshift64Ashr(($8618|0),($8621|0),9)|0);
 $8623 = tempRet0;
 $8624 = $8622&255;
 $8625 = $4;
 $8626 = ((($8625)) + 30|0);
 HEAP8[$8626>>0] = $8624;
 $8627 = $55;
 $8628 = $8627;
 $8629 = HEAP32[$8628>>2]|0;
 $8630 = (($8627) + 4)|0;
 $8631 = $8630;
 $8632 = HEAP32[$8631>>2]|0;
 $8633 = (_bitshift64Ashr(($8629|0),($8632|0),17)|0);
 $8634 = tempRet0;
 $8635 = $8633&255;
 $8636 = $4;
 $8637 = ((($8636)) + 31|0);
 HEAP8[$8637>>0] = $8635;
 STACKTOP = sp;return;
}
function _load_3_40($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = tempRet0;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $2;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 tempRet0 = ($51);
 STACKTOP = sp;return ($48|0);
}
function _load_4_41($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = tempRet0;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $1;
 $47 = ((($46)) + 3|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (_bitshift64Shl(($49|0),0,24)|0);
 $51 = tempRet0;
 $52 = $2;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $54 | $50;
 $59 = $57 | $51;
 $60 = $2;
 $61 = $60;
 HEAP32[$61>>2] = $58;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 $64 = $2;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 tempRet0 = ($69);
 STACKTOP = sp;return ($66|0);
}
function _crypto_sign_ed25519_ref10_sc_reduce($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0;
 var $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0;
 var $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0;
 var $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0;
 var $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0;
 var $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0;
 var $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0;
 var $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0;
 var $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0;
 var $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0;
 var $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0;
 var $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0;
 var $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0;
 var $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0;
 var $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0;
 var $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0;
 var $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0;
 var $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0;
 var $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0;
 var $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0;
 var $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0;
 var $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0;
 var $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0;
 var $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0;
 var $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0;
 var $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0;
 var $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0;
 var $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0;
 var $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0;
 var $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0;
 var $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0;
 var $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0;
 var $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0;
 var $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0;
 var $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0;
 var $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0;
 var $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0;
 var $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0;
 var $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0;
 var $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0;
 var $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0;
 var $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0;
 var $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0;
 var $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0;
 var $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0;
 var $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0;
 var $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0;
 var $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0;
 var $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0;
 var $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0;
 var $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0;
 var $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0;
 var $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0;
 var $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0;
 var $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0;
 var $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0;
 var $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0;
 var $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0;
 var $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0;
 var $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0;
 var $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0;
 var $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0;
 var $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0;
 var $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0;
 var $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0;
 var $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0;
 var $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0;
 var $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0;
 var $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0;
 var $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0;
 var $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0;
 var $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0;
 var $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0;
 var $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0;
 var $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0;
 var $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0;
 var $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0;
 var $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0;
 var $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0;
 var $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0;
 var $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0;
 var $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0;
 var $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0;
 var $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0;
 var $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0;
 var $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0;
 var $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0;
 var $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0;
 var $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0;
 var $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0;
 var $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0;
 var $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0;
 var $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0;
 var $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0;
 var $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0;
 var $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0;
 var $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0;
 var $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0;
 var $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0;
 var $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0;
 var $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0;
 var $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0;
 var $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0;
 var $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0;
 var $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0;
 var $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0;
 var $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0;
 var $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0;
 var $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0;
 var $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0;
 var $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0;
 var $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0;
 var $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0;
 var $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0;
 var $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0;
 var $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0;
 var $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0;
 var $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0;
 var $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0;
 var $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0;
 var $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0;
 var $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0;
 var $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0;
 var $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0;
 var $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0;
 var $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0;
 var $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0;
 var $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0;
 var $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0;
 var $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0;
 var $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0;
 var $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0;
 var $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0;
 var $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0;
 var $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0;
 var $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0;
 var $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0;
 var $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0;
 var $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0;
 var $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0;
 var $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0;
 var $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0;
 var $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0;
 var $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0;
 var $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0;
 var $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0;
 var $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0;
 var $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0;
 var $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0;
 var $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0;
 var $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0;
 var $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0;
 var $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0;
 var $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0;
 var $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0;
 var $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0;
 var $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0;
 var $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0;
 var $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0;
 var $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0;
 var $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0;
 var $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0;
 var $4509 = 0, $451 = 0, $4510 = 0, $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0;
 var $4527 = 0, $4528 = 0, $4529 = 0, $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0;
 var $4545 = 0, $4546 = 0, $4547 = 0, $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0;
 var $4563 = 0, $4564 = 0, $4565 = 0, $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0;
 var $4581 = 0, $4582 = 0, $4583 = 0, $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0;
 var $46 = 0, $460 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0;
 var $4617 = 0, $4618 = 0, $4619 = 0, $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0;
 var $4635 = 0, $4636 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0;
 var $4653 = 0, $4654 = 0, $4655 = 0, $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0;
 var $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0;
 var $469 = 0, $4690 = 0, $4691 = 0, $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0;
 var $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0;
 var $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0;
 var $4743 = 0, $4744 = 0, $4745 = 0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0;
 var $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0;
 var $478 = 0, $4780 = 0, $4781 = 0, $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0;
 var $4798 = 0, $4799 = 0, $48 = 0, $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0, $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0;
 var $4815 = 0, $4816 = 0, $4817 = 0, $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0, $4821 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0;
 var $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $2 = sp + 320|0;
 $3 = sp + 312|0;
 $4 = sp + 304|0;
 $5 = sp + 296|0;
 $6 = sp + 288|0;
 $7 = sp + 280|0;
 $8 = sp + 272|0;
 $9 = sp + 264|0;
 $10 = sp + 256|0;
 $11 = sp + 248|0;
 $12 = sp + 240|0;
 $13 = sp + 232|0;
 $14 = sp + 224|0;
 $15 = sp + 216|0;
 $16 = sp + 208|0;
 $17 = sp + 200|0;
 $18 = sp + 192|0;
 $19 = sp + 184|0;
 $20 = sp + 176|0;
 $21 = sp + 168|0;
 $22 = sp + 160|0;
 $23 = sp + 152|0;
 $24 = sp + 144|0;
 $25 = sp + 136|0;
 $26 = sp + 128|0;
 $27 = sp + 120|0;
 $28 = sp + 112|0;
 $29 = sp + 104|0;
 $30 = sp + 96|0;
 $31 = sp + 88|0;
 $32 = sp + 80|0;
 $33 = sp + 72|0;
 $34 = sp + 64|0;
 $35 = sp + 56|0;
 $36 = sp + 48|0;
 $37 = sp + 40|0;
 $38 = sp + 32|0;
 $39 = sp + 24|0;
 $40 = sp + 16|0;
 $41 = sp + 8|0;
 $42 = sp;
 $1 = $0;
 $43 = $1;
 $44 = (_load_3_44($43)|0);
 $45 = tempRet0;
 $46 = 2097151 & $44;
 $47 = $2;
 $48 = $47;
 HEAP32[$48>>2] = $46;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = 0;
 $51 = $1;
 $52 = ((($51)) + 2|0);
 $53 = (_load_4_45($52)|0);
 $54 = tempRet0;
 $55 = (_bitshift64Lshr(($53|0),($54|0),5)|0);
 $56 = tempRet0;
 $57 = 2097151 & $55;
 $58 = $3;
 $59 = $58;
 HEAP32[$59>>2] = $57;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = 0;
 $62 = $1;
 $63 = ((($62)) + 5|0);
 $64 = (_load_3_44($63)|0);
 $65 = tempRet0;
 $66 = (_bitshift64Lshr(($64|0),($65|0),2)|0);
 $67 = tempRet0;
 $68 = 2097151 & $66;
 $69 = $4;
 $70 = $69;
 HEAP32[$70>>2] = $68;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 7|0);
 $75 = (_load_4_45($74)|0);
 $76 = tempRet0;
 $77 = (_bitshift64Lshr(($75|0),($76|0),7)|0);
 $78 = tempRet0;
 $79 = 2097151 & $77;
 $80 = $5;
 $81 = $80;
 HEAP32[$81>>2] = $79;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = 0;
 $84 = $1;
 $85 = ((($84)) + 10|0);
 $86 = (_load_4_45($85)|0);
 $87 = tempRet0;
 $88 = (_bitshift64Lshr(($86|0),($87|0),4)|0);
 $89 = tempRet0;
 $90 = 2097151 & $88;
 $91 = $6;
 $92 = $91;
 HEAP32[$92>>2] = $90;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = 0;
 $95 = $1;
 $96 = ((($95)) + 13|0);
 $97 = (_load_3_44($96)|0);
 $98 = tempRet0;
 $99 = (_bitshift64Lshr(($97|0),($98|0),1)|0);
 $100 = tempRet0;
 $101 = 2097151 & $99;
 $102 = $7;
 $103 = $102;
 HEAP32[$103>>2] = $101;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = 0;
 $106 = $1;
 $107 = ((($106)) + 15|0);
 $108 = (_load_4_45($107)|0);
 $109 = tempRet0;
 $110 = (_bitshift64Lshr(($108|0),($109|0),6)|0);
 $111 = tempRet0;
 $112 = 2097151 & $110;
 $113 = $8;
 $114 = $113;
 HEAP32[$114>>2] = $112;
 $115 = (($113) + 4)|0;
 $116 = $115;
 HEAP32[$116>>2] = 0;
 $117 = $1;
 $118 = ((($117)) + 18|0);
 $119 = (_load_3_44($118)|0);
 $120 = tempRet0;
 $121 = (_bitshift64Lshr(($119|0),($120|0),3)|0);
 $122 = tempRet0;
 $123 = 2097151 & $121;
 $124 = $9;
 $125 = $124;
 HEAP32[$125>>2] = $123;
 $126 = (($124) + 4)|0;
 $127 = $126;
 HEAP32[$127>>2] = 0;
 $128 = $1;
 $129 = ((($128)) + 21|0);
 $130 = (_load_3_44($129)|0);
 $131 = tempRet0;
 $132 = 2097151 & $130;
 $133 = $10;
 $134 = $133;
 HEAP32[$134>>2] = $132;
 $135 = (($133) + 4)|0;
 $136 = $135;
 HEAP32[$136>>2] = 0;
 $137 = $1;
 $138 = ((($137)) + 23|0);
 $139 = (_load_4_45($138)|0);
 $140 = tempRet0;
 $141 = (_bitshift64Lshr(($139|0),($140|0),5)|0);
 $142 = tempRet0;
 $143 = 2097151 & $141;
 $144 = $11;
 $145 = $144;
 HEAP32[$145>>2] = $143;
 $146 = (($144) + 4)|0;
 $147 = $146;
 HEAP32[$147>>2] = 0;
 $148 = $1;
 $149 = ((($148)) + 26|0);
 $150 = (_load_3_44($149)|0);
 $151 = tempRet0;
 $152 = (_bitshift64Lshr(($150|0),($151|0),2)|0);
 $153 = tempRet0;
 $154 = 2097151 & $152;
 $155 = $12;
 $156 = $155;
 HEAP32[$156>>2] = $154;
 $157 = (($155) + 4)|0;
 $158 = $157;
 HEAP32[$158>>2] = 0;
 $159 = $1;
 $160 = ((($159)) + 28|0);
 $161 = (_load_4_45($160)|0);
 $162 = tempRet0;
 $163 = (_bitshift64Lshr(($161|0),($162|0),7)|0);
 $164 = tempRet0;
 $165 = 2097151 & $163;
 $166 = $13;
 $167 = $166;
 HEAP32[$167>>2] = $165;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP32[$169>>2] = 0;
 $170 = $1;
 $171 = ((($170)) + 31|0);
 $172 = (_load_4_45($171)|0);
 $173 = tempRet0;
 $174 = (_bitshift64Lshr(($172|0),($173|0),4)|0);
 $175 = tempRet0;
 $176 = 2097151 & $174;
 $177 = $14;
 $178 = $177;
 HEAP32[$178>>2] = $176;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = 0;
 $181 = $1;
 $182 = ((($181)) + 34|0);
 $183 = (_load_3_44($182)|0);
 $184 = tempRet0;
 $185 = (_bitshift64Lshr(($183|0),($184|0),1)|0);
 $186 = tempRet0;
 $187 = 2097151 & $185;
 $188 = $15;
 $189 = $188;
 HEAP32[$189>>2] = $187;
 $190 = (($188) + 4)|0;
 $191 = $190;
 HEAP32[$191>>2] = 0;
 $192 = $1;
 $193 = ((($192)) + 36|0);
 $194 = (_load_4_45($193)|0);
 $195 = tempRet0;
 $196 = (_bitshift64Lshr(($194|0),($195|0),6)|0);
 $197 = tempRet0;
 $198 = 2097151 & $196;
 $199 = $16;
 $200 = $199;
 HEAP32[$200>>2] = $198;
 $201 = (($199) + 4)|0;
 $202 = $201;
 HEAP32[$202>>2] = 0;
 $203 = $1;
 $204 = ((($203)) + 39|0);
 $205 = (_load_3_44($204)|0);
 $206 = tempRet0;
 $207 = (_bitshift64Lshr(($205|0),($206|0),3)|0);
 $208 = tempRet0;
 $209 = 2097151 & $207;
 $210 = $17;
 $211 = $210;
 HEAP32[$211>>2] = $209;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = 0;
 $214 = $1;
 $215 = ((($214)) + 42|0);
 $216 = (_load_3_44($215)|0);
 $217 = tempRet0;
 $218 = 2097151 & $216;
 $219 = $18;
 $220 = $219;
 HEAP32[$220>>2] = $218;
 $221 = (($219) + 4)|0;
 $222 = $221;
 HEAP32[$222>>2] = 0;
 $223 = $1;
 $224 = ((($223)) + 44|0);
 $225 = (_load_4_45($224)|0);
 $226 = tempRet0;
 $227 = (_bitshift64Lshr(($225|0),($226|0),5)|0);
 $228 = tempRet0;
 $229 = 2097151 & $227;
 $230 = $19;
 $231 = $230;
 HEAP32[$231>>2] = $229;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = 0;
 $234 = $1;
 $235 = ((($234)) + 47|0);
 $236 = (_load_3_44($235)|0);
 $237 = tempRet0;
 $238 = (_bitshift64Lshr(($236|0),($237|0),2)|0);
 $239 = tempRet0;
 $240 = 2097151 & $238;
 $241 = $20;
 $242 = $241;
 HEAP32[$242>>2] = $240;
 $243 = (($241) + 4)|0;
 $244 = $243;
 HEAP32[$244>>2] = 0;
 $245 = $1;
 $246 = ((($245)) + 49|0);
 $247 = (_load_4_45($246)|0);
 $248 = tempRet0;
 $249 = (_bitshift64Lshr(($247|0),($248|0),7)|0);
 $250 = tempRet0;
 $251 = 2097151 & $249;
 $252 = $21;
 $253 = $252;
 HEAP32[$253>>2] = $251;
 $254 = (($252) + 4)|0;
 $255 = $254;
 HEAP32[$255>>2] = 0;
 $256 = $1;
 $257 = ((($256)) + 52|0);
 $258 = (_load_4_45($257)|0);
 $259 = tempRet0;
 $260 = (_bitshift64Lshr(($258|0),($259|0),4)|0);
 $261 = tempRet0;
 $262 = 2097151 & $260;
 $263 = $22;
 $264 = $263;
 HEAP32[$264>>2] = $262;
 $265 = (($263) + 4)|0;
 $266 = $265;
 HEAP32[$266>>2] = 0;
 $267 = $1;
 $268 = ((($267)) + 55|0);
 $269 = (_load_3_44($268)|0);
 $270 = tempRet0;
 $271 = (_bitshift64Lshr(($269|0),($270|0),1)|0);
 $272 = tempRet0;
 $273 = 2097151 & $271;
 $274 = $23;
 $275 = $274;
 HEAP32[$275>>2] = $273;
 $276 = (($274) + 4)|0;
 $277 = $276;
 HEAP32[$277>>2] = 0;
 $278 = $1;
 $279 = ((($278)) + 57|0);
 $280 = (_load_4_45($279)|0);
 $281 = tempRet0;
 $282 = (_bitshift64Lshr(($280|0),($281|0),6)|0);
 $283 = tempRet0;
 $284 = 2097151 & $282;
 $285 = $24;
 $286 = $285;
 HEAP32[$286>>2] = $284;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = 0;
 $289 = $1;
 $290 = ((($289)) + 60|0);
 $291 = (_load_4_45($290)|0);
 $292 = tempRet0;
 $293 = (_bitshift64Lshr(($291|0),($292|0),3)|0);
 $294 = tempRet0;
 $295 = $25;
 $296 = $295;
 HEAP32[$296>>2] = $293;
 $297 = (($295) + 4)|0;
 $298 = $297;
 HEAP32[$298>>2] = $294;
 $299 = $25;
 $300 = $299;
 $301 = HEAP32[$300>>2]|0;
 $302 = (($299) + 4)|0;
 $303 = $302;
 $304 = HEAP32[$303>>2]|0;
 $305 = (___muldi3(($301|0),($304|0),666643,0)|0);
 $306 = tempRet0;
 $307 = $13;
 $308 = $307;
 $309 = HEAP32[$308>>2]|0;
 $310 = (($307) + 4)|0;
 $311 = $310;
 $312 = HEAP32[$311>>2]|0;
 $313 = (_i64Add(($309|0),($312|0),($305|0),($306|0))|0);
 $314 = tempRet0;
 $315 = $13;
 $316 = $315;
 HEAP32[$316>>2] = $313;
 $317 = (($315) + 4)|0;
 $318 = $317;
 HEAP32[$318>>2] = $314;
 $319 = $25;
 $320 = $319;
 $321 = HEAP32[$320>>2]|0;
 $322 = (($319) + 4)|0;
 $323 = $322;
 $324 = HEAP32[$323>>2]|0;
 $325 = (___muldi3(($321|0),($324|0),470296,0)|0);
 $326 = tempRet0;
 $327 = $14;
 $328 = $327;
 $329 = HEAP32[$328>>2]|0;
 $330 = (($327) + 4)|0;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (_i64Add(($329|0),($332|0),($325|0),($326|0))|0);
 $334 = tempRet0;
 $335 = $14;
 $336 = $335;
 HEAP32[$336>>2] = $333;
 $337 = (($335) + 4)|0;
 $338 = $337;
 HEAP32[$338>>2] = $334;
 $339 = $25;
 $340 = $339;
 $341 = HEAP32[$340>>2]|0;
 $342 = (($339) + 4)|0;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 $345 = (___muldi3(($341|0),($344|0),654183,0)|0);
 $346 = tempRet0;
 $347 = $15;
 $348 = $347;
 $349 = HEAP32[$348>>2]|0;
 $350 = (($347) + 4)|0;
 $351 = $350;
 $352 = HEAP32[$351>>2]|0;
 $353 = (_i64Add(($349|0),($352|0),($345|0),($346|0))|0);
 $354 = tempRet0;
 $355 = $15;
 $356 = $355;
 HEAP32[$356>>2] = $353;
 $357 = (($355) + 4)|0;
 $358 = $357;
 HEAP32[$358>>2] = $354;
 $359 = $25;
 $360 = $359;
 $361 = HEAP32[$360>>2]|0;
 $362 = (($359) + 4)|0;
 $363 = $362;
 $364 = HEAP32[$363>>2]|0;
 $365 = (___muldi3(($361|0),($364|0),997805,0)|0);
 $366 = tempRet0;
 $367 = $16;
 $368 = $367;
 $369 = HEAP32[$368>>2]|0;
 $370 = (($367) + 4)|0;
 $371 = $370;
 $372 = HEAP32[$371>>2]|0;
 $373 = (_i64Subtract(($369|0),($372|0),($365|0),($366|0))|0);
 $374 = tempRet0;
 $375 = $16;
 $376 = $375;
 HEAP32[$376>>2] = $373;
 $377 = (($375) + 4)|0;
 $378 = $377;
 HEAP32[$378>>2] = $374;
 $379 = $25;
 $380 = $379;
 $381 = HEAP32[$380>>2]|0;
 $382 = (($379) + 4)|0;
 $383 = $382;
 $384 = HEAP32[$383>>2]|0;
 $385 = (___muldi3(($381|0),($384|0),136657,0)|0);
 $386 = tempRet0;
 $387 = $17;
 $388 = $387;
 $389 = HEAP32[$388>>2]|0;
 $390 = (($387) + 4)|0;
 $391 = $390;
 $392 = HEAP32[$391>>2]|0;
 $393 = (_i64Add(($389|0),($392|0),($385|0),($386|0))|0);
 $394 = tempRet0;
 $395 = $17;
 $396 = $395;
 HEAP32[$396>>2] = $393;
 $397 = (($395) + 4)|0;
 $398 = $397;
 HEAP32[$398>>2] = $394;
 $399 = $25;
 $400 = $399;
 $401 = HEAP32[$400>>2]|0;
 $402 = (($399) + 4)|0;
 $403 = $402;
 $404 = HEAP32[$403>>2]|0;
 $405 = (___muldi3(($401|0),($404|0),683901,0)|0);
 $406 = tempRet0;
 $407 = $18;
 $408 = $407;
 $409 = HEAP32[$408>>2]|0;
 $410 = (($407) + 4)|0;
 $411 = $410;
 $412 = HEAP32[$411>>2]|0;
 $413 = (_i64Subtract(($409|0),($412|0),($405|0),($406|0))|0);
 $414 = tempRet0;
 $415 = $18;
 $416 = $415;
 HEAP32[$416>>2] = $413;
 $417 = (($415) + 4)|0;
 $418 = $417;
 HEAP32[$418>>2] = $414;
 $419 = $25;
 $420 = $419;
 HEAP32[$420>>2] = 0;
 $421 = (($419) + 4)|0;
 $422 = $421;
 HEAP32[$422>>2] = 0;
 $423 = $24;
 $424 = $423;
 $425 = HEAP32[$424>>2]|0;
 $426 = (($423) + 4)|0;
 $427 = $426;
 $428 = HEAP32[$427>>2]|0;
 $429 = (___muldi3(($425|0),($428|0),666643,0)|0);
 $430 = tempRet0;
 $431 = $12;
 $432 = $431;
 $433 = HEAP32[$432>>2]|0;
 $434 = (($431) + 4)|0;
 $435 = $434;
 $436 = HEAP32[$435>>2]|0;
 $437 = (_i64Add(($433|0),($436|0),($429|0),($430|0))|0);
 $438 = tempRet0;
 $439 = $12;
 $440 = $439;
 HEAP32[$440>>2] = $437;
 $441 = (($439) + 4)|0;
 $442 = $441;
 HEAP32[$442>>2] = $438;
 $443 = $24;
 $444 = $443;
 $445 = HEAP32[$444>>2]|0;
 $446 = (($443) + 4)|0;
 $447 = $446;
 $448 = HEAP32[$447>>2]|0;
 $449 = (___muldi3(($445|0),($448|0),470296,0)|0);
 $450 = tempRet0;
 $451 = $13;
 $452 = $451;
 $453 = HEAP32[$452>>2]|0;
 $454 = (($451) + 4)|0;
 $455 = $454;
 $456 = HEAP32[$455>>2]|0;
 $457 = (_i64Add(($453|0),($456|0),($449|0),($450|0))|0);
 $458 = tempRet0;
 $459 = $13;
 $460 = $459;
 HEAP32[$460>>2] = $457;
 $461 = (($459) + 4)|0;
 $462 = $461;
 HEAP32[$462>>2] = $458;
 $463 = $24;
 $464 = $463;
 $465 = HEAP32[$464>>2]|0;
 $466 = (($463) + 4)|0;
 $467 = $466;
 $468 = HEAP32[$467>>2]|0;
 $469 = (___muldi3(($465|0),($468|0),654183,0)|0);
 $470 = tempRet0;
 $471 = $14;
 $472 = $471;
 $473 = HEAP32[$472>>2]|0;
 $474 = (($471) + 4)|0;
 $475 = $474;
 $476 = HEAP32[$475>>2]|0;
 $477 = (_i64Add(($473|0),($476|0),($469|0),($470|0))|0);
 $478 = tempRet0;
 $479 = $14;
 $480 = $479;
 HEAP32[$480>>2] = $477;
 $481 = (($479) + 4)|0;
 $482 = $481;
 HEAP32[$482>>2] = $478;
 $483 = $24;
 $484 = $483;
 $485 = HEAP32[$484>>2]|0;
 $486 = (($483) + 4)|0;
 $487 = $486;
 $488 = HEAP32[$487>>2]|0;
 $489 = (___muldi3(($485|0),($488|0),997805,0)|0);
 $490 = tempRet0;
 $491 = $15;
 $492 = $491;
 $493 = HEAP32[$492>>2]|0;
 $494 = (($491) + 4)|0;
 $495 = $494;
 $496 = HEAP32[$495>>2]|0;
 $497 = (_i64Subtract(($493|0),($496|0),($489|0),($490|0))|0);
 $498 = tempRet0;
 $499 = $15;
 $500 = $499;
 HEAP32[$500>>2] = $497;
 $501 = (($499) + 4)|0;
 $502 = $501;
 HEAP32[$502>>2] = $498;
 $503 = $24;
 $504 = $503;
 $505 = HEAP32[$504>>2]|0;
 $506 = (($503) + 4)|0;
 $507 = $506;
 $508 = HEAP32[$507>>2]|0;
 $509 = (___muldi3(($505|0),($508|0),136657,0)|0);
 $510 = tempRet0;
 $511 = $16;
 $512 = $511;
 $513 = HEAP32[$512>>2]|0;
 $514 = (($511) + 4)|0;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (_i64Add(($513|0),($516|0),($509|0),($510|0))|0);
 $518 = tempRet0;
 $519 = $16;
 $520 = $519;
 HEAP32[$520>>2] = $517;
 $521 = (($519) + 4)|0;
 $522 = $521;
 HEAP32[$522>>2] = $518;
 $523 = $24;
 $524 = $523;
 $525 = HEAP32[$524>>2]|0;
 $526 = (($523) + 4)|0;
 $527 = $526;
 $528 = HEAP32[$527>>2]|0;
 $529 = (___muldi3(($525|0),($528|0),683901,0)|0);
 $530 = tempRet0;
 $531 = $17;
 $532 = $531;
 $533 = HEAP32[$532>>2]|0;
 $534 = (($531) + 4)|0;
 $535 = $534;
 $536 = HEAP32[$535>>2]|0;
 $537 = (_i64Subtract(($533|0),($536|0),($529|0),($530|0))|0);
 $538 = tempRet0;
 $539 = $17;
 $540 = $539;
 HEAP32[$540>>2] = $537;
 $541 = (($539) + 4)|0;
 $542 = $541;
 HEAP32[$542>>2] = $538;
 $543 = $24;
 $544 = $543;
 HEAP32[$544>>2] = 0;
 $545 = (($543) + 4)|0;
 $546 = $545;
 HEAP32[$546>>2] = 0;
 $547 = $23;
 $548 = $547;
 $549 = HEAP32[$548>>2]|0;
 $550 = (($547) + 4)|0;
 $551 = $550;
 $552 = HEAP32[$551>>2]|0;
 $553 = (___muldi3(($549|0),($552|0),666643,0)|0);
 $554 = tempRet0;
 $555 = $11;
 $556 = $555;
 $557 = HEAP32[$556>>2]|0;
 $558 = (($555) + 4)|0;
 $559 = $558;
 $560 = HEAP32[$559>>2]|0;
 $561 = (_i64Add(($557|0),($560|0),($553|0),($554|0))|0);
 $562 = tempRet0;
 $563 = $11;
 $564 = $563;
 HEAP32[$564>>2] = $561;
 $565 = (($563) + 4)|0;
 $566 = $565;
 HEAP32[$566>>2] = $562;
 $567 = $23;
 $568 = $567;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($567) + 4)|0;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (___muldi3(($569|0),($572|0),470296,0)|0);
 $574 = tempRet0;
 $575 = $12;
 $576 = $575;
 $577 = HEAP32[$576>>2]|0;
 $578 = (($575) + 4)|0;
 $579 = $578;
 $580 = HEAP32[$579>>2]|0;
 $581 = (_i64Add(($577|0),($580|0),($573|0),($574|0))|0);
 $582 = tempRet0;
 $583 = $12;
 $584 = $583;
 HEAP32[$584>>2] = $581;
 $585 = (($583) + 4)|0;
 $586 = $585;
 HEAP32[$586>>2] = $582;
 $587 = $23;
 $588 = $587;
 $589 = HEAP32[$588>>2]|0;
 $590 = (($587) + 4)|0;
 $591 = $590;
 $592 = HEAP32[$591>>2]|0;
 $593 = (___muldi3(($589|0),($592|0),654183,0)|0);
 $594 = tempRet0;
 $595 = $13;
 $596 = $595;
 $597 = HEAP32[$596>>2]|0;
 $598 = (($595) + 4)|0;
 $599 = $598;
 $600 = HEAP32[$599>>2]|0;
 $601 = (_i64Add(($597|0),($600|0),($593|0),($594|0))|0);
 $602 = tempRet0;
 $603 = $13;
 $604 = $603;
 HEAP32[$604>>2] = $601;
 $605 = (($603) + 4)|0;
 $606 = $605;
 HEAP32[$606>>2] = $602;
 $607 = $23;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = (($607) + 4)|0;
 $611 = $610;
 $612 = HEAP32[$611>>2]|0;
 $613 = (___muldi3(($609|0),($612|0),997805,0)|0);
 $614 = tempRet0;
 $615 = $14;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = (($615) + 4)|0;
 $619 = $618;
 $620 = HEAP32[$619>>2]|0;
 $621 = (_i64Subtract(($617|0),($620|0),($613|0),($614|0))|0);
 $622 = tempRet0;
 $623 = $14;
 $624 = $623;
 HEAP32[$624>>2] = $621;
 $625 = (($623) + 4)|0;
 $626 = $625;
 HEAP32[$626>>2] = $622;
 $627 = $23;
 $628 = $627;
 $629 = HEAP32[$628>>2]|0;
 $630 = (($627) + 4)|0;
 $631 = $630;
 $632 = HEAP32[$631>>2]|0;
 $633 = (___muldi3(($629|0),($632|0),136657,0)|0);
 $634 = tempRet0;
 $635 = $15;
 $636 = $635;
 $637 = HEAP32[$636>>2]|0;
 $638 = (($635) + 4)|0;
 $639 = $638;
 $640 = HEAP32[$639>>2]|0;
 $641 = (_i64Add(($637|0),($640|0),($633|0),($634|0))|0);
 $642 = tempRet0;
 $643 = $15;
 $644 = $643;
 HEAP32[$644>>2] = $641;
 $645 = (($643) + 4)|0;
 $646 = $645;
 HEAP32[$646>>2] = $642;
 $647 = $23;
 $648 = $647;
 $649 = HEAP32[$648>>2]|0;
 $650 = (($647) + 4)|0;
 $651 = $650;
 $652 = HEAP32[$651>>2]|0;
 $653 = (___muldi3(($649|0),($652|0),683901,0)|0);
 $654 = tempRet0;
 $655 = $16;
 $656 = $655;
 $657 = HEAP32[$656>>2]|0;
 $658 = (($655) + 4)|0;
 $659 = $658;
 $660 = HEAP32[$659>>2]|0;
 $661 = (_i64Subtract(($657|0),($660|0),($653|0),($654|0))|0);
 $662 = tempRet0;
 $663 = $16;
 $664 = $663;
 HEAP32[$664>>2] = $661;
 $665 = (($663) + 4)|0;
 $666 = $665;
 HEAP32[$666>>2] = $662;
 $667 = $23;
 $668 = $667;
 HEAP32[$668>>2] = 0;
 $669 = (($667) + 4)|0;
 $670 = $669;
 HEAP32[$670>>2] = 0;
 $671 = $22;
 $672 = $671;
 $673 = HEAP32[$672>>2]|0;
 $674 = (($671) + 4)|0;
 $675 = $674;
 $676 = HEAP32[$675>>2]|0;
 $677 = (___muldi3(($673|0),($676|0),666643,0)|0);
 $678 = tempRet0;
 $679 = $10;
 $680 = $679;
 $681 = HEAP32[$680>>2]|0;
 $682 = (($679) + 4)|0;
 $683 = $682;
 $684 = HEAP32[$683>>2]|0;
 $685 = (_i64Add(($681|0),($684|0),($677|0),($678|0))|0);
 $686 = tempRet0;
 $687 = $10;
 $688 = $687;
 HEAP32[$688>>2] = $685;
 $689 = (($687) + 4)|0;
 $690 = $689;
 HEAP32[$690>>2] = $686;
 $691 = $22;
 $692 = $691;
 $693 = HEAP32[$692>>2]|0;
 $694 = (($691) + 4)|0;
 $695 = $694;
 $696 = HEAP32[$695>>2]|0;
 $697 = (___muldi3(($693|0),($696|0),470296,0)|0);
 $698 = tempRet0;
 $699 = $11;
 $700 = $699;
 $701 = HEAP32[$700>>2]|0;
 $702 = (($699) + 4)|0;
 $703 = $702;
 $704 = HEAP32[$703>>2]|0;
 $705 = (_i64Add(($701|0),($704|0),($697|0),($698|0))|0);
 $706 = tempRet0;
 $707 = $11;
 $708 = $707;
 HEAP32[$708>>2] = $705;
 $709 = (($707) + 4)|0;
 $710 = $709;
 HEAP32[$710>>2] = $706;
 $711 = $22;
 $712 = $711;
 $713 = HEAP32[$712>>2]|0;
 $714 = (($711) + 4)|0;
 $715 = $714;
 $716 = HEAP32[$715>>2]|0;
 $717 = (___muldi3(($713|0),($716|0),654183,0)|0);
 $718 = tempRet0;
 $719 = $12;
 $720 = $719;
 $721 = HEAP32[$720>>2]|0;
 $722 = (($719) + 4)|0;
 $723 = $722;
 $724 = HEAP32[$723>>2]|0;
 $725 = (_i64Add(($721|0),($724|0),($717|0),($718|0))|0);
 $726 = tempRet0;
 $727 = $12;
 $728 = $727;
 HEAP32[$728>>2] = $725;
 $729 = (($727) + 4)|0;
 $730 = $729;
 HEAP32[$730>>2] = $726;
 $731 = $22;
 $732 = $731;
 $733 = HEAP32[$732>>2]|0;
 $734 = (($731) + 4)|0;
 $735 = $734;
 $736 = HEAP32[$735>>2]|0;
 $737 = (___muldi3(($733|0),($736|0),997805,0)|0);
 $738 = tempRet0;
 $739 = $13;
 $740 = $739;
 $741 = HEAP32[$740>>2]|0;
 $742 = (($739) + 4)|0;
 $743 = $742;
 $744 = HEAP32[$743>>2]|0;
 $745 = (_i64Subtract(($741|0),($744|0),($737|0),($738|0))|0);
 $746 = tempRet0;
 $747 = $13;
 $748 = $747;
 HEAP32[$748>>2] = $745;
 $749 = (($747) + 4)|0;
 $750 = $749;
 HEAP32[$750>>2] = $746;
 $751 = $22;
 $752 = $751;
 $753 = HEAP32[$752>>2]|0;
 $754 = (($751) + 4)|0;
 $755 = $754;
 $756 = HEAP32[$755>>2]|0;
 $757 = (___muldi3(($753|0),($756|0),136657,0)|0);
 $758 = tempRet0;
 $759 = $14;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = (($759) + 4)|0;
 $763 = $762;
 $764 = HEAP32[$763>>2]|0;
 $765 = (_i64Add(($761|0),($764|0),($757|0),($758|0))|0);
 $766 = tempRet0;
 $767 = $14;
 $768 = $767;
 HEAP32[$768>>2] = $765;
 $769 = (($767) + 4)|0;
 $770 = $769;
 HEAP32[$770>>2] = $766;
 $771 = $22;
 $772 = $771;
 $773 = HEAP32[$772>>2]|0;
 $774 = (($771) + 4)|0;
 $775 = $774;
 $776 = HEAP32[$775>>2]|0;
 $777 = (___muldi3(($773|0),($776|0),683901,0)|0);
 $778 = tempRet0;
 $779 = $15;
 $780 = $779;
 $781 = HEAP32[$780>>2]|0;
 $782 = (($779) + 4)|0;
 $783 = $782;
 $784 = HEAP32[$783>>2]|0;
 $785 = (_i64Subtract(($781|0),($784|0),($777|0),($778|0))|0);
 $786 = tempRet0;
 $787 = $15;
 $788 = $787;
 HEAP32[$788>>2] = $785;
 $789 = (($787) + 4)|0;
 $790 = $789;
 HEAP32[$790>>2] = $786;
 $791 = $22;
 $792 = $791;
 HEAP32[$792>>2] = 0;
 $793 = (($791) + 4)|0;
 $794 = $793;
 HEAP32[$794>>2] = 0;
 $795 = $21;
 $796 = $795;
 $797 = HEAP32[$796>>2]|0;
 $798 = (($795) + 4)|0;
 $799 = $798;
 $800 = HEAP32[$799>>2]|0;
 $801 = (___muldi3(($797|0),($800|0),666643,0)|0);
 $802 = tempRet0;
 $803 = $9;
 $804 = $803;
 $805 = HEAP32[$804>>2]|0;
 $806 = (($803) + 4)|0;
 $807 = $806;
 $808 = HEAP32[$807>>2]|0;
 $809 = (_i64Add(($805|0),($808|0),($801|0),($802|0))|0);
 $810 = tempRet0;
 $811 = $9;
 $812 = $811;
 HEAP32[$812>>2] = $809;
 $813 = (($811) + 4)|0;
 $814 = $813;
 HEAP32[$814>>2] = $810;
 $815 = $21;
 $816 = $815;
 $817 = HEAP32[$816>>2]|0;
 $818 = (($815) + 4)|0;
 $819 = $818;
 $820 = HEAP32[$819>>2]|0;
 $821 = (___muldi3(($817|0),($820|0),470296,0)|0);
 $822 = tempRet0;
 $823 = $10;
 $824 = $823;
 $825 = HEAP32[$824>>2]|0;
 $826 = (($823) + 4)|0;
 $827 = $826;
 $828 = HEAP32[$827>>2]|0;
 $829 = (_i64Add(($825|0),($828|0),($821|0),($822|0))|0);
 $830 = tempRet0;
 $831 = $10;
 $832 = $831;
 HEAP32[$832>>2] = $829;
 $833 = (($831) + 4)|0;
 $834 = $833;
 HEAP32[$834>>2] = $830;
 $835 = $21;
 $836 = $835;
 $837 = HEAP32[$836>>2]|0;
 $838 = (($835) + 4)|0;
 $839 = $838;
 $840 = HEAP32[$839>>2]|0;
 $841 = (___muldi3(($837|0),($840|0),654183,0)|0);
 $842 = tempRet0;
 $843 = $11;
 $844 = $843;
 $845 = HEAP32[$844>>2]|0;
 $846 = (($843) + 4)|0;
 $847 = $846;
 $848 = HEAP32[$847>>2]|0;
 $849 = (_i64Add(($845|0),($848|0),($841|0),($842|0))|0);
 $850 = tempRet0;
 $851 = $11;
 $852 = $851;
 HEAP32[$852>>2] = $849;
 $853 = (($851) + 4)|0;
 $854 = $853;
 HEAP32[$854>>2] = $850;
 $855 = $21;
 $856 = $855;
 $857 = HEAP32[$856>>2]|0;
 $858 = (($855) + 4)|0;
 $859 = $858;
 $860 = HEAP32[$859>>2]|0;
 $861 = (___muldi3(($857|0),($860|0),997805,0)|0);
 $862 = tempRet0;
 $863 = $12;
 $864 = $863;
 $865 = HEAP32[$864>>2]|0;
 $866 = (($863) + 4)|0;
 $867 = $866;
 $868 = HEAP32[$867>>2]|0;
 $869 = (_i64Subtract(($865|0),($868|0),($861|0),($862|0))|0);
 $870 = tempRet0;
 $871 = $12;
 $872 = $871;
 HEAP32[$872>>2] = $869;
 $873 = (($871) + 4)|0;
 $874 = $873;
 HEAP32[$874>>2] = $870;
 $875 = $21;
 $876 = $875;
 $877 = HEAP32[$876>>2]|0;
 $878 = (($875) + 4)|0;
 $879 = $878;
 $880 = HEAP32[$879>>2]|0;
 $881 = (___muldi3(($877|0),($880|0),136657,0)|0);
 $882 = tempRet0;
 $883 = $13;
 $884 = $883;
 $885 = HEAP32[$884>>2]|0;
 $886 = (($883) + 4)|0;
 $887 = $886;
 $888 = HEAP32[$887>>2]|0;
 $889 = (_i64Add(($885|0),($888|0),($881|0),($882|0))|0);
 $890 = tempRet0;
 $891 = $13;
 $892 = $891;
 HEAP32[$892>>2] = $889;
 $893 = (($891) + 4)|0;
 $894 = $893;
 HEAP32[$894>>2] = $890;
 $895 = $21;
 $896 = $895;
 $897 = HEAP32[$896>>2]|0;
 $898 = (($895) + 4)|0;
 $899 = $898;
 $900 = HEAP32[$899>>2]|0;
 $901 = (___muldi3(($897|0),($900|0),683901,0)|0);
 $902 = tempRet0;
 $903 = $14;
 $904 = $903;
 $905 = HEAP32[$904>>2]|0;
 $906 = (($903) + 4)|0;
 $907 = $906;
 $908 = HEAP32[$907>>2]|0;
 $909 = (_i64Subtract(($905|0),($908|0),($901|0),($902|0))|0);
 $910 = tempRet0;
 $911 = $14;
 $912 = $911;
 HEAP32[$912>>2] = $909;
 $913 = (($911) + 4)|0;
 $914 = $913;
 HEAP32[$914>>2] = $910;
 $915 = $21;
 $916 = $915;
 HEAP32[$916>>2] = 0;
 $917 = (($915) + 4)|0;
 $918 = $917;
 HEAP32[$918>>2] = 0;
 $919 = $20;
 $920 = $919;
 $921 = HEAP32[$920>>2]|0;
 $922 = (($919) + 4)|0;
 $923 = $922;
 $924 = HEAP32[$923>>2]|0;
 $925 = (___muldi3(($921|0),($924|0),666643,0)|0);
 $926 = tempRet0;
 $927 = $8;
 $928 = $927;
 $929 = HEAP32[$928>>2]|0;
 $930 = (($927) + 4)|0;
 $931 = $930;
 $932 = HEAP32[$931>>2]|0;
 $933 = (_i64Add(($929|0),($932|0),($925|0),($926|0))|0);
 $934 = tempRet0;
 $935 = $8;
 $936 = $935;
 HEAP32[$936>>2] = $933;
 $937 = (($935) + 4)|0;
 $938 = $937;
 HEAP32[$938>>2] = $934;
 $939 = $20;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (___muldi3(($941|0),($944|0),470296,0)|0);
 $946 = tempRet0;
 $947 = $9;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($949|0),($952|0),($945|0),($946|0))|0);
 $954 = tempRet0;
 $955 = $9;
 $956 = $955;
 HEAP32[$956>>2] = $953;
 $957 = (($955) + 4)|0;
 $958 = $957;
 HEAP32[$958>>2] = $954;
 $959 = $20;
 $960 = $959;
 $961 = HEAP32[$960>>2]|0;
 $962 = (($959) + 4)|0;
 $963 = $962;
 $964 = HEAP32[$963>>2]|0;
 $965 = (___muldi3(($961|0),($964|0),654183,0)|0);
 $966 = tempRet0;
 $967 = $10;
 $968 = $967;
 $969 = HEAP32[$968>>2]|0;
 $970 = (($967) + 4)|0;
 $971 = $970;
 $972 = HEAP32[$971>>2]|0;
 $973 = (_i64Add(($969|0),($972|0),($965|0),($966|0))|0);
 $974 = tempRet0;
 $975 = $10;
 $976 = $975;
 HEAP32[$976>>2] = $973;
 $977 = (($975) + 4)|0;
 $978 = $977;
 HEAP32[$978>>2] = $974;
 $979 = $20;
 $980 = $979;
 $981 = HEAP32[$980>>2]|0;
 $982 = (($979) + 4)|0;
 $983 = $982;
 $984 = HEAP32[$983>>2]|0;
 $985 = (___muldi3(($981|0),($984|0),997805,0)|0);
 $986 = tempRet0;
 $987 = $11;
 $988 = $987;
 $989 = HEAP32[$988>>2]|0;
 $990 = (($987) + 4)|0;
 $991 = $990;
 $992 = HEAP32[$991>>2]|0;
 $993 = (_i64Subtract(($989|0),($992|0),($985|0),($986|0))|0);
 $994 = tempRet0;
 $995 = $11;
 $996 = $995;
 HEAP32[$996>>2] = $993;
 $997 = (($995) + 4)|0;
 $998 = $997;
 HEAP32[$998>>2] = $994;
 $999 = $20;
 $1000 = $999;
 $1001 = HEAP32[$1000>>2]|0;
 $1002 = (($999) + 4)|0;
 $1003 = $1002;
 $1004 = HEAP32[$1003>>2]|0;
 $1005 = (___muldi3(($1001|0),($1004|0),136657,0)|0);
 $1006 = tempRet0;
 $1007 = $12;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (_i64Add(($1009|0),($1012|0),($1005|0),($1006|0))|0);
 $1014 = tempRet0;
 $1015 = $12;
 $1016 = $1015;
 HEAP32[$1016>>2] = $1013;
 $1017 = (($1015) + 4)|0;
 $1018 = $1017;
 HEAP32[$1018>>2] = $1014;
 $1019 = $20;
 $1020 = $1019;
 $1021 = HEAP32[$1020>>2]|0;
 $1022 = (($1019) + 4)|0;
 $1023 = $1022;
 $1024 = HEAP32[$1023>>2]|0;
 $1025 = (___muldi3(($1021|0),($1024|0),683901,0)|0);
 $1026 = tempRet0;
 $1027 = $13;
 $1028 = $1027;
 $1029 = HEAP32[$1028>>2]|0;
 $1030 = (($1027) + 4)|0;
 $1031 = $1030;
 $1032 = HEAP32[$1031>>2]|0;
 $1033 = (_i64Subtract(($1029|0),($1032|0),($1025|0),($1026|0))|0);
 $1034 = tempRet0;
 $1035 = $13;
 $1036 = $1035;
 HEAP32[$1036>>2] = $1033;
 $1037 = (($1035) + 4)|0;
 $1038 = $1037;
 HEAP32[$1038>>2] = $1034;
 $1039 = $20;
 $1040 = $1039;
 HEAP32[$1040>>2] = 0;
 $1041 = (($1039) + 4)|0;
 $1042 = $1041;
 HEAP32[$1042>>2] = 0;
 $1043 = $8;
 $1044 = $1043;
 $1045 = HEAP32[$1044>>2]|0;
 $1046 = (($1043) + 4)|0;
 $1047 = $1046;
 $1048 = HEAP32[$1047>>2]|0;
 $1049 = (_i64Add(($1045|0),($1048|0),1048576,0)|0);
 $1050 = tempRet0;
 $1051 = (_bitshift64Ashr(($1049|0),($1050|0),21)|0);
 $1052 = tempRet0;
 $1053 = $32;
 $1054 = $1053;
 HEAP32[$1054>>2] = $1051;
 $1055 = (($1053) + 4)|0;
 $1056 = $1055;
 HEAP32[$1056>>2] = $1052;
 $1057 = $32;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($1057) + 4)|0;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = $9;
 $1064 = $1063;
 $1065 = HEAP32[$1064>>2]|0;
 $1066 = (($1063) + 4)|0;
 $1067 = $1066;
 $1068 = HEAP32[$1067>>2]|0;
 $1069 = (_i64Add(($1065|0),($1068|0),($1059|0),($1062|0))|0);
 $1070 = tempRet0;
 $1071 = $9;
 $1072 = $1071;
 HEAP32[$1072>>2] = $1069;
 $1073 = (($1071) + 4)|0;
 $1074 = $1073;
 HEAP32[$1074>>2] = $1070;
 $1075 = $32;
 $1076 = $1075;
 $1077 = HEAP32[$1076>>2]|0;
 $1078 = (($1075) + 4)|0;
 $1079 = $1078;
 $1080 = HEAP32[$1079>>2]|0;
 $1081 = (_bitshift64Shl(($1077|0),($1080|0),21)|0);
 $1082 = tempRet0;
 $1083 = $8;
 $1084 = $1083;
 $1085 = HEAP32[$1084>>2]|0;
 $1086 = (($1083) + 4)|0;
 $1087 = $1086;
 $1088 = HEAP32[$1087>>2]|0;
 $1089 = (_i64Subtract(($1085|0),($1088|0),($1081|0),($1082|0))|0);
 $1090 = tempRet0;
 $1091 = $8;
 $1092 = $1091;
 HEAP32[$1092>>2] = $1089;
 $1093 = (($1091) + 4)|0;
 $1094 = $1093;
 HEAP32[$1094>>2] = $1090;
 $1095 = $10;
 $1096 = $1095;
 $1097 = HEAP32[$1096>>2]|0;
 $1098 = (($1095) + 4)|0;
 $1099 = $1098;
 $1100 = HEAP32[$1099>>2]|0;
 $1101 = (_i64Add(($1097|0),($1100|0),1048576,0)|0);
 $1102 = tempRet0;
 $1103 = (_bitshift64Ashr(($1101|0),($1102|0),21)|0);
 $1104 = tempRet0;
 $1105 = $34;
 $1106 = $1105;
 HEAP32[$1106>>2] = $1103;
 $1107 = (($1105) + 4)|0;
 $1108 = $1107;
 HEAP32[$1108>>2] = $1104;
 $1109 = $34;
 $1110 = $1109;
 $1111 = HEAP32[$1110>>2]|0;
 $1112 = (($1109) + 4)|0;
 $1113 = $1112;
 $1114 = HEAP32[$1113>>2]|0;
 $1115 = $11;
 $1116 = $1115;
 $1117 = HEAP32[$1116>>2]|0;
 $1118 = (($1115) + 4)|0;
 $1119 = $1118;
 $1120 = HEAP32[$1119>>2]|0;
 $1121 = (_i64Add(($1117|0),($1120|0),($1111|0),($1114|0))|0);
 $1122 = tempRet0;
 $1123 = $11;
 $1124 = $1123;
 HEAP32[$1124>>2] = $1121;
 $1125 = (($1123) + 4)|0;
 $1126 = $1125;
 HEAP32[$1126>>2] = $1122;
 $1127 = $34;
 $1128 = $1127;
 $1129 = HEAP32[$1128>>2]|0;
 $1130 = (($1127) + 4)|0;
 $1131 = $1130;
 $1132 = HEAP32[$1131>>2]|0;
 $1133 = (_bitshift64Shl(($1129|0),($1132|0),21)|0);
 $1134 = tempRet0;
 $1135 = $10;
 $1136 = $1135;
 $1137 = HEAP32[$1136>>2]|0;
 $1138 = (($1135) + 4)|0;
 $1139 = $1138;
 $1140 = HEAP32[$1139>>2]|0;
 $1141 = (_i64Subtract(($1137|0),($1140|0),($1133|0),($1134|0))|0);
 $1142 = tempRet0;
 $1143 = $10;
 $1144 = $1143;
 HEAP32[$1144>>2] = $1141;
 $1145 = (($1143) + 4)|0;
 $1146 = $1145;
 HEAP32[$1146>>2] = $1142;
 $1147 = $12;
 $1148 = $1147;
 $1149 = HEAP32[$1148>>2]|0;
 $1150 = (($1147) + 4)|0;
 $1151 = $1150;
 $1152 = HEAP32[$1151>>2]|0;
 $1153 = (_i64Add(($1149|0),($1152|0),1048576,0)|0);
 $1154 = tempRet0;
 $1155 = (_bitshift64Ashr(($1153|0),($1154|0),21)|0);
 $1156 = tempRet0;
 $1157 = $36;
 $1158 = $1157;
 HEAP32[$1158>>2] = $1155;
 $1159 = (($1157) + 4)|0;
 $1160 = $1159;
 HEAP32[$1160>>2] = $1156;
 $1161 = $36;
 $1162 = $1161;
 $1163 = HEAP32[$1162>>2]|0;
 $1164 = (($1161) + 4)|0;
 $1165 = $1164;
 $1166 = HEAP32[$1165>>2]|0;
 $1167 = $13;
 $1168 = $1167;
 $1169 = HEAP32[$1168>>2]|0;
 $1170 = (($1167) + 4)|0;
 $1171 = $1170;
 $1172 = HEAP32[$1171>>2]|0;
 $1173 = (_i64Add(($1169|0),($1172|0),($1163|0),($1166|0))|0);
 $1174 = tempRet0;
 $1175 = $13;
 $1176 = $1175;
 HEAP32[$1176>>2] = $1173;
 $1177 = (($1175) + 4)|0;
 $1178 = $1177;
 HEAP32[$1178>>2] = $1174;
 $1179 = $36;
 $1180 = $1179;
 $1181 = HEAP32[$1180>>2]|0;
 $1182 = (($1179) + 4)|0;
 $1183 = $1182;
 $1184 = HEAP32[$1183>>2]|0;
 $1185 = (_bitshift64Shl(($1181|0),($1184|0),21)|0);
 $1186 = tempRet0;
 $1187 = $12;
 $1188 = $1187;
 $1189 = HEAP32[$1188>>2]|0;
 $1190 = (($1187) + 4)|0;
 $1191 = $1190;
 $1192 = HEAP32[$1191>>2]|0;
 $1193 = (_i64Subtract(($1189|0),($1192|0),($1185|0),($1186|0))|0);
 $1194 = tempRet0;
 $1195 = $12;
 $1196 = $1195;
 HEAP32[$1196>>2] = $1193;
 $1197 = (($1195) + 4)|0;
 $1198 = $1197;
 HEAP32[$1198>>2] = $1194;
 $1199 = $14;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1201|0),($1204|0),1048576,0)|0);
 $1206 = tempRet0;
 $1207 = (_bitshift64Ashr(($1205|0),($1206|0),21)|0);
 $1208 = tempRet0;
 $1209 = $38;
 $1210 = $1209;
 HEAP32[$1210>>2] = $1207;
 $1211 = (($1209) + 4)|0;
 $1212 = $1211;
 HEAP32[$1212>>2] = $1208;
 $1213 = $38;
 $1214 = $1213;
 $1215 = HEAP32[$1214>>2]|0;
 $1216 = (($1213) + 4)|0;
 $1217 = $1216;
 $1218 = HEAP32[$1217>>2]|0;
 $1219 = $15;
 $1220 = $1219;
 $1221 = HEAP32[$1220>>2]|0;
 $1222 = (($1219) + 4)|0;
 $1223 = $1222;
 $1224 = HEAP32[$1223>>2]|0;
 $1225 = (_i64Add(($1221|0),($1224|0),($1215|0),($1218|0))|0);
 $1226 = tempRet0;
 $1227 = $15;
 $1228 = $1227;
 HEAP32[$1228>>2] = $1225;
 $1229 = (($1227) + 4)|0;
 $1230 = $1229;
 HEAP32[$1230>>2] = $1226;
 $1231 = $38;
 $1232 = $1231;
 $1233 = HEAP32[$1232>>2]|0;
 $1234 = (($1231) + 4)|0;
 $1235 = $1234;
 $1236 = HEAP32[$1235>>2]|0;
 $1237 = (_bitshift64Shl(($1233|0),($1236|0),21)|0);
 $1238 = tempRet0;
 $1239 = $14;
 $1240 = $1239;
 $1241 = HEAP32[$1240>>2]|0;
 $1242 = (($1239) + 4)|0;
 $1243 = $1242;
 $1244 = HEAP32[$1243>>2]|0;
 $1245 = (_i64Subtract(($1241|0),($1244|0),($1237|0),($1238|0))|0);
 $1246 = tempRet0;
 $1247 = $14;
 $1248 = $1247;
 HEAP32[$1248>>2] = $1245;
 $1249 = (($1247) + 4)|0;
 $1250 = $1249;
 HEAP32[$1250>>2] = $1246;
 $1251 = $16;
 $1252 = $1251;
 $1253 = HEAP32[$1252>>2]|0;
 $1254 = (($1251) + 4)|0;
 $1255 = $1254;
 $1256 = HEAP32[$1255>>2]|0;
 $1257 = (_i64Add(($1253|0),($1256|0),1048576,0)|0);
 $1258 = tempRet0;
 $1259 = (_bitshift64Ashr(($1257|0),($1258|0),21)|0);
 $1260 = tempRet0;
 $1261 = $40;
 $1262 = $1261;
 HEAP32[$1262>>2] = $1259;
 $1263 = (($1261) + 4)|0;
 $1264 = $1263;
 HEAP32[$1264>>2] = $1260;
 $1265 = $40;
 $1266 = $1265;
 $1267 = HEAP32[$1266>>2]|0;
 $1268 = (($1265) + 4)|0;
 $1269 = $1268;
 $1270 = HEAP32[$1269>>2]|0;
 $1271 = $17;
 $1272 = $1271;
 $1273 = HEAP32[$1272>>2]|0;
 $1274 = (($1271) + 4)|0;
 $1275 = $1274;
 $1276 = HEAP32[$1275>>2]|0;
 $1277 = (_i64Add(($1273|0),($1276|0),($1267|0),($1270|0))|0);
 $1278 = tempRet0;
 $1279 = $17;
 $1280 = $1279;
 HEAP32[$1280>>2] = $1277;
 $1281 = (($1279) + 4)|0;
 $1282 = $1281;
 HEAP32[$1282>>2] = $1278;
 $1283 = $40;
 $1284 = $1283;
 $1285 = HEAP32[$1284>>2]|0;
 $1286 = (($1283) + 4)|0;
 $1287 = $1286;
 $1288 = HEAP32[$1287>>2]|0;
 $1289 = (_bitshift64Shl(($1285|0),($1288|0),21)|0);
 $1290 = tempRet0;
 $1291 = $16;
 $1292 = $1291;
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + 4)|0;
 $1295 = $1294;
 $1296 = HEAP32[$1295>>2]|0;
 $1297 = (_i64Subtract(($1293|0),($1296|0),($1289|0),($1290|0))|0);
 $1298 = tempRet0;
 $1299 = $16;
 $1300 = $1299;
 HEAP32[$1300>>2] = $1297;
 $1301 = (($1299) + 4)|0;
 $1302 = $1301;
 HEAP32[$1302>>2] = $1298;
 $1303 = $18;
 $1304 = $1303;
 $1305 = HEAP32[$1304>>2]|0;
 $1306 = (($1303) + 4)|0;
 $1307 = $1306;
 $1308 = HEAP32[$1307>>2]|0;
 $1309 = (_i64Add(($1305|0),($1308|0),1048576,0)|0);
 $1310 = tempRet0;
 $1311 = (_bitshift64Ashr(($1309|0),($1310|0),21)|0);
 $1312 = tempRet0;
 $1313 = $42;
 $1314 = $1313;
 HEAP32[$1314>>2] = $1311;
 $1315 = (($1313) + 4)|0;
 $1316 = $1315;
 HEAP32[$1316>>2] = $1312;
 $1317 = $42;
 $1318 = $1317;
 $1319 = HEAP32[$1318>>2]|0;
 $1320 = (($1317) + 4)|0;
 $1321 = $1320;
 $1322 = HEAP32[$1321>>2]|0;
 $1323 = $19;
 $1324 = $1323;
 $1325 = HEAP32[$1324>>2]|0;
 $1326 = (($1323) + 4)|0;
 $1327 = $1326;
 $1328 = HEAP32[$1327>>2]|0;
 $1329 = (_i64Add(($1325|0),($1328|0),($1319|0),($1322|0))|0);
 $1330 = tempRet0;
 $1331 = $19;
 $1332 = $1331;
 HEAP32[$1332>>2] = $1329;
 $1333 = (($1331) + 4)|0;
 $1334 = $1333;
 HEAP32[$1334>>2] = $1330;
 $1335 = $42;
 $1336 = $1335;
 $1337 = HEAP32[$1336>>2]|0;
 $1338 = (($1335) + 4)|0;
 $1339 = $1338;
 $1340 = HEAP32[$1339>>2]|0;
 $1341 = (_bitshift64Shl(($1337|0),($1340|0),21)|0);
 $1342 = tempRet0;
 $1343 = $18;
 $1344 = $1343;
 $1345 = HEAP32[$1344>>2]|0;
 $1346 = (($1343) + 4)|0;
 $1347 = $1346;
 $1348 = HEAP32[$1347>>2]|0;
 $1349 = (_i64Subtract(($1345|0),($1348|0),($1341|0),($1342|0))|0);
 $1350 = tempRet0;
 $1351 = $18;
 $1352 = $1351;
 HEAP32[$1352>>2] = $1349;
 $1353 = (($1351) + 4)|0;
 $1354 = $1353;
 HEAP32[$1354>>2] = $1350;
 $1355 = $9;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (_i64Add(($1357|0),($1360|0),1048576,0)|0);
 $1362 = tempRet0;
 $1363 = (_bitshift64Ashr(($1361|0),($1362|0),21)|0);
 $1364 = tempRet0;
 $1365 = $33;
 $1366 = $1365;
 HEAP32[$1366>>2] = $1363;
 $1367 = (($1365) + 4)|0;
 $1368 = $1367;
 HEAP32[$1368>>2] = $1364;
 $1369 = $33;
 $1370 = $1369;
 $1371 = HEAP32[$1370>>2]|0;
 $1372 = (($1369) + 4)|0;
 $1373 = $1372;
 $1374 = HEAP32[$1373>>2]|0;
 $1375 = $10;
 $1376 = $1375;
 $1377 = HEAP32[$1376>>2]|0;
 $1378 = (($1375) + 4)|0;
 $1379 = $1378;
 $1380 = HEAP32[$1379>>2]|0;
 $1381 = (_i64Add(($1377|0),($1380|0),($1371|0),($1374|0))|0);
 $1382 = tempRet0;
 $1383 = $10;
 $1384 = $1383;
 HEAP32[$1384>>2] = $1381;
 $1385 = (($1383) + 4)|0;
 $1386 = $1385;
 HEAP32[$1386>>2] = $1382;
 $1387 = $33;
 $1388 = $1387;
 $1389 = HEAP32[$1388>>2]|0;
 $1390 = (($1387) + 4)|0;
 $1391 = $1390;
 $1392 = HEAP32[$1391>>2]|0;
 $1393 = (_bitshift64Shl(($1389|0),($1392|0),21)|0);
 $1394 = tempRet0;
 $1395 = $9;
 $1396 = $1395;
 $1397 = HEAP32[$1396>>2]|0;
 $1398 = (($1395) + 4)|0;
 $1399 = $1398;
 $1400 = HEAP32[$1399>>2]|0;
 $1401 = (_i64Subtract(($1397|0),($1400|0),($1393|0),($1394|0))|0);
 $1402 = tempRet0;
 $1403 = $9;
 $1404 = $1403;
 HEAP32[$1404>>2] = $1401;
 $1405 = (($1403) + 4)|0;
 $1406 = $1405;
 HEAP32[$1406>>2] = $1402;
 $1407 = $11;
 $1408 = $1407;
 $1409 = HEAP32[$1408>>2]|0;
 $1410 = (($1407) + 4)|0;
 $1411 = $1410;
 $1412 = HEAP32[$1411>>2]|0;
 $1413 = (_i64Add(($1409|0),($1412|0),1048576,0)|0);
 $1414 = tempRet0;
 $1415 = (_bitshift64Ashr(($1413|0),($1414|0),21)|0);
 $1416 = tempRet0;
 $1417 = $35;
 $1418 = $1417;
 HEAP32[$1418>>2] = $1415;
 $1419 = (($1417) + 4)|0;
 $1420 = $1419;
 HEAP32[$1420>>2] = $1416;
 $1421 = $35;
 $1422 = $1421;
 $1423 = HEAP32[$1422>>2]|0;
 $1424 = (($1421) + 4)|0;
 $1425 = $1424;
 $1426 = HEAP32[$1425>>2]|0;
 $1427 = $12;
 $1428 = $1427;
 $1429 = HEAP32[$1428>>2]|0;
 $1430 = (($1427) + 4)|0;
 $1431 = $1430;
 $1432 = HEAP32[$1431>>2]|0;
 $1433 = (_i64Add(($1429|0),($1432|0),($1423|0),($1426|0))|0);
 $1434 = tempRet0;
 $1435 = $12;
 $1436 = $1435;
 HEAP32[$1436>>2] = $1433;
 $1437 = (($1435) + 4)|0;
 $1438 = $1437;
 HEAP32[$1438>>2] = $1434;
 $1439 = $35;
 $1440 = $1439;
 $1441 = HEAP32[$1440>>2]|0;
 $1442 = (($1439) + 4)|0;
 $1443 = $1442;
 $1444 = HEAP32[$1443>>2]|0;
 $1445 = (_bitshift64Shl(($1441|0),($1444|0),21)|0);
 $1446 = tempRet0;
 $1447 = $11;
 $1448 = $1447;
 $1449 = HEAP32[$1448>>2]|0;
 $1450 = (($1447) + 4)|0;
 $1451 = $1450;
 $1452 = HEAP32[$1451>>2]|0;
 $1453 = (_i64Subtract(($1449|0),($1452|0),($1445|0),($1446|0))|0);
 $1454 = tempRet0;
 $1455 = $11;
 $1456 = $1455;
 HEAP32[$1456>>2] = $1453;
 $1457 = (($1455) + 4)|0;
 $1458 = $1457;
 HEAP32[$1458>>2] = $1454;
 $1459 = $13;
 $1460 = $1459;
 $1461 = HEAP32[$1460>>2]|0;
 $1462 = (($1459) + 4)|0;
 $1463 = $1462;
 $1464 = HEAP32[$1463>>2]|0;
 $1465 = (_i64Add(($1461|0),($1464|0),1048576,0)|0);
 $1466 = tempRet0;
 $1467 = (_bitshift64Ashr(($1465|0),($1466|0),21)|0);
 $1468 = tempRet0;
 $1469 = $37;
 $1470 = $1469;
 HEAP32[$1470>>2] = $1467;
 $1471 = (($1469) + 4)|0;
 $1472 = $1471;
 HEAP32[$1472>>2] = $1468;
 $1473 = $37;
 $1474 = $1473;
 $1475 = HEAP32[$1474>>2]|0;
 $1476 = (($1473) + 4)|0;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = $14;
 $1480 = $1479;
 $1481 = HEAP32[$1480>>2]|0;
 $1482 = (($1479) + 4)|0;
 $1483 = $1482;
 $1484 = HEAP32[$1483>>2]|0;
 $1485 = (_i64Add(($1481|0),($1484|0),($1475|0),($1478|0))|0);
 $1486 = tempRet0;
 $1487 = $14;
 $1488 = $1487;
 HEAP32[$1488>>2] = $1485;
 $1489 = (($1487) + 4)|0;
 $1490 = $1489;
 HEAP32[$1490>>2] = $1486;
 $1491 = $37;
 $1492 = $1491;
 $1493 = HEAP32[$1492>>2]|0;
 $1494 = (($1491) + 4)|0;
 $1495 = $1494;
 $1496 = HEAP32[$1495>>2]|0;
 $1497 = (_bitshift64Shl(($1493|0),($1496|0),21)|0);
 $1498 = tempRet0;
 $1499 = $13;
 $1500 = $1499;
 $1501 = HEAP32[$1500>>2]|0;
 $1502 = (($1499) + 4)|0;
 $1503 = $1502;
 $1504 = HEAP32[$1503>>2]|0;
 $1505 = (_i64Subtract(($1501|0),($1504|0),($1497|0),($1498|0))|0);
 $1506 = tempRet0;
 $1507 = $13;
 $1508 = $1507;
 HEAP32[$1508>>2] = $1505;
 $1509 = (($1507) + 4)|0;
 $1510 = $1509;
 HEAP32[$1510>>2] = $1506;
 $1511 = $15;
 $1512 = $1511;
 $1513 = HEAP32[$1512>>2]|0;
 $1514 = (($1511) + 4)|0;
 $1515 = $1514;
 $1516 = HEAP32[$1515>>2]|0;
 $1517 = (_i64Add(($1513|0),($1516|0),1048576,0)|0);
 $1518 = tempRet0;
 $1519 = (_bitshift64Ashr(($1517|0),($1518|0),21)|0);
 $1520 = tempRet0;
 $1521 = $39;
 $1522 = $1521;
 HEAP32[$1522>>2] = $1519;
 $1523 = (($1521) + 4)|0;
 $1524 = $1523;
 HEAP32[$1524>>2] = $1520;
 $1525 = $39;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = $16;
 $1532 = $1531;
 $1533 = HEAP32[$1532>>2]|0;
 $1534 = (($1531) + 4)|0;
 $1535 = $1534;
 $1536 = HEAP32[$1535>>2]|0;
 $1537 = (_i64Add(($1533|0),($1536|0),($1527|0),($1530|0))|0);
 $1538 = tempRet0;
 $1539 = $16;
 $1540 = $1539;
 HEAP32[$1540>>2] = $1537;
 $1541 = (($1539) + 4)|0;
 $1542 = $1541;
 HEAP32[$1542>>2] = $1538;
 $1543 = $39;
 $1544 = $1543;
 $1545 = HEAP32[$1544>>2]|0;
 $1546 = (($1543) + 4)|0;
 $1547 = $1546;
 $1548 = HEAP32[$1547>>2]|0;
 $1549 = (_bitshift64Shl(($1545|0),($1548|0),21)|0);
 $1550 = tempRet0;
 $1551 = $15;
 $1552 = $1551;
 $1553 = HEAP32[$1552>>2]|0;
 $1554 = (($1551) + 4)|0;
 $1555 = $1554;
 $1556 = HEAP32[$1555>>2]|0;
 $1557 = (_i64Subtract(($1553|0),($1556|0),($1549|0),($1550|0))|0);
 $1558 = tempRet0;
 $1559 = $15;
 $1560 = $1559;
 HEAP32[$1560>>2] = $1557;
 $1561 = (($1559) + 4)|0;
 $1562 = $1561;
 HEAP32[$1562>>2] = $1558;
 $1563 = $17;
 $1564 = $1563;
 $1565 = HEAP32[$1564>>2]|0;
 $1566 = (($1563) + 4)|0;
 $1567 = $1566;
 $1568 = HEAP32[$1567>>2]|0;
 $1569 = (_i64Add(($1565|0),($1568|0),1048576,0)|0);
 $1570 = tempRet0;
 $1571 = (_bitshift64Ashr(($1569|0),($1570|0),21)|0);
 $1572 = tempRet0;
 $1573 = $41;
 $1574 = $1573;
 HEAP32[$1574>>2] = $1571;
 $1575 = (($1573) + 4)|0;
 $1576 = $1575;
 HEAP32[$1576>>2] = $1572;
 $1577 = $41;
 $1578 = $1577;
 $1579 = HEAP32[$1578>>2]|0;
 $1580 = (($1577) + 4)|0;
 $1581 = $1580;
 $1582 = HEAP32[$1581>>2]|0;
 $1583 = $18;
 $1584 = $1583;
 $1585 = HEAP32[$1584>>2]|0;
 $1586 = (($1583) + 4)|0;
 $1587 = $1586;
 $1588 = HEAP32[$1587>>2]|0;
 $1589 = (_i64Add(($1585|0),($1588|0),($1579|0),($1582|0))|0);
 $1590 = tempRet0;
 $1591 = $18;
 $1592 = $1591;
 HEAP32[$1592>>2] = $1589;
 $1593 = (($1591) + 4)|0;
 $1594 = $1593;
 HEAP32[$1594>>2] = $1590;
 $1595 = $41;
 $1596 = $1595;
 $1597 = HEAP32[$1596>>2]|0;
 $1598 = (($1595) + 4)|0;
 $1599 = $1598;
 $1600 = HEAP32[$1599>>2]|0;
 $1601 = (_bitshift64Shl(($1597|0),($1600|0),21)|0);
 $1602 = tempRet0;
 $1603 = $17;
 $1604 = $1603;
 $1605 = HEAP32[$1604>>2]|0;
 $1606 = (($1603) + 4)|0;
 $1607 = $1606;
 $1608 = HEAP32[$1607>>2]|0;
 $1609 = (_i64Subtract(($1605|0),($1608|0),($1601|0),($1602|0))|0);
 $1610 = tempRet0;
 $1611 = $17;
 $1612 = $1611;
 HEAP32[$1612>>2] = $1609;
 $1613 = (($1611) + 4)|0;
 $1614 = $1613;
 HEAP32[$1614>>2] = $1610;
 $1615 = $19;
 $1616 = $1615;
 $1617 = HEAP32[$1616>>2]|0;
 $1618 = (($1615) + 4)|0;
 $1619 = $1618;
 $1620 = HEAP32[$1619>>2]|0;
 $1621 = (___muldi3(($1617|0),($1620|0),666643,0)|0);
 $1622 = tempRet0;
 $1623 = $7;
 $1624 = $1623;
 $1625 = HEAP32[$1624>>2]|0;
 $1626 = (($1623) + 4)|0;
 $1627 = $1626;
 $1628 = HEAP32[$1627>>2]|0;
 $1629 = (_i64Add(($1625|0),($1628|0),($1621|0),($1622|0))|0);
 $1630 = tempRet0;
 $1631 = $7;
 $1632 = $1631;
 HEAP32[$1632>>2] = $1629;
 $1633 = (($1631) + 4)|0;
 $1634 = $1633;
 HEAP32[$1634>>2] = $1630;
 $1635 = $19;
 $1636 = $1635;
 $1637 = HEAP32[$1636>>2]|0;
 $1638 = (($1635) + 4)|0;
 $1639 = $1638;
 $1640 = HEAP32[$1639>>2]|0;
 $1641 = (___muldi3(($1637|0),($1640|0),470296,0)|0);
 $1642 = tempRet0;
 $1643 = $8;
 $1644 = $1643;
 $1645 = HEAP32[$1644>>2]|0;
 $1646 = (($1643) + 4)|0;
 $1647 = $1646;
 $1648 = HEAP32[$1647>>2]|0;
 $1649 = (_i64Add(($1645|0),($1648|0),($1641|0),($1642|0))|0);
 $1650 = tempRet0;
 $1651 = $8;
 $1652 = $1651;
 HEAP32[$1652>>2] = $1649;
 $1653 = (($1651) + 4)|0;
 $1654 = $1653;
 HEAP32[$1654>>2] = $1650;
 $1655 = $19;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = (___muldi3(($1657|0),($1660|0),654183,0)|0);
 $1662 = tempRet0;
 $1663 = $9;
 $1664 = $1663;
 $1665 = HEAP32[$1664>>2]|0;
 $1666 = (($1663) + 4)|0;
 $1667 = $1666;
 $1668 = HEAP32[$1667>>2]|0;
 $1669 = (_i64Add(($1665|0),($1668|0),($1661|0),($1662|0))|0);
 $1670 = tempRet0;
 $1671 = $9;
 $1672 = $1671;
 HEAP32[$1672>>2] = $1669;
 $1673 = (($1671) + 4)|0;
 $1674 = $1673;
 HEAP32[$1674>>2] = $1670;
 $1675 = $19;
 $1676 = $1675;
 $1677 = HEAP32[$1676>>2]|0;
 $1678 = (($1675) + 4)|0;
 $1679 = $1678;
 $1680 = HEAP32[$1679>>2]|0;
 $1681 = (___muldi3(($1677|0),($1680|0),997805,0)|0);
 $1682 = tempRet0;
 $1683 = $10;
 $1684 = $1683;
 $1685 = HEAP32[$1684>>2]|0;
 $1686 = (($1683) + 4)|0;
 $1687 = $1686;
 $1688 = HEAP32[$1687>>2]|0;
 $1689 = (_i64Subtract(($1685|0),($1688|0),($1681|0),($1682|0))|0);
 $1690 = tempRet0;
 $1691 = $10;
 $1692 = $1691;
 HEAP32[$1692>>2] = $1689;
 $1693 = (($1691) + 4)|0;
 $1694 = $1693;
 HEAP32[$1694>>2] = $1690;
 $1695 = $19;
 $1696 = $1695;
 $1697 = HEAP32[$1696>>2]|0;
 $1698 = (($1695) + 4)|0;
 $1699 = $1698;
 $1700 = HEAP32[$1699>>2]|0;
 $1701 = (___muldi3(($1697|0),($1700|0),136657,0)|0);
 $1702 = tempRet0;
 $1703 = $11;
 $1704 = $1703;
 $1705 = HEAP32[$1704>>2]|0;
 $1706 = (($1703) + 4)|0;
 $1707 = $1706;
 $1708 = HEAP32[$1707>>2]|0;
 $1709 = (_i64Add(($1705|0),($1708|0),($1701|0),($1702|0))|0);
 $1710 = tempRet0;
 $1711 = $11;
 $1712 = $1711;
 HEAP32[$1712>>2] = $1709;
 $1713 = (($1711) + 4)|0;
 $1714 = $1713;
 HEAP32[$1714>>2] = $1710;
 $1715 = $19;
 $1716 = $1715;
 $1717 = HEAP32[$1716>>2]|0;
 $1718 = (($1715) + 4)|0;
 $1719 = $1718;
 $1720 = HEAP32[$1719>>2]|0;
 $1721 = (___muldi3(($1717|0),($1720|0),683901,0)|0);
 $1722 = tempRet0;
 $1723 = $12;
 $1724 = $1723;
 $1725 = HEAP32[$1724>>2]|0;
 $1726 = (($1723) + 4)|0;
 $1727 = $1726;
 $1728 = HEAP32[$1727>>2]|0;
 $1729 = (_i64Subtract(($1725|0),($1728|0),($1721|0),($1722|0))|0);
 $1730 = tempRet0;
 $1731 = $12;
 $1732 = $1731;
 HEAP32[$1732>>2] = $1729;
 $1733 = (($1731) + 4)|0;
 $1734 = $1733;
 HEAP32[$1734>>2] = $1730;
 $1735 = $19;
 $1736 = $1735;
 HEAP32[$1736>>2] = 0;
 $1737 = (($1735) + 4)|0;
 $1738 = $1737;
 HEAP32[$1738>>2] = 0;
 $1739 = $18;
 $1740 = $1739;
 $1741 = HEAP32[$1740>>2]|0;
 $1742 = (($1739) + 4)|0;
 $1743 = $1742;
 $1744 = HEAP32[$1743>>2]|0;
 $1745 = (___muldi3(($1741|0),($1744|0),666643,0)|0);
 $1746 = tempRet0;
 $1747 = $6;
 $1748 = $1747;
 $1749 = HEAP32[$1748>>2]|0;
 $1750 = (($1747) + 4)|0;
 $1751 = $1750;
 $1752 = HEAP32[$1751>>2]|0;
 $1753 = (_i64Add(($1749|0),($1752|0),($1745|0),($1746|0))|0);
 $1754 = tempRet0;
 $1755 = $6;
 $1756 = $1755;
 HEAP32[$1756>>2] = $1753;
 $1757 = (($1755) + 4)|0;
 $1758 = $1757;
 HEAP32[$1758>>2] = $1754;
 $1759 = $18;
 $1760 = $1759;
 $1761 = HEAP32[$1760>>2]|0;
 $1762 = (($1759) + 4)|0;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = (___muldi3(($1761|0),($1764|0),470296,0)|0);
 $1766 = tempRet0;
 $1767 = $7;
 $1768 = $1767;
 $1769 = HEAP32[$1768>>2]|0;
 $1770 = (($1767) + 4)|0;
 $1771 = $1770;
 $1772 = HEAP32[$1771>>2]|0;
 $1773 = (_i64Add(($1769|0),($1772|0),($1765|0),($1766|0))|0);
 $1774 = tempRet0;
 $1775 = $7;
 $1776 = $1775;
 HEAP32[$1776>>2] = $1773;
 $1777 = (($1775) + 4)|0;
 $1778 = $1777;
 HEAP32[$1778>>2] = $1774;
 $1779 = $18;
 $1780 = $1779;
 $1781 = HEAP32[$1780>>2]|0;
 $1782 = (($1779) + 4)|0;
 $1783 = $1782;
 $1784 = HEAP32[$1783>>2]|0;
 $1785 = (___muldi3(($1781|0),($1784|0),654183,0)|0);
 $1786 = tempRet0;
 $1787 = $8;
 $1788 = $1787;
 $1789 = HEAP32[$1788>>2]|0;
 $1790 = (($1787) + 4)|0;
 $1791 = $1790;
 $1792 = HEAP32[$1791>>2]|0;
 $1793 = (_i64Add(($1789|0),($1792|0),($1785|0),($1786|0))|0);
 $1794 = tempRet0;
 $1795 = $8;
 $1796 = $1795;
 HEAP32[$1796>>2] = $1793;
 $1797 = (($1795) + 4)|0;
 $1798 = $1797;
 HEAP32[$1798>>2] = $1794;
 $1799 = $18;
 $1800 = $1799;
 $1801 = HEAP32[$1800>>2]|0;
 $1802 = (($1799) + 4)|0;
 $1803 = $1802;
 $1804 = HEAP32[$1803>>2]|0;
 $1805 = (___muldi3(($1801|0),($1804|0),997805,0)|0);
 $1806 = tempRet0;
 $1807 = $9;
 $1808 = $1807;
 $1809 = HEAP32[$1808>>2]|0;
 $1810 = (($1807) + 4)|0;
 $1811 = $1810;
 $1812 = HEAP32[$1811>>2]|0;
 $1813 = (_i64Subtract(($1809|0),($1812|0),($1805|0),($1806|0))|0);
 $1814 = tempRet0;
 $1815 = $9;
 $1816 = $1815;
 HEAP32[$1816>>2] = $1813;
 $1817 = (($1815) + 4)|0;
 $1818 = $1817;
 HEAP32[$1818>>2] = $1814;
 $1819 = $18;
 $1820 = $1819;
 $1821 = HEAP32[$1820>>2]|0;
 $1822 = (($1819) + 4)|0;
 $1823 = $1822;
 $1824 = HEAP32[$1823>>2]|0;
 $1825 = (___muldi3(($1821|0),($1824|0),136657,0)|0);
 $1826 = tempRet0;
 $1827 = $10;
 $1828 = $1827;
 $1829 = HEAP32[$1828>>2]|0;
 $1830 = (($1827) + 4)|0;
 $1831 = $1830;
 $1832 = HEAP32[$1831>>2]|0;
 $1833 = (_i64Add(($1829|0),($1832|0),($1825|0),($1826|0))|0);
 $1834 = tempRet0;
 $1835 = $10;
 $1836 = $1835;
 HEAP32[$1836>>2] = $1833;
 $1837 = (($1835) + 4)|0;
 $1838 = $1837;
 HEAP32[$1838>>2] = $1834;
 $1839 = $18;
 $1840 = $1839;
 $1841 = HEAP32[$1840>>2]|0;
 $1842 = (($1839) + 4)|0;
 $1843 = $1842;
 $1844 = HEAP32[$1843>>2]|0;
 $1845 = (___muldi3(($1841|0),($1844|0),683901,0)|0);
 $1846 = tempRet0;
 $1847 = $11;
 $1848 = $1847;
 $1849 = HEAP32[$1848>>2]|0;
 $1850 = (($1847) + 4)|0;
 $1851 = $1850;
 $1852 = HEAP32[$1851>>2]|0;
 $1853 = (_i64Subtract(($1849|0),($1852|0),($1845|0),($1846|0))|0);
 $1854 = tempRet0;
 $1855 = $11;
 $1856 = $1855;
 HEAP32[$1856>>2] = $1853;
 $1857 = (($1855) + 4)|0;
 $1858 = $1857;
 HEAP32[$1858>>2] = $1854;
 $1859 = $18;
 $1860 = $1859;
 HEAP32[$1860>>2] = 0;
 $1861 = (($1859) + 4)|0;
 $1862 = $1861;
 HEAP32[$1862>>2] = 0;
 $1863 = $17;
 $1864 = $1863;
 $1865 = HEAP32[$1864>>2]|0;
 $1866 = (($1863) + 4)|0;
 $1867 = $1866;
 $1868 = HEAP32[$1867>>2]|0;
 $1869 = (___muldi3(($1865|0),($1868|0),666643,0)|0);
 $1870 = tempRet0;
 $1871 = $5;
 $1872 = $1871;
 $1873 = HEAP32[$1872>>2]|0;
 $1874 = (($1871) + 4)|0;
 $1875 = $1874;
 $1876 = HEAP32[$1875>>2]|0;
 $1877 = (_i64Add(($1873|0),($1876|0),($1869|0),($1870|0))|0);
 $1878 = tempRet0;
 $1879 = $5;
 $1880 = $1879;
 HEAP32[$1880>>2] = $1877;
 $1881 = (($1879) + 4)|0;
 $1882 = $1881;
 HEAP32[$1882>>2] = $1878;
 $1883 = $17;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (___muldi3(($1885|0),($1888|0),470296,0)|0);
 $1890 = tempRet0;
 $1891 = $6;
 $1892 = $1891;
 $1893 = HEAP32[$1892>>2]|0;
 $1894 = (($1891) + 4)|0;
 $1895 = $1894;
 $1896 = HEAP32[$1895>>2]|0;
 $1897 = (_i64Add(($1893|0),($1896|0),($1889|0),($1890|0))|0);
 $1898 = tempRet0;
 $1899 = $6;
 $1900 = $1899;
 HEAP32[$1900>>2] = $1897;
 $1901 = (($1899) + 4)|0;
 $1902 = $1901;
 HEAP32[$1902>>2] = $1898;
 $1903 = $17;
 $1904 = $1903;
 $1905 = HEAP32[$1904>>2]|0;
 $1906 = (($1903) + 4)|0;
 $1907 = $1906;
 $1908 = HEAP32[$1907>>2]|0;
 $1909 = (___muldi3(($1905|0),($1908|0),654183,0)|0);
 $1910 = tempRet0;
 $1911 = $7;
 $1912 = $1911;
 $1913 = HEAP32[$1912>>2]|0;
 $1914 = (($1911) + 4)|0;
 $1915 = $1914;
 $1916 = HEAP32[$1915>>2]|0;
 $1917 = (_i64Add(($1913|0),($1916|0),($1909|0),($1910|0))|0);
 $1918 = tempRet0;
 $1919 = $7;
 $1920 = $1919;
 HEAP32[$1920>>2] = $1917;
 $1921 = (($1919) + 4)|0;
 $1922 = $1921;
 HEAP32[$1922>>2] = $1918;
 $1923 = $17;
 $1924 = $1923;
 $1925 = HEAP32[$1924>>2]|0;
 $1926 = (($1923) + 4)|0;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (___muldi3(($1925|0),($1928|0),997805,0)|0);
 $1930 = tempRet0;
 $1931 = $8;
 $1932 = $1931;
 $1933 = HEAP32[$1932>>2]|0;
 $1934 = (($1931) + 4)|0;
 $1935 = $1934;
 $1936 = HEAP32[$1935>>2]|0;
 $1937 = (_i64Subtract(($1933|0),($1936|0),($1929|0),($1930|0))|0);
 $1938 = tempRet0;
 $1939 = $8;
 $1940 = $1939;
 HEAP32[$1940>>2] = $1937;
 $1941 = (($1939) + 4)|0;
 $1942 = $1941;
 HEAP32[$1942>>2] = $1938;
 $1943 = $17;
 $1944 = $1943;
 $1945 = HEAP32[$1944>>2]|0;
 $1946 = (($1943) + 4)|0;
 $1947 = $1946;
 $1948 = HEAP32[$1947>>2]|0;
 $1949 = (___muldi3(($1945|0),($1948|0),136657,0)|0);
 $1950 = tempRet0;
 $1951 = $9;
 $1952 = $1951;
 $1953 = HEAP32[$1952>>2]|0;
 $1954 = (($1951) + 4)|0;
 $1955 = $1954;
 $1956 = HEAP32[$1955>>2]|0;
 $1957 = (_i64Add(($1953|0),($1956|0),($1949|0),($1950|0))|0);
 $1958 = tempRet0;
 $1959 = $9;
 $1960 = $1959;
 HEAP32[$1960>>2] = $1957;
 $1961 = (($1959) + 4)|0;
 $1962 = $1961;
 HEAP32[$1962>>2] = $1958;
 $1963 = $17;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (($1963) + 4)|0;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = (___muldi3(($1965|0),($1968|0),683901,0)|0);
 $1970 = tempRet0;
 $1971 = $10;
 $1972 = $1971;
 $1973 = HEAP32[$1972>>2]|0;
 $1974 = (($1971) + 4)|0;
 $1975 = $1974;
 $1976 = HEAP32[$1975>>2]|0;
 $1977 = (_i64Subtract(($1973|0),($1976|0),($1969|0),($1970|0))|0);
 $1978 = tempRet0;
 $1979 = $10;
 $1980 = $1979;
 HEAP32[$1980>>2] = $1977;
 $1981 = (($1979) + 4)|0;
 $1982 = $1981;
 HEAP32[$1982>>2] = $1978;
 $1983 = $17;
 $1984 = $1983;
 HEAP32[$1984>>2] = 0;
 $1985 = (($1983) + 4)|0;
 $1986 = $1985;
 HEAP32[$1986>>2] = 0;
 $1987 = $16;
 $1988 = $1987;
 $1989 = HEAP32[$1988>>2]|0;
 $1990 = (($1987) + 4)|0;
 $1991 = $1990;
 $1992 = HEAP32[$1991>>2]|0;
 $1993 = (___muldi3(($1989|0),($1992|0),666643,0)|0);
 $1994 = tempRet0;
 $1995 = $4;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (($1995) + 4)|0;
 $1999 = $1998;
 $2000 = HEAP32[$1999>>2]|0;
 $2001 = (_i64Add(($1997|0),($2000|0),($1993|0),($1994|0))|0);
 $2002 = tempRet0;
 $2003 = $4;
 $2004 = $2003;
 HEAP32[$2004>>2] = $2001;
 $2005 = (($2003) + 4)|0;
 $2006 = $2005;
 HEAP32[$2006>>2] = $2002;
 $2007 = $16;
 $2008 = $2007;
 $2009 = HEAP32[$2008>>2]|0;
 $2010 = (($2007) + 4)|0;
 $2011 = $2010;
 $2012 = HEAP32[$2011>>2]|0;
 $2013 = (___muldi3(($2009|0),($2012|0),470296,0)|0);
 $2014 = tempRet0;
 $2015 = $5;
 $2016 = $2015;
 $2017 = HEAP32[$2016>>2]|0;
 $2018 = (($2015) + 4)|0;
 $2019 = $2018;
 $2020 = HEAP32[$2019>>2]|0;
 $2021 = (_i64Add(($2017|0),($2020|0),($2013|0),($2014|0))|0);
 $2022 = tempRet0;
 $2023 = $5;
 $2024 = $2023;
 HEAP32[$2024>>2] = $2021;
 $2025 = (($2023) + 4)|0;
 $2026 = $2025;
 HEAP32[$2026>>2] = $2022;
 $2027 = $16;
 $2028 = $2027;
 $2029 = HEAP32[$2028>>2]|0;
 $2030 = (($2027) + 4)|0;
 $2031 = $2030;
 $2032 = HEAP32[$2031>>2]|0;
 $2033 = (___muldi3(($2029|0),($2032|0),654183,0)|0);
 $2034 = tempRet0;
 $2035 = $6;
 $2036 = $2035;
 $2037 = HEAP32[$2036>>2]|0;
 $2038 = (($2035) + 4)|0;
 $2039 = $2038;
 $2040 = HEAP32[$2039>>2]|0;
 $2041 = (_i64Add(($2037|0),($2040|0),($2033|0),($2034|0))|0);
 $2042 = tempRet0;
 $2043 = $6;
 $2044 = $2043;
 HEAP32[$2044>>2] = $2041;
 $2045 = (($2043) + 4)|0;
 $2046 = $2045;
 HEAP32[$2046>>2] = $2042;
 $2047 = $16;
 $2048 = $2047;
 $2049 = HEAP32[$2048>>2]|0;
 $2050 = (($2047) + 4)|0;
 $2051 = $2050;
 $2052 = HEAP32[$2051>>2]|0;
 $2053 = (___muldi3(($2049|0),($2052|0),997805,0)|0);
 $2054 = tempRet0;
 $2055 = $7;
 $2056 = $2055;
 $2057 = HEAP32[$2056>>2]|0;
 $2058 = (($2055) + 4)|0;
 $2059 = $2058;
 $2060 = HEAP32[$2059>>2]|0;
 $2061 = (_i64Subtract(($2057|0),($2060|0),($2053|0),($2054|0))|0);
 $2062 = tempRet0;
 $2063 = $7;
 $2064 = $2063;
 HEAP32[$2064>>2] = $2061;
 $2065 = (($2063) + 4)|0;
 $2066 = $2065;
 HEAP32[$2066>>2] = $2062;
 $2067 = $16;
 $2068 = $2067;
 $2069 = HEAP32[$2068>>2]|0;
 $2070 = (($2067) + 4)|0;
 $2071 = $2070;
 $2072 = HEAP32[$2071>>2]|0;
 $2073 = (___muldi3(($2069|0),($2072|0),136657,0)|0);
 $2074 = tempRet0;
 $2075 = $8;
 $2076 = $2075;
 $2077 = HEAP32[$2076>>2]|0;
 $2078 = (($2075) + 4)|0;
 $2079 = $2078;
 $2080 = HEAP32[$2079>>2]|0;
 $2081 = (_i64Add(($2077|0),($2080|0),($2073|0),($2074|0))|0);
 $2082 = tempRet0;
 $2083 = $8;
 $2084 = $2083;
 HEAP32[$2084>>2] = $2081;
 $2085 = (($2083) + 4)|0;
 $2086 = $2085;
 HEAP32[$2086>>2] = $2082;
 $2087 = $16;
 $2088 = $2087;
 $2089 = HEAP32[$2088>>2]|0;
 $2090 = (($2087) + 4)|0;
 $2091 = $2090;
 $2092 = HEAP32[$2091>>2]|0;
 $2093 = (___muldi3(($2089|0),($2092|0),683901,0)|0);
 $2094 = tempRet0;
 $2095 = $9;
 $2096 = $2095;
 $2097 = HEAP32[$2096>>2]|0;
 $2098 = (($2095) + 4)|0;
 $2099 = $2098;
 $2100 = HEAP32[$2099>>2]|0;
 $2101 = (_i64Subtract(($2097|0),($2100|0),($2093|0),($2094|0))|0);
 $2102 = tempRet0;
 $2103 = $9;
 $2104 = $2103;
 HEAP32[$2104>>2] = $2101;
 $2105 = (($2103) + 4)|0;
 $2106 = $2105;
 HEAP32[$2106>>2] = $2102;
 $2107 = $16;
 $2108 = $2107;
 HEAP32[$2108>>2] = 0;
 $2109 = (($2107) + 4)|0;
 $2110 = $2109;
 HEAP32[$2110>>2] = 0;
 $2111 = $15;
 $2112 = $2111;
 $2113 = HEAP32[$2112>>2]|0;
 $2114 = (($2111) + 4)|0;
 $2115 = $2114;
 $2116 = HEAP32[$2115>>2]|0;
 $2117 = (___muldi3(($2113|0),($2116|0),666643,0)|0);
 $2118 = tempRet0;
 $2119 = $3;
 $2120 = $2119;
 $2121 = HEAP32[$2120>>2]|0;
 $2122 = (($2119) + 4)|0;
 $2123 = $2122;
 $2124 = HEAP32[$2123>>2]|0;
 $2125 = (_i64Add(($2121|0),($2124|0),($2117|0),($2118|0))|0);
 $2126 = tempRet0;
 $2127 = $3;
 $2128 = $2127;
 HEAP32[$2128>>2] = $2125;
 $2129 = (($2127) + 4)|0;
 $2130 = $2129;
 HEAP32[$2130>>2] = $2126;
 $2131 = $15;
 $2132 = $2131;
 $2133 = HEAP32[$2132>>2]|0;
 $2134 = (($2131) + 4)|0;
 $2135 = $2134;
 $2136 = HEAP32[$2135>>2]|0;
 $2137 = (___muldi3(($2133|0),($2136|0),470296,0)|0);
 $2138 = tempRet0;
 $2139 = $4;
 $2140 = $2139;
 $2141 = HEAP32[$2140>>2]|0;
 $2142 = (($2139) + 4)|0;
 $2143 = $2142;
 $2144 = HEAP32[$2143>>2]|0;
 $2145 = (_i64Add(($2141|0),($2144|0),($2137|0),($2138|0))|0);
 $2146 = tempRet0;
 $2147 = $4;
 $2148 = $2147;
 HEAP32[$2148>>2] = $2145;
 $2149 = (($2147) + 4)|0;
 $2150 = $2149;
 HEAP32[$2150>>2] = $2146;
 $2151 = $15;
 $2152 = $2151;
 $2153 = HEAP32[$2152>>2]|0;
 $2154 = (($2151) + 4)|0;
 $2155 = $2154;
 $2156 = HEAP32[$2155>>2]|0;
 $2157 = (___muldi3(($2153|0),($2156|0),654183,0)|0);
 $2158 = tempRet0;
 $2159 = $5;
 $2160 = $2159;
 $2161 = HEAP32[$2160>>2]|0;
 $2162 = (($2159) + 4)|0;
 $2163 = $2162;
 $2164 = HEAP32[$2163>>2]|0;
 $2165 = (_i64Add(($2161|0),($2164|0),($2157|0),($2158|0))|0);
 $2166 = tempRet0;
 $2167 = $5;
 $2168 = $2167;
 HEAP32[$2168>>2] = $2165;
 $2169 = (($2167) + 4)|0;
 $2170 = $2169;
 HEAP32[$2170>>2] = $2166;
 $2171 = $15;
 $2172 = $2171;
 $2173 = HEAP32[$2172>>2]|0;
 $2174 = (($2171) + 4)|0;
 $2175 = $2174;
 $2176 = HEAP32[$2175>>2]|0;
 $2177 = (___muldi3(($2173|0),($2176|0),997805,0)|0);
 $2178 = tempRet0;
 $2179 = $6;
 $2180 = $2179;
 $2181 = HEAP32[$2180>>2]|0;
 $2182 = (($2179) + 4)|0;
 $2183 = $2182;
 $2184 = HEAP32[$2183>>2]|0;
 $2185 = (_i64Subtract(($2181|0),($2184|0),($2177|0),($2178|0))|0);
 $2186 = tempRet0;
 $2187 = $6;
 $2188 = $2187;
 HEAP32[$2188>>2] = $2185;
 $2189 = (($2187) + 4)|0;
 $2190 = $2189;
 HEAP32[$2190>>2] = $2186;
 $2191 = $15;
 $2192 = $2191;
 $2193 = HEAP32[$2192>>2]|0;
 $2194 = (($2191) + 4)|0;
 $2195 = $2194;
 $2196 = HEAP32[$2195>>2]|0;
 $2197 = (___muldi3(($2193|0),($2196|0),136657,0)|0);
 $2198 = tempRet0;
 $2199 = $7;
 $2200 = $2199;
 $2201 = HEAP32[$2200>>2]|0;
 $2202 = (($2199) + 4)|0;
 $2203 = $2202;
 $2204 = HEAP32[$2203>>2]|0;
 $2205 = (_i64Add(($2201|0),($2204|0),($2197|0),($2198|0))|0);
 $2206 = tempRet0;
 $2207 = $7;
 $2208 = $2207;
 HEAP32[$2208>>2] = $2205;
 $2209 = (($2207) + 4)|0;
 $2210 = $2209;
 HEAP32[$2210>>2] = $2206;
 $2211 = $15;
 $2212 = $2211;
 $2213 = HEAP32[$2212>>2]|0;
 $2214 = (($2211) + 4)|0;
 $2215 = $2214;
 $2216 = HEAP32[$2215>>2]|0;
 $2217 = (___muldi3(($2213|0),($2216|0),683901,0)|0);
 $2218 = tempRet0;
 $2219 = $8;
 $2220 = $2219;
 $2221 = HEAP32[$2220>>2]|0;
 $2222 = (($2219) + 4)|0;
 $2223 = $2222;
 $2224 = HEAP32[$2223>>2]|0;
 $2225 = (_i64Subtract(($2221|0),($2224|0),($2217|0),($2218|0))|0);
 $2226 = tempRet0;
 $2227 = $8;
 $2228 = $2227;
 HEAP32[$2228>>2] = $2225;
 $2229 = (($2227) + 4)|0;
 $2230 = $2229;
 HEAP32[$2230>>2] = $2226;
 $2231 = $15;
 $2232 = $2231;
 HEAP32[$2232>>2] = 0;
 $2233 = (($2231) + 4)|0;
 $2234 = $2233;
 HEAP32[$2234>>2] = 0;
 $2235 = $14;
 $2236 = $2235;
 $2237 = HEAP32[$2236>>2]|0;
 $2238 = (($2235) + 4)|0;
 $2239 = $2238;
 $2240 = HEAP32[$2239>>2]|0;
 $2241 = (___muldi3(($2237|0),($2240|0),666643,0)|0);
 $2242 = tempRet0;
 $2243 = $2;
 $2244 = $2243;
 $2245 = HEAP32[$2244>>2]|0;
 $2246 = (($2243) + 4)|0;
 $2247 = $2246;
 $2248 = HEAP32[$2247>>2]|0;
 $2249 = (_i64Add(($2245|0),($2248|0),($2241|0),($2242|0))|0);
 $2250 = tempRet0;
 $2251 = $2;
 $2252 = $2251;
 HEAP32[$2252>>2] = $2249;
 $2253 = (($2251) + 4)|0;
 $2254 = $2253;
 HEAP32[$2254>>2] = $2250;
 $2255 = $14;
 $2256 = $2255;
 $2257 = HEAP32[$2256>>2]|0;
 $2258 = (($2255) + 4)|0;
 $2259 = $2258;
 $2260 = HEAP32[$2259>>2]|0;
 $2261 = (___muldi3(($2257|0),($2260|0),470296,0)|0);
 $2262 = tempRet0;
 $2263 = $3;
 $2264 = $2263;
 $2265 = HEAP32[$2264>>2]|0;
 $2266 = (($2263) + 4)|0;
 $2267 = $2266;
 $2268 = HEAP32[$2267>>2]|0;
 $2269 = (_i64Add(($2265|0),($2268|0),($2261|0),($2262|0))|0);
 $2270 = tempRet0;
 $2271 = $3;
 $2272 = $2271;
 HEAP32[$2272>>2] = $2269;
 $2273 = (($2271) + 4)|0;
 $2274 = $2273;
 HEAP32[$2274>>2] = $2270;
 $2275 = $14;
 $2276 = $2275;
 $2277 = HEAP32[$2276>>2]|0;
 $2278 = (($2275) + 4)|0;
 $2279 = $2278;
 $2280 = HEAP32[$2279>>2]|0;
 $2281 = (___muldi3(($2277|0),($2280|0),654183,0)|0);
 $2282 = tempRet0;
 $2283 = $4;
 $2284 = $2283;
 $2285 = HEAP32[$2284>>2]|0;
 $2286 = (($2283) + 4)|0;
 $2287 = $2286;
 $2288 = HEAP32[$2287>>2]|0;
 $2289 = (_i64Add(($2285|0),($2288|0),($2281|0),($2282|0))|0);
 $2290 = tempRet0;
 $2291 = $4;
 $2292 = $2291;
 HEAP32[$2292>>2] = $2289;
 $2293 = (($2291) + 4)|0;
 $2294 = $2293;
 HEAP32[$2294>>2] = $2290;
 $2295 = $14;
 $2296 = $2295;
 $2297 = HEAP32[$2296>>2]|0;
 $2298 = (($2295) + 4)|0;
 $2299 = $2298;
 $2300 = HEAP32[$2299>>2]|0;
 $2301 = (___muldi3(($2297|0),($2300|0),997805,0)|0);
 $2302 = tempRet0;
 $2303 = $5;
 $2304 = $2303;
 $2305 = HEAP32[$2304>>2]|0;
 $2306 = (($2303) + 4)|0;
 $2307 = $2306;
 $2308 = HEAP32[$2307>>2]|0;
 $2309 = (_i64Subtract(($2305|0),($2308|0),($2301|0),($2302|0))|0);
 $2310 = tempRet0;
 $2311 = $5;
 $2312 = $2311;
 HEAP32[$2312>>2] = $2309;
 $2313 = (($2311) + 4)|0;
 $2314 = $2313;
 HEAP32[$2314>>2] = $2310;
 $2315 = $14;
 $2316 = $2315;
 $2317 = HEAP32[$2316>>2]|0;
 $2318 = (($2315) + 4)|0;
 $2319 = $2318;
 $2320 = HEAP32[$2319>>2]|0;
 $2321 = (___muldi3(($2317|0),($2320|0),136657,0)|0);
 $2322 = tempRet0;
 $2323 = $6;
 $2324 = $2323;
 $2325 = HEAP32[$2324>>2]|0;
 $2326 = (($2323) + 4)|0;
 $2327 = $2326;
 $2328 = HEAP32[$2327>>2]|0;
 $2329 = (_i64Add(($2325|0),($2328|0),($2321|0),($2322|0))|0);
 $2330 = tempRet0;
 $2331 = $6;
 $2332 = $2331;
 HEAP32[$2332>>2] = $2329;
 $2333 = (($2331) + 4)|0;
 $2334 = $2333;
 HEAP32[$2334>>2] = $2330;
 $2335 = $14;
 $2336 = $2335;
 $2337 = HEAP32[$2336>>2]|0;
 $2338 = (($2335) + 4)|0;
 $2339 = $2338;
 $2340 = HEAP32[$2339>>2]|0;
 $2341 = (___muldi3(($2337|0),($2340|0),683901,0)|0);
 $2342 = tempRet0;
 $2343 = $7;
 $2344 = $2343;
 $2345 = HEAP32[$2344>>2]|0;
 $2346 = (($2343) + 4)|0;
 $2347 = $2346;
 $2348 = HEAP32[$2347>>2]|0;
 $2349 = (_i64Subtract(($2345|0),($2348|0),($2341|0),($2342|0))|0);
 $2350 = tempRet0;
 $2351 = $7;
 $2352 = $2351;
 HEAP32[$2352>>2] = $2349;
 $2353 = (($2351) + 4)|0;
 $2354 = $2353;
 HEAP32[$2354>>2] = $2350;
 $2355 = $14;
 $2356 = $2355;
 HEAP32[$2356>>2] = 0;
 $2357 = (($2355) + 4)|0;
 $2358 = $2357;
 HEAP32[$2358>>2] = 0;
 $2359 = $2;
 $2360 = $2359;
 $2361 = HEAP32[$2360>>2]|0;
 $2362 = (($2359) + 4)|0;
 $2363 = $2362;
 $2364 = HEAP32[$2363>>2]|0;
 $2365 = (_i64Add(($2361|0),($2364|0),1048576,0)|0);
 $2366 = tempRet0;
 $2367 = (_bitshift64Ashr(($2365|0),($2366|0),21)|0);
 $2368 = tempRet0;
 $2369 = $26;
 $2370 = $2369;
 HEAP32[$2370>>2] = $2367;
 $2371 = (($2369) + 4)|0;
 $2372 = $2371;
 HEAP32[$2372>>2] = $2368;
 $2373 = $26;
 $2374 = $2373;
 $2375 = HEAP32[$2374>>2]|0;
 $2376 = (($2373) + 4)|0;
 $2377 = $2376;
 $2378 = HEAP32[$2377>>2]|0;
 $2379 = $3;
 $2380 = $2379;
 $2381 = HEAP32[$2380>>2]|0;
 $2382 = (($2379) + 4)|0;
 $2383 = $2382;
 $2384 = HEAP32[$2383>>2]|0;
 $2385 = (_i64Add(($2381|0),($2384|0),($2375|0),($2378|0))|0);
 $2386 = tempRet0;
 $2387 = $3;
 $2388 = $2387;
 HEAP32[$2388>>2] = $2385;
 $2389 = (($2387) + 4)|0;
 $2390 = $2389;
 HEAP32[$2390>>2] = $2386;
 $2391 = $26;
 $2392 = $2391;
 $2393 = HEAP32[$2392>>2]|0;
 $2394 = (($2391) + 4)|0;
 $2395 = $2394;
 $2396 = HEAP32[$2395>>2]|0;
 $2397 = (_bitshift64Shl(($2393|0),($2396|0),21)|0);
 $2398 = tempRet0;
 $2399 = $2;
 $2400 = $2399;
 $2401 = HEAP32[$2400>>2]|0;
 $2402 = (($2399) + 4)|0;
 $2403 = $2402;
 $2404 = HEAP32[$2403>>2]|0;
 $2405 = (_i64Subtract(($2401|0),($2404|0),($2397|0),($2398|0))|0);
 $2406 = tempRet0;
 $2407 = $2;
 $2408 = $2407;
 HEAP32[$2408>>2] = $2405;
 $2409 = (($2407) + 4)|0;
 $2410 = $2409;
 HEAP32[$2410>>2] = $2406;
 $2411 = $4;
 $2412 = $2411;
 $2413 = HEAP32[$2412>>2]|0;
 $2414 = (($2411) + 4)|0;
 $2415 = $2414;
 $2416 = HEAP32[$2415>>2]|0;
 $2417 = (_i64Add(($2413|0),($2416|0),1048576,0)|0);
 $2418 = tempRet0;
 $2419 = (_bitshift64Ashr(($2417|0),($2418|0),21)|0);
 $2420 = tempRet0;
 $2421 = $28;
 $2422 = $2421;
 HEAP32[$2422>>2] = $2419;
 $2423 = (($2421) + 4)|0;
 $2424 = $2423;
 HEAP32[$2424>>2] = $2420;
 $2425 = $28;
 $2426 = $2425;
 $2427 = HEAP32[$2426>>2]|0;
 $2428 = (($2425) + 4)|0;
 $2429 = $2428;
 $2430 = HEAP32[$2429>>2]|0;
 $2431 = $5;
 $2432 = $2431;
 $2433 = HEAP32[$2432>>2]|0;
 $2434 = (($2431) + 4)|0;
 $2435 = $2434;
 $2436 = HEAP32[$2435>>2]|0;
 $2437 = (_i64Add(($2433|0),($2436|0),($2427|0),($2430|0))|0);
 $2438 = tempRet0;
 $2439 = $5;
 $2440 = $2439;
 HEAP32[$2440>>2] = $2437;
 $2441 = (($2439) + 4)|0;
 $2442 = $2441;
 HEAP32[$2442>>2] = $2438;
 $2443 = $28;
 $2444 = $2443;
 $2445 = HEAP32[$2444>>2]|0;
 $2446 = (($2443) + 4)|0;
 $2447 = $2446;
 $2448 = HEAP32[$2447>>2]|0;
 $2449 = (_bitshift64Shl(($2445|0),($2448|0),21)|0);
 $2450 = tempRet0;
 $2451 = $4;
 $2452 = $2451;
 $2453 = HEAP32[$2452>>2]|0;
 $2454 = (($2451) + 4)|0;
 $2455 = $2454;
 $2456 = HEAP32[$2455>>2]|0;
 $2457 = (_i64Subtract(($2453|0),($2456|0),($2449|0),($2450|0))|0);
 $2458 = tempRet0;
 $2459 = $4;
 $2460 = $2459;
 HEAP32[$2460>>2] = $2457;
 $2461 = (($2459) + 4)|0;
 $2462 = $2461;
 HEAP32[$2462>>2] = $2458;
 $2463 = $6;
 $2464 = $2463;
 $2465 = HEAP32[$2464>>2]|0;
 $2466 = (($2463) + 4)|0;
 $2467 = $2466;
 $2468 = HEAP32[$2467>>2]|0;
 $2469 = (_i64Add(($2465|0),($2468|0),1048576,0)|0);
 $2470 = tempRet0;
 $2471 = (_bitshift64Ashr(($2469|0),($2470|0),21)|0);
 $2472 = tempRet0;
 $2473 = $30;
 $2474 = $2473;
 HEAP32[$2474>>2] = $2471;
 $2475 = (($2473) + 4)|0;
 $2476 = $2475;
 HEAP32[$2476>>2] = $2472;
 $2477 = $30;
 $2478 = $2477;
 $2479 = HEAP32[$2478>>2]|0;
 $2480 = (($2477) + 4)|0;
 $2481 = $2480;
 $2482 = HEAP32[$2481>>2]|0;
 $2483 = $7;
 $2484 = $2483;
 $2485 = HEAP32[$2484>>2]|0;
 $2486 = (($2483) + 4)|0;
 $2487 = $2486;
 $2488 = HEAP32[$2487>>2]|0;
 $2489 = (_i64Add(($2485|0),($2488|0),($2479|0),($2482|0))|0);
 $2490 = tempRet0;
 $2491 = $7;
 $2492 = $2491;
 HEAP32[$2492>>2] = $2489;
 $2493 = (($2491) + 4)|0;
 $2494 = $2493;
 HEAP32[$2494>>2] = $2490;
 $2495 = $30;
 $2496 = $2495;
 $2497 = HEAP32[$2496>>2]|0;
 $2498 = (($2495) + 4)|0;
 $2499 = $2498;
 $2500 = HEAP32[$2499>>2]|0;
 $2501 = (_bitshift64Shl(($2497|0),($2500|0),21)|0);
 $2502 = tempRet0;
 $2503 = $6;
 $2504 = $2503;
 $2505 = HEAP32[$2504>>2]|0;
 $2506 = (($2503) + 4)|0;
 $2507 = $2506;
 $2508 = HEAP32[$2507>>2]|0;
 $2509 = (_i64Subtract(($2505|0),($2508|0),($2501|0),($2502|0))|0);
 $2510 = tempRet0;
 $2511 = $6;
 $2512 = $2511;
 HEAP32[$2512>>2] = $2509;
 $2513 = (($2511) + 4)|0;
 $2514 = $2513;
 HEAP32[$2514>>2] = $2510;
 $2515 = $8;
 $2516 = $2515;
 $2517 = HEAP32[$2516>>2]|0;
 $2518 = (($2515) + 4)|0;
 $2519 = $2518;
 $2520 = HEAP32[$2519>>2]|0;
 $2521 = (_i64Add(($2517|0),($2520|0),1048576,0)|0);
 $2522 = tempRet0;
 $2523 = (_bitshift64Ashr(($2521|0),($2522|0),21)|0);
 $2524 = tempRet0;
 $2525 = $32;
 $2526 = $2525;
 HEAP32[$2526>>2] = $2523;
 $2527 = (($2525) + 4)|0;
 $2528 = $2527;
 HEAP32[$2528>>2] = $2524;
 $2529 = $32;
 $2530 = $2529;
 $2531 = HEAP32[$2530>>2]|0;
 $2532 = (($2529) + 4)|0;
 $2533 = $2532;
 $2534 = HEAP32[$2533>>2]|0;
 $2535 = $9;
 $2536 = $2535;
 $2537 = HEAP32[$2536>>2]|0;
 $2538 = (($2535) + 4)|0;
 $2539 = $2538;
 $2540 = HEAP32[$2539>>2]|0;
 $2541 = (_i64Add(($2537|0),($2540|0),($2531|0),($2534|0))|0);
 $2542 = tempRet0;
 $2543 = $9;
 $2544 = $2543;
 HEAP32[$2544>>2] = $2541;
 $2545 = (($2543) + 4)|0;
 $2546 = $2545;
 HEAP32[$2546>>2] = $2542;
 $2547 = $32;
 $2548 = $2547;
 $2549 = HEAP32[$2548>>2]|0;
 $2550 = (($2547) + 4)|0;
 $2551 = $2550;
 $2552 = HEAP32[$2551>>2]|0;
 $2553 = (_bitshift64Shl(($2549|0),($2552|0),21)|0);
 $2554 = tempRet0;
 $2555 = $8;
 $2556 = $2555;
 $2557 = HEAP32[$2556>>2]|0;
 $2558 = (($2555) + 4)|0;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = (_i64Subtract(($2557|0),($2560|0),($2553|0),($2554|0))|0);
 $2562 = tempRet0;
 $2563 = $8;
 $2564 = $2563;
 HEAP32[$2564>>2] = $2561;
 $2565 = (($2563) + 4)|0;
 $2566 = $2565;
 HEAP32[$2566>>2] = $2562;
 $2567 = $10;
 $2568 = $2567;
 $2569 = HEAP32[$2568>>2]|0;
 $2570 = (($2567) + 4)|0;
 $2571 = $2570;
 $2572 = HEAP32[$2571>>2]|0;
 $2573 = (_i64Add(($2569|0),($2572|0),1048576,0)|0);
 $2574 = tempRet0;
 $2575 = (_bitshift64Ashr(($2573|0),($2574|0),21)|0);
 $2576 = tempRet0;
 $2577 = $34;
 $2578 = $2577;
 HEAP32[$2578>>2] = $2575;
 $2579 = (($2577) + 4)|0;
 $2580 = $2579;
 HEAP32[$2580>>2] = $2576;
 $2581 = $34;
 $2582 = $2581;
 $2583 = HEAP32[$2582>>2]|0;
 $2584 = (($2581) + 4)|0;
 $2585 = $2584;
 $2586 = HEAP32[$2585>>2]|0;
 $2587 = $11;
 $2588 = $2587;
 $2589 = HEAP32[$2588>>2]|0;
 $2590 = (($2587) + 4)|0;
 $2591 = $2590;
 $2592 = HEAP32[$2591>>2]|0;
 $2593 = (_i64Add(($2589|0),($2592|0),($2583|0),($2586|0))|0);
 $2594 = tempRet0;
 $2595 = $11;
 $2596 = $2595;
 HEAP32[$2596>>2] = $2593;
 $2597 = (($2595) + 4)|0;
 $2598 = $2597;
 HEAP32[$2598>>2] = $2594;
 $2599 = $34;
 $2600 = $2599;
 $2601 = HEAP32[$2600>>2]|0;
 $2602 = (($2599) + 4)|0;
 $2603 = $2602;
 $2604 = HEAP32[$2603>>2]|0;
 $2605 = (_bitshift64Shl(($2601|0),($2604|0),21)|0);
 $2606 = tempRet0;
 $2607 = $10;
 $2608 = $2607;
 $2609 = HEAP32[$2608>>2]|0;
 $2610 = (($2607) + 4)|0;
 $2611 = $2610;
 $2612 = HEAP32[$2611>>2]|0;
 $2613 = (_i64Subtract(($2609|0),($2612|0),($2605|0),($2606|0))|0);
 $2614 = tempRet0;
 $2615 = $10;
 $2616 = $2615;
 HEAP32[$2616>>2] = $2613;
 $2617 = (($2615) + 4)|0;
 $2618 = $2617;
 HEAP32[$2618>>2] = $2614;
 $2619 = $12;
 $2620 = $2619;
 $2621 = HEAP32[$2620>>2]|0;
 $2622 = (($2619) + 4)|0;
 $2623 = $2622;
 $2624 = HEAP32[$2623>>2]|0;
 $2625 = (_i64Add(($2621|0),($2624|0),1048576,0)|0);
 $2626 = tempRet0;
 $2627 = (_bitshift64Ashr(($2625|0),($2626|0),21)|0);
 $2628 = tempRet0;
 $2629 = $36;
 $2630 = $2629;
 HEAP32[$2630>>2] = $2627;
 $2631 = (($2629) + 4)|0;
 $2632 = $2631;
 HEAP32[$2632>>2] = $2628;
 $2633 = $36;
 $2634 = $2633;
 $2635 = HEAP32[$2634>>2]|0;
 $2636 = (($2633) + 4)|0;
 $2637 = $2636;
 $2638 = HEAP32[$2637>>2]|0;
 $2639 = $13;
 $2640 = $2639;
 $2641 = HEAP32[$2640>>2]|0;
 $2642 = (($2639) + 4)|0;
 $2643 = $2642;
 $2644 = HEAP32[$2643>>2]|0;
 $2645 = (_i64Add(($2641|0),($2644|0),($2635|0),($2638|0))|0);
 $2646 = tempRet0;
 $2647 = $13;
 $2648 = $2647;
 HEAP32[$2648>>2] = $2645;
 $2649 = (($2647) + 4)|0;
 $2650 = $2649;
 HEAP32[$2650>>2] = $2646;
 $2651 = $36;
 $2652 = $2651;
 $2653 = HEAP32[$2652>>2]|0;
 $2654 = (($2651) + 4)|0;
 $2655 = $2654;
 $2656 = HEAP32[$2655>>2]|0;
 $2657 = (_bitshift64Shl(($2653|0),($2656|0),21)|0);
 $2658 = tempRet0;
 $2659 = $12;
 $2660 = $2659;
 $2661 = HEAP32[$2660>>2]|0;
 $2662 = (($2659) + 4)|0;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (_i64Subtract(($2661|0),($2664|0),($2657|0),($2658|0))|0);
 $2666 = tempRet0;
 $2667 = $12;
 $2668 = $2667;
 HEAP32[$2668>>2] = $2665;
 $2669 = (($2667) + 4)|0;
 $2670 = $2669;
 HEAP32[$2670>>2] = $2666;
 $2671 = $3;
 $2672 = $2671;
 $2673 = HEAP32[$2672>>2]|0;
 $2674 = (($2671) + 4)|0;
 $2675 = $2674;
 $2676 = HEAP32[$2675>>2]|0;
 $2677 = (_i64Add(($2673|0),($2676|0),1048576,0)|0);
 $2678 = tempRet0;
 $2679 = (_bitshift64Ashr(($2677|0),($2678|0),21)|0);
 $2680 = tempRet0;
 $2681 = $27;
 $2682 = $2681;
 HEAP32[$2682>>2] = $2679;
 $2683 = (($2681) + 4)|0;
 $2684 = $2683;
 HEAP32[$2684>>2] = $2680;
 $2685 = $27;
 $2686 = $2685;
 $2687 = HEAP32[$2686>>2]|0;
 $2688 = (($2685) + 4)|0;
 $2689 = $2688;
 $2690 = HEAP32[$2689>>2]|0;
 $2691 = $4;
 $2692 = $2691;
 $2693 = HEAP32[$2692>>2]|0;
 $2694 = (($2691) + 4)|0;
 $2695 = $2694;
 $2696 = HEAP32[$2695>>2]|0;
 $2697 = (_i64Add(($2693|0),($2696|0),($2687|0),($2690|0))|0);
 $2698 = tempRet0;
 $2699 = $4;
 $2700 = $2699;
 HEAP32[$2700>>2] = $2697;
 $2701 = (($2699) + 4)|0;
 $2702 = $2701;
 HEAP32[$2702>>2] = $2698;
 $2703 = $27;
 $2704 = $2703;
 $2705 = HEAP32[$2704>>2]|0;
 $2706 = (($2703) + 4)|0;
 $2707 = $2706;
 $2708 = HEAP32[$2707>>2]|0;
 $2709 = (_bitshift64Shl(($2705|0),($2708|0),21)|0);
 $2710 = tempRet0;
 $2711 = $3;
 $2712 = $2711;
 $2713 = HEAP32[$2712>>2]|0;
 $2714 = (($2711) + 4)|0;
 $2715 = $2714;
 $2716 = HEAP32[$2715>>2]|0;
 $2717 = (_i64Subtract(($2713|0),($2716|0),($2709|0),($2710|0))|0);
 $2718 = tempRet0;
 $2719 = $3;
 $2720 = $2719;
 HEAP32[$2720>>2] = $2717;
 $2721 = (($2719) + 4)|0;
 $2722 = $2721;
 HEAP32[$2722>>2] = $2718;
 $2723 = $5;
 $2724 = $2723;
 $2725 = HEAP32[$2724>>2]|0;
 $2726 = (($2723) + 4)|0;
 $2727 = $2726;
 $2728 = HEAP32[$2727>>2]|0;
 $2729 = (_i64Add(($2725|0),($2728|0),1048576,0)|0);
 $2730 = tempRet0;
 $2731 = (_bitshift64Ashr(($2729|0),($2730|0),21)|0);
 $2732 = tempRet0;
 $2733 = $29;
 $2734 = $2733;
 HEAP32[$2734>>2] = $2731;
 $2735 = (($2733) + 4)|0;
 $2736 = $2735;
 HEAP32[$2736>>2] = $2732;
 $2737 = $29;
 $2738 = $2737;
 $2739 = HEAP32[$2738>>2]|0;
 $2740 = (($2737) + 4)|0;
 $2741 = $2740;
 $2742 = HEAP32[$2741>>2]|0;
 $2743 = $6;
 $2744 = $2743;
 $2745 = HEAP32[$2744>>2]|0;
 $2746 = (($2743) + 4)|0;
 $2747 = $2746;
 $2748 = HEAP32[$2747>>2]|0;
 $2749 = (_i64Add(($2745|0),($2748|0),($2739|0),($2742|0))|0);
 $2750 = tempRet0;
 $2751 = $6;
 $2752 = $2751;
 HEAP32[$2752>>2] = $2749;
 $2753 = (($2751) + 4)|0;
 $2754 = $2753;
 HEAP32[$2754>>2] = $2750;
 $2755 = $29;
 $2756 = $2755;
 $2757 = HEAP32[$2756>>2]|0;
 $2758 = (($2755) + 4)|0;
 $2759 = $2758;
 $2760 = HEAP32[$2759>>2]|0;
 $2761 = (_bitshift64Shl(($2757|0),($2760|0),21)|0);
 $2762 = tempRet0;
 $2763 = $5;
 $2764 = $2763;
 $2765 = HEAP32[$2764>>2]|0;
 $2766 = (($2763) + 4)|0;
 $2767 = $2766;
 $2768 = HEAP32[$2767>>2]|0;
 $2769 = (_i64Subtract(($2765|0),($2768|0),($2761|0),($2762|0))|0);
 $2770 = tempRet0;
 $2771 = $5;
 $2772 = $2771;
 HEAP32[$2772>>2] = $2769;
 $2773 = (($2771) + 4)|0;
 $2774 = $2773;
 HEAP32[$2774>>2] = $2770;
 $2775 = $7;
 $2776 = $2775;
 $2777 = HEAP32[$2776>>2]|0;
 $2778 = (($2775) + 4)|0;
 $2779 = $2778;
 $2780 = HEAP32[$2779>>2]|0;
 $2781 = (_i64Add(($2777|0),($2780|0),1048576,0)|0);
 $2782 = tempRet0;
 $2783 = (_bitshift64Ashr(($2781|0),($2782|0),21)|0);
 $2784 = tempRet0;
 $2785 = $31;
 $2786 = $2785;
 HEAP32[$2786>>2] = $2783;
 $2787 = (($2785) + 4)|0;
 $2788 = $2787;
 HEAP32[$2788>>2] = $2784;
 $2789 = $31;
 $2790 = $2789;
 $2791 = HEAP32[$2790>>2]|0;
 $2792 = (($2789) + 4)|0;
 $2793 = $2792;
 $2794 = HEAP32[$2793>>2]|0;
 $2795 = $8;
 $2796 = $2795;
 $2797 = HEAP32[$2796>>2]|0;
 $2798 = (($2795) + 4)|0;
 $2799 = $2798;
 $2800 = HEAP32[$2799>>2]|0;
 $2801 = (_i64Add(($2797|0),($2800|0),($2791|0),($2794|0))|0);
 $2802 = tempRet0;
 $2803 = $8;
 $2804 = $2803;
 HEAP32[$2804>>2] = $2801;
 $2805 = (($2803) + 4)|0;
 $2806 = $2805;
 HEAP32[$2806>>2] = $2802;
 $2807 = $31;
 $2808 = $2807;
 $2809 = HEAP32[$2808>>2]|0;
 $2810 = (($2807) + 4)|0;
 $2811 = $2810;
 $2812 = HEAP32[$2811>>2]|0;
 $2813 = (_bitshift64Shl(($2809|0),($2812|0),21)|0);
 $2814 = tempRet0;
 $2815 = $7;
 $2816 = $2815;
 $2817 = HEAP32[$2816>>2]|0;
 $2818 = (($2815) + 4)|0;
 $2819 = $2818;
 $2820 = HEAP32[$2819>>2]|0;
 $2821 = (_i64Subtract(($2817|0),($2820|0),($2813|0),($2814|0))|0);
 $2822 = tempRet0;
 $2823 = $7;
 $2824 = $2823;
 HEAP32[$2824>>2] = $2821;
 $2825 = (($2823) + 4)|0;
 $2826 = $2825;
 HEAP32[$2826>>2] = $2822;
 $2827 = $9;
 $2828 = $2827;
 $2829 = HEAP32[$2828>>2]|0;
 $2830 = (($2827) + 4)|0;
 $2831 = $2830;
 $2832 = HEAP32[$2831>>2]|0;
 $2833 = (_i64Add(($2829|0),($2832|0),1048576,0)|0);
 $2834 = tempRet0;
 $2835 = (_bitshift64Ashr(($2833|0),($2834|0),21)|0);
 $2836 = tempRet0;
 $2837 = $33;
 $2838 = $2837;
 HEAP32[$2838>>2] = $2835;
 $2839 = (($2837) + 4)|0;
 $2840 = $2839;
 HEAP32[$2840>>2] = $2836;
 $2841 = $33;
 $2842 = $2841;
 $2843 = HEAP32[$2842>>2]|0;
 $2844 = (($2841) + 4)|0;
 $2845 = $2844;
 $2846 = HEAP32[$2845>>2]|0;
 $2847 = $10;
 $2848 = $2847;
 $2849 = HEAP32[$2848>>2]|0;
 $2850 = (($2847) + 4)|0;
 $2851 = $2850;
 $2852 = HEAP32[$2851>>2]|0;
 $2853 = (_i64Add(($2849|0),($2852|0),($2843|0),($2846|0))|0);
 $2854 = tempRet0;
 $2855 = $10;
 $2856 = $2855;
 HEAP32[$2856>>2] = $2853;
 $2857 = (($2855) + 4)|0;
 $2858 = $2857;
 HEAP32[$2858>>2] = $2854;
 $2859 = $33;
 $2860 = $2859;
 $2861 = HEAP32[$2860>>2]|0;
 $2862 = (($2859) + 4)|0;
 $2863 = $2862;
 $2864 = HEAP32[$2863>>2]|0;
 $2865 = (_bitshift64Shl(($2861|0),($2864|0),21)|0);
 $2866 = tempRet0;
 $2867 = $9;
 $2868 = $2867;
 $2869 = HEAP32[$2868>>2]|0;
 $2870 = (($2867) + 4)|0;
 $2871 = $2870;
 $2872 = HEAP32[$2871>>2]|0;
 $2873 = (_i64Subtract(($2869|0),($2872|0),($2865|0),($2866|0))|0);
 $2874 = tempRet0;
 $2875 = $9;
 $2876 = $2875;
 HEAP32[$2876>>2] = $2873;
 $2877 = (($2875) + 4)|0;
 $2878 = $2877;
 HEAP32[$2878>>2] = $2874;
 $2879 = $11;
 $2880 = $2879;
 $2881 = HEAP32[$2880>>2]|0;
 $2882 = (($2879) + 4)|0;
 $2883 = $2882;
 $2884 = HEAP32[$2883>>2]|0;
 $2885 = (_i64Add(($2881|0),($2884|0),1048576,0)|0);
 $2886 = tempRet0;
 $2887 = (_bitshift64Ashr(($2885|0),($2886|0),21)|0);
 $2888 = tempRet0;
 $2889 = $35;
 $2890 = $2889;
 HEAP32[$2890>>2] = $2887;
 $2891 = (($2889) + 4)|0;
 $2892 = $2891;
 HEAP32[$2892>>2] = $2888;
 $2893 = $35;
 $2894 = $2893;
 $2895 = HEAP32[$2894>>2]|0;
 $2896 = (($2893) + 4)|0;
 $2897 = $2896;
 $2898 = HEAP32[$2897>>2]|0;
 $2899 = $12;
 $2900 = $2899;
 $2901 = HEAP32[$2900>>2]|0;
 $2902 = (($2899) + 4)|0;
 $2903 = $2902;
 $2904 = HEAP32[$2903>>2]|0;
 $2905 = (_i64Add(($2901|0),($2904|0),($2895|0),($2898|0))|0);
 $2906 = tempRet0;
 $2907 = $12;
 $2908 = $2907;
 HEAP32[$2908>>2] = $2905;
 $2909 = (($2907) + 4)|0;
 $2910 = $2909;
 HEAP32[$2910>>2] = $2906;
 $2911 = $35;
 $2912 = $2911;
 $2913 = HEAP32[$2912>>2]|0;
 $2914 = (($2911) + 4)|0;
 $2915 = $2914;
 $2916 = HEAP32[$2915>>2]|0;
 $2917 = (_bitshift64Shl(($2913|0),($2916|0),21)|0);
 $2918 = tempRet0;
 $2919 = $11;
 $2920 = $2919;
 $2921 = HEAP32[$2920>>2]|0;
 $2922 = (($2919) + 4)|0;
 $2923 = $2922;
 $2924 = HEAP32[$2923>>2]|0;
 $2925 = (_i64Subtract(($2921|0),($2924|0),($2917|0),($2918|0))|0);
 $2926 = tempRet0;
 $2927 = $11;
 $2928 = $2927;
 HEAP32[$2928>>2] = $2925;
 $2929 = (($2927) + 4)|0;
 $2930 = $2929;
 HEAP32[$2930>>2] = $2926;
 $2931 = $13;
 $2932 = $2931;
 $2933 = HEAP32[$2932>>2]|0;
 $2934 = (($2931) + 4)|0;
 $2935 = $2934;
 $2936 = HEAP32[$2935>>2]|0;
 $2937 = (_i64Add(($2933|0),($2936|0),1048576,0)|0);
 $2938 = tempRet0;
 $2939 = (_bitshift64Ashr(($2937|0),($2938|0),21)|0);
 $2940 = tempRet0;
 $2941 = $37;
 $2942 = $2941;
 HEAP32[$2942>>2] = $2939;
 $2943 = (($2941) + 4)|0;
 $2944 = $2943;
 HEAP32[$2944>>2] = $2940;
 $2945 = $37;
 $2946 = $2945;
 $2947 = HEAP32[$2946>>2]|0;
 $2948 = (($2945) + 4)|0;
 $2949 = $2948;
 $2950 = HEAP32[$2949>>2]|0;
 $2951 = $14;
 $2952 = $2951;
 $2953 = HEAP32[$2952>>2]|0;
 $2954 = (($2951) + 4)|0;
 $2955 = $2954;
 $2956 = HEAP32[$2955>>2]|0;
 $2957 = (_i64Add(($2953|0),($2956|0),($2947|0),($2950|0))|0);
 $2958 = tempRet0;
 $2959 = $14;
 $2960 = $2959;
 HEAP32[$2960>>2] = $2957;
 $2961 = (($2959) + 4)|0;
 $2962 = $2961;
 HEAP32[$2962>>2] = $2958;
 $2963 = $37;
 $2964 = $2963;
 $2965 = HEAP32[$2964>>2]|0;
 $2966 = (($2963) + 4)|0;
 $2967 = $2966;
 $2968 = HEAP32[$2967>>2]|0;
 $2969 = (_bitshift64Shl(($2965|0),($2968|0),21)|0);
 $2970 = tempRet0;
 $2971 = $13;
 $2972 = $2971;
 $2973 = HEAP32[$2972>>2]|0;
 $2974 = (($2971) + 4)|0;
 $2975 = $2974;
 $2976 = HEAP32[$2975>>2]|0;
 $2977 = (_i64Subtract(($2973|0),($2976|0),($2969|0),($2970|0))|0);
 $2978 = tempRet0;
 $2979 = $13;
 $2980 = $2979;
 HEAP32[$2980>>2] = $2977;
 $2981 = (($2979) + 4)|0;
 $2982 = $2981;
 HEAP32[$2982>>2] = $2978;
 $2983 = $14;
 $2984 = $2983;
 $2985 = HEAP32[$2984>>2]|0;
 $2986 = (($2983) + 4)|0;
 $2987 = $2986;
 $2988 = HEAP32[$2987>>2]|0;
 $2989 = (___muldi3(($2985|0),($2988|0),666643,0)|0);
 $2990 = tempRet0;
 $2991 = $2;
 $2992 = $2991;
 $2993 = HEAP32[$2992>>2]|0;
 $2994 = (($2991) + 4)|0;
 $2995 = $2994;
 $2996 = HEAP32[$2995>>2]|0;
 $2997 = (_i64Add(($2993|0),($2996|0),($2989|0),($2990|0))|0);
 $2998 = tempRet0;
 $2999 = $2;
 $3000 = $2999;
 HEAP32[$3000>>2] = $2997;
 $3001 = (($2999) + 4)|0;
 $3002 = $3001;
 HEAP32[$3002>>2] = $2998;
 $3003 = $14;
 $3004 = $3003;
 $3005 = HEAP32[$3004>>2]|0;
 $3006 = (($3003) + 4)|0;
 $3007 = $3006;
 $3008 = HEAP32[$3007>>2]|0;
 $3009 = (___muldi3(($3005|0),($3008|0),470296,0)|0);
 $3010 = tempRet0;
 $3011 = $3;
 $3012 = $3011;
 $3013 = HEAP32[$3012>>2]|0;
 $3014 = (($3011) + 4)|0;
 $3015 = $3014;
 $3016 = HEAP32[$3015>>2]|0;
 $3017 = (_i64Add(($3013|0),($3016|0),($3009|0),($3010|0))|0);
 $3018 = tempRet0;
 $3019 = $3;
 $3020 = $3019;
 HEAP32[$3020>>2] = $3017;
 $3021 = (($3019) + 4)|0;
 $3022 = $3021;
 HEAP32[$3022>>2] = $3018;
 $3023 = $14;
 $3024 = $3023;
 $3025 = HEAP32[$3024>>2]|0;
 $3026 = (($3023) + 4)|0;
 $3027 = $3026;
 $3028 = HEAP32[$3027>>2]|0;
 $3029 = (___muldi3(($3025|0),($3028|0),654183,0)|0);
 $3030 = tempRet0;
 $3031 = $4;
 $3032 = $3031;
 $3033 = HEAP32[$3032>>2]|0;
 $3034 = (($3031) + 4)|0;
 $3035 = $3034;
 $3036 = HEAP32[$3035>>2]|0;
 $3037 = (_i64Add(($3033|0),($3036|0),($3029|0),($3030|0))|0);
 $3038 = tempRet0;
 $3039 = $4;
 $3040 = $3039;
 HEAP32[$3040>>2] = $3037;
 $3041 = (($3039) + 4)|0;
 $3042 = $3041;
 HEAP32[$3042>>2] = $3038;
 $3043 = $14;
 $3044 = $3043;
 $3045 = HEAP32[$3044>>2]|0;
 $3046 = (($3043) + 4)|0;
 $3047 = $3046;
 $3048 = HEAP32[$3047>>2]|0;
 $3049 = (___muldi3(($3045|0),($3048|0),997805,0)|0);
 $3050 = tempRet0;
 $3051 = $5;
 $3052 = $3051;
 $3053 = HEAP32[$3052>>2]|0;
 $3054 = (($3051) + 4)|0;
 $3055 = $3054;
 $3056 = HEAP32[$3055>>2]|0;
 $3057 = (_i64Subtract(($3053|0),($3056|0),($3049|0),($3050|0))|0);
 $3058 = tempRet0;
 $3059 = $5;
 $3060 = $3059;
 HEAP32[$3060>>2] = $3057;
 $3061 = (($3059) + 4)|0;
 $3062 = $3061;
 HEAP32[$3062>>2] = $3058;
 $3063 = $14;
 $3064 = $3063;
 $3065 = HEAP32[$3064>>2]|0;
 $3066 = (($3063) + 4)|0;
 $3067 = $3066;
 $3068 = HEAP32[$3067>>2]|0;
 $3069 = (___muldi3(($3065|0),($3068|0),136657,0)|0);
 $3070 = tempRet0;
 $3071 = $6;
 $3072 = $3071;
 $3073 = HEAP32[$3072>>2]|0;
 $3074 = (($3071) + 4)|0;
 $3075 = $3074;
 $3076 = HEAP32[$3075>>2]|0;
 $3077 = (_i64Add(($3073|0),($3076|0),($3069|0),($3070|0))|0);
 $3078 = tempRet0;
 $3079 = $6;
 $3080 = $3079;
 HEAP32[$3080>>2] = $3077;
 $3081 = (($3079) + 4)|0;
 $3082 = $3081;
 HEAP32[$3082>>2] = $3078;
 $3083 = $14;
 $3084 = $3083;
 $3085 = HEAP32[$3084>>2]|0;
 $3086 = (($3083) + 4)|0;
 $3087 = $3086;
 $3088 = HEAP32[$3087>>2]|0;
 $3089 = (___muldi3(($3085|0),($3088|0),683901,0)|0);
 $3090 = tempRet0;
 $3091 = $7;
 $3092 = $3091;
 $3093 = HEAP32[$3092>>2]|0;
 $3094 = (($3091) + 4)|0;
 $3095 = $3094;
 $3096 = HEAP32[$3095>>2]|0;
 $3097 = (_i64Subtract(($3093|0),($3096|0),($3089|0),($3090|0))|0);
 $3098 = tempRet0;
 $3099 = $7;
 $3100 = $3099;
 HEAP32[$3100>>2] = $3097;
 $3101 = (($3099) + 4)|0;
 $3102 = $3101;
 HEAP32[$3102>>2] = $3098;
 $3103 = $14;
 $3104 = $3103;
 HEAP32[$3104>>2] = 0;
 $3105 = (($3103) + 4)|0;
 $3106 = $3105;
 HEAP32[$3106>>2] = 0;
 $3107 = $2;
 $3108 = $3107;
 $3109 = HEAP32[$3108>>2]|0;
 $3110 = (($3107) + 4)|0;
 $3111 = $3110;
 $3112 = HEAP32[$3111>>2]|0;
 $3113 = (_bitshift64Ashr(($3109|0),($3112|0),21)|0);
 $3114 = tempRet0;
 $3115 = $26;
 $3116 = $3115;
 HEAP32[$3116>>2] = $3113;
 $3117 = (($3115) + 4)|0;
 $3118 = $3117;
 HEAP32[$3118>>2] = $3114;
 $3119 = $26;
 $3120 = $3119;
 $3121 = HEAP32[$3120>>2]|0;
 $3122 = (($3119) + 4)|0;
 $3123 = $3122;
 $3124 = HEAP32[$3123>>2]|0;
 $3125 = $3;
 $3126 = $3125;
 $3127 = HEAP32[$3126>>2]|0;
 $3128 = (($3125) + 4)|0;
 $3129 = $3128;
 $3130 = HEAP32[$3129>>2]|0;
 $3131 = (_i64Add(($3127|0),($3130|0),($3121|0),($3124|0))|0);
 $3132 = tempRet0;
 $3133 = $3;
 $3134 = $3133;
 HEAP32[$3134>>2] = $3131;
 $3135 = (($3133) + 4)|0;
 $3136 = $3135;
 HEAP32[$3136>>2] = $3132;
 $3137 = $26;
 $3138 = $3137;
 $3139 = HEAP32[$3138>>2]|0;
 $3140 = (($3137) + 4)|0;
 $3141 = $3140;
 $3142 = HEAP32[$3141>>2]|0;
 $3143 = (_bitshift64Shl(($3139|0),($3142|0),21)|0);
 $3144 = tempRet0;
 $3145 = $2;
 $3146 = $3145;
 $3147 = HEAP32[$3146>>2]|0;
 $3148 = (($3145) + 4)|0;
 $3149 = $3148;
 $3150 = HEAP32[$3149>>2]|0;
 $3151 = (_i64Subtract(($3147|0),($3150|0),($3143|0),($3144|0))|0);
 $3152 = tempRet0;
 $3153 = $2;
 $3154 = $3153;
 HEAP32[$3154>>2] = $3151;
 $3155 = (($3153) + 4)|0;
 $3156 = $3155;
 HEAP32[$3156>>2] = $3152;
 $3157 = $3;
 $3158 = $3157;
 $3159 = HEAP32[$3158>>2]|0;
 $3160 = (($3157) + 4)|0;
 $3161 = $3160;
 $3162 = HEAP32[$3161>>2]|0;
 $3163 = (_bitshift64Ashr(($3159|0),($3162|0),21)|0);
 $3164 = tempRet0;
 $3165 = $27;
 $3166 = $3165;
 HEAP32[$3166>>2] = $3163;
 $3167 = (($3165) + 4)|0;
 $3168 = $3167;
 HEAP32[$3168>>2] = $3164;
 $3169 = $27;
 $3170 = $3169;
 $3171 = HEAP32[$3170>>2]|0;
 $3172 = (($3169) + 4)|0;
 $3173 = $3172;
 $3174 = HEAP32[$3173>>2]|0;
 $3175 = $4;
 $3176 = $3175;
 $3177 = HEAP32[$3176>>2]|0;
 $3178 = (($3175) + 4)|0;
 $3179 = $3178;
 $3180 = HEAP32[$3179>>2]|0;
 $3181 = (_i64Add(($3177|0),($3180|0),($3171|0),($3174|0))|0);
 $3182 = tempRet0;
 $3183 = $4;
 $3184 = $3183;
 HEAP32[$3184>>2] = $3181;
 $3185 = (($3183) + 4)|0;
 $3186 = $3185;
 HEAP32[$3186>>2] = $3182;
 $3187 = $27;
 $3188 = $3187;
 $3189 = HEAP32[$3188>>2]|0;
 $3190 = (($3187) + 4)|0;
 $3191 = $3190;
 $3192 = HEAP32[$3191>>2]|0;
 $3193 = (_bitshift64Shl(($3189|0),($3192|0),21)|0);
 $3194 = tempRet0;
 $3195 = $3;
 $3196 = $3195;
 $3197 = HEAP32[$3196>>2]|0;
 $3198 = (($3195) + 4)|0;
 $3199 = $3198;
 $3200 = HEAP32[$3199>>2]|0;
 $3201 = (_i64Subtract(($3197|0),($3200|0),($3193|0),($3194|0))|0);
 $3202 = tempRet0;
 $3203 = $3;
 $3204 = $3203;
 HEAP32[$3204>>2] = $3201;
 $3205 = (($3203) + 4)|0;
 $3206 = $3205;
 HEAP32[$3206>>2] = $3202;
 $3207 = $4;
 $3208 = $3207;
 $3209 = HEAP32[$3208>>2]|0;
 $3210 = (($3207) + 4)|0;
 $3211 = $3210;
 $3212 = HEAP32[$3211>>2]|0;
 $3213 = (_bitshift64Ashr(($3209|0),($3212|0),21)|0);
 $3214 = tempRet0;
 $3215 = $28;
 $3216 = $3215;
 HEAP32[$3216>>2] = $3213;
 $3217 = (($3215) + 4)|0;
 $3218 = $3217;
 HEAP32[$3218>>2] = $3214;
 $3219 = $28;
 $3220 = $3219;
 $3221 = HEAP32[$3220>>2]|0;
 $3222 = (($3219) + 4)|0;
 $3223 = $3222;
 $3224 = HEAP32[$3223>>2]|0;
 $3225 = $5;
 $3226 = $3225;
 $3227 = HEAP32[$3226>>2]|0;
 $3228 = (($3225) + 4)|0;
 $3229 = $3228;
 $3230 = HEAP32[$3229>>2]|0;
 $3231 = (_i64Add(($3227|0),($3230|0),($3221|0),($3224|0))|0);
 $3232 = tempRet0;
 $3233 = $5;
 $3234 = $3233;
 HEAP32[$3234>>2] = $3231;
 $3235 = (($3233) + 4)|0;
 $3236 = $3235;
 HEAP32[$3236>>2] = $3232;
 $3237 = $28;
 $3238 = $3237;
 $3239 = HEAP32[$3238>>2]|0;
 $3240 = (($3237) + 4)|0;
 $3241 = $3240;
 $3242 = HEAP32[$3241>>2]|0;
 $3243 = (_bitshift64Shl(($3239|0),($3242|0),21)|0);
 $3244 = tempRet0;
 $3245 = $4;
 $3246 = $3245;
 $3247 = HEAP32[$3246>>2]|0;
 $3248 = (($3245) + 4)|0;
 $3249 = $3248;
 $3250 = HEAP32[$3249>>2]|0;
 $3251 = (_i64Subtract(($3247|0),($3250|0),($3243|0),($3244|0))|0);
 $3252 = tempRet0;
 $3253 = $4;
 $3254 = $3253;
 HEAP32[$3254>>2] = $3251;
 $3255 = (($3253) + 4)|0;
 $3256 = $3255;
 HEAP32[$3256>>2] = $3252;
 $3257 = $5;
 $3258 = $3257;
 $3259 = HEAP32[$3258>>2]|0;
 $3260 = (($3257) + 4)|0;
 $3261 = $3260;
 $3262 = HEAP32[$3261>>2]|0;
 $3263 = (_bitshift64Ashr(($3259|0),($3262|0),21)|0);
 $3264 = tempRet0;
 $3265 = $29;
 $3266 = $3265;
 HEAP32[$3266>>2] = $3263;
 $3267 = (($3265) + 4)|0;
 $3268 = $3267;
 HEAP32[$3268>>2] = $3264;
 $3269 = $29;
 $3270 = $3269;
 $3271 = HEAP32[$3270>>2]|0;
 $3272 = (($3269) + 4)|0;
 $3273 = $3272;
 $3274 = HEAP32[$3273>>2]|0;
 $3275 = $6;
 $3276 = $3275;
 $3277 = HEAP32[$3276>>2]|0;
 $3278 = (($3275) + 4)|0;
 $3279 = $3278;
 $3280 = HEAP32[$3279>>2]|0;
 $3281 = (_i64Add(($3277|0),($3280|0),($3271|0),($3274|0))|0);
 $3282 = tempRet0;
 $3283 = $6;
 $3284 = $3283;
 HEAP32[$3284>>2] = $3281;
 $3285 = (($3283) + 4)|0;
 $3286 = $3285;
 HEAP32[$3286>>2] = $3282;
 $3287 = $29;
 $3288 = $3287;
 $3289 = HEAP32[$3288>>2]|0;
 $3290 = (($3287) + 4)|0;
 $3291 = $3290;
 $3292 = HEAP32[$3291>>2]|0;
 $3293 = (_bitshift64Shl(($3289|0),($3292|0),21)|0);
 $3294 = tempRet0;
 $3295 = $5;
 $3296 = $3295;
 $3297 = HEAP32[$3296>>2]|0;
 $3298 = (($3295) + 4)|0;
 $3299 = $3298;
 $3300 = HEAP32[$3299>>2]|0;
 $3301 = (_i64Subtract(($3297|0),($3300|0),($3293|0),($3294|0))|0);
 $3302 = tempRet0;
 $3303 = $5;
 $3304 = $3303;
 HEAP32[$3304>>2] = $3301;
 $3305 = (($3303) + 4)|0;
 $3306 = $3305;
 HEAP32[$3306>>2] = $3302;
 $3307 = $6;
 $3308 = $3307;
 $3309 = HEAP32[$3308>>2]|0;
 $3310 = (($3307) + 4)|0;
 $3311 = $3310;
 $3312 = HEAP32[$3311>>2]|0;
 $3313 = (_bitshift64Ashr(($3309|0),($3312|0),21)|0);
 $3314 = tempRet0;
 $3315 = $30;
 $3316 = $3315;
 HEAP32[$3316>>2] = $3313;
 $3317 = (($3315) + 4)|0;
 $3318 = $3317;
 HEAP32[$3318>>2] = $3314;
 $3319 = $30;
 $3320 = $3319;
 $3321 = HEAP32[$3320>>2]|0;
 $3322 = (($3319) + 4)|0;
 $3323 = $3322;
 $3324 = HEAP32[$3323>>2]|0;
 $3325 = $7;
 $3326 = $3325;
 $3327 = HEAP32[$3326>>2]|0;
 $3328 = (($3325) + 4)|0;
 $3329 = $3328;
 $3330 = HEAP32[$3329>>2]|0;
 $3331 = (_i64Add(($3327|0),($3330|0),($3321|0),($3324|0))|0);
 $3332 = tempRet0;
 $3333 = $7;
 $3334 = $3333;
 HEAP32[$3334>>2] = $3331;
 $3335 = (($3333) + 4)|0;
 $3336 = $3335;
 HEAP32[$3336>>2] = $3332;
 $3337 = $30;
 $3338 = $3337;
 $3339 = HEAP32[$3338>>2]|0;
 $3340 = (($3337) + 4)|0;
 $3341 = $3340;
 $3342 = HEAP32[$3341>>2]|0;
 $3343 = (_bitshift64Shl(($3339|0),($3342|0),21)|0);
 $3344 = tempRet0;
 $3345 = $6;
 $3346 = $3345;
 $3347 = HEAP32[$3346>>2]|0;
 $3348 = (($3345) + 4)|0;
 $3349 = $3348;
 $3350 = HEAP32[$3349>>2]|0;
 $3351 = (_i64Subtract(($3347|0),($3350|0),($3343|0),($3344|0))|0);
 $3352 = tempRet0;
 $3353 = $6;
 $3354 = $3353;
 HEAP32[$3354>>2] = $3351;
 $3355 = (($3353) + 4)|0;
 $3356 = $3355;
 HEAP32[$3356>>2] = $3352;
 $3357 = $7;
 $3358 = $3357;
 $3359 = HEAP32[$3358>>2]|0;
 $3360 = (($3357) + 4)|0;
 $3361 = $3360;
 $3362 = HEAP32[$3361>>2]|0;
 $3363 = (_bitshift64Ashr(($3359|0),($3362|0),21)|0);
 $3364 = tempRet0;
 $3365 = $31;
 $3366 = $3365;
 HEAP32[$3366>>2] = $3363;
 $3367 = (($3365) + 4)|0;
 $3368 = $3367;
 HEAP32[$3368>>2] = $3364;
 $3369 = $31;
 $3370 = $3369;
 $3371 = HEAP32[$3370>>2]|0;
 $3372 = (($3369) + 4)|0;
 $3373 = $3372;
 $3374 = HEAP32[$3373>>2]|0;
 $3375 = $8;
 $3376 = $3375;
 $3377 = HEAP32[$3376>>2]|0;
 $3378 = (($3375) + 4)|0;
 $3379 = $3378;
 $3380 = HEAP32[$3379>>2]|0;
 $3381 = (_i64Add(($3377|0),($3380|0),($3371|0),($3374|0))|0);
 $3382 = tempRet0;
 $3383 = $8;
 $3384 = $3383;
 HEAP32[$3384>>2] = $3381;
 $3385 = (($3383) + 4)|0;
 $3386 = $3385;
 HEAP32[$3386>>2] = $3382;
 $3387 = $31;
 $3388 = $3387;
 $3389 = HEAP32[$3388>>2]|0;
 $3390 = (($3387) + 4)|0;
 $3391 = $3390;
 $3392 = HEAP32[$3391>>2]|0;
 $3393 = (_bitshift64Shl(($3389|0),($3392|0),21)|0);
 $3394 = tempRet0;
 $3395 = $7;
 $3396 = $3395;
 $3397 = HEAP32[$3396>>2]|0;
 $3398 = (($3395) + 4)|0;
 $3399 = $3398;
 $3400 = HEAP32[$3399>>2]|0;
 $3401 = (_i64Subtract(($3397|0),($3400|0),($3393|0),($3394|0))|0);
 $3402 = tempRet0;
 $3403 = $7;
 $3404 = $3403;
 HEAP32[$3404>>2] = $3401;
 $3405 = (($3403) + 4)|0;
 $3406 = $3405;
 HEAP32[$3406>>2] = $3402;
 $3407 = $8;
 $3408 = $3407;
 $3409 = HEAP32[$3408>>2]|0;
 $3410 = (($3407) + 4)|0;
 $3411 = $3410;
 $3412 = HEAP32[$3411>>2]|0;
 $3413 = (_bitshift64Ashr(($3409|0),($3412|0),21)|0);
 $3414 = tempRet0;
 $3415 = $32;
 $3416 = $3415;
 HEAP32[$3416>>2] = $3413;
 $3417 = (($3415) + 4)|0;
 $3418 = $3417;
 HEAP32[$3418>>2] = $3414;
 $3419 = $32;
 $3420 = $3419;
 $3421 = HEAP32[$3420>>2]|0;
 $3422 = (($3419) + 4)|0;
 $3423 = $3422;
 $3424 = HEAP32[$3423>>2]|0;
 $3425 = $9;
 $3426 = $3425;
 $3427 = HEAP32[$3426>>2]|0;
 $3428 = (($3425) + 4)|0;
 $3429 = $3428;
 $3430 = HEAP32[$3429>>2]|0;
 $3431 = (_i64Add(($3427|0),($3430|0),($3421|0),($3424|0))|0);
 $3432 = tempRet0;
 $3433 = $9;
 $3434 = $3433;
 HEAP32[$3434>>2] = $3431;
 $3435 = (($3433) + 4)|0;
 $3436 = $3435;
 HEAP32[$3436>>2] = $3432;
 $3437 = $32;
 $3438 = $3437;
 $3439 = HEAP32[$3438>>2]|0;
 $3440 = (($3437) + 4)|0;
 $3441 = $3440;
 $3442 = HEAP32[$3441>>2]|0;
 $3443 = (_bitshift64Shl(($3439|0),($3442|0),21)|0);
 $3444 = tempRet0;
 $3445 = $8;
 $3446 = $3445;
 $3447 = HEAP32[$3446>>2]|0;
 $3448 = (($3445) + 4)|0;
 $3449 = $3448;
 $3450 = HEAP32[$3449>>2]|0;
 $3451 = (_i64Subtract(($3447|0),($3450|0),($3443|0),($3444|0))|0);
 $3452 = tempRet0;
 $3453 = $8;
 $3454 = $3453;
 HEAP32[$3454>>2] = $3451;
 $3455 = (($3453) + 4)|0;
 $3456 = $3455;
 HEAP32[$3456>>2] = $3452;
 $3457 = $9;
 $3458 = $3457;
 $3459 = HEAP32[$3458>>2]|0;
 $3460 = (($3457) + 4)|0;
 $3461 = $3460;
 $3462 = HEAP32[$3461>>2]|0;
 $3463 = (_bitshift64Ashr(($3459|0),($3462|0),21)|0);
 $3464 = tempRet0;
 $3465 = $33;
 $3466 = $3465;
 HEAP32[$3466>>2] = $3463;
 $3467 = (($3465) + 4)|0;
 $3468 = $3467;
 HEAP32[$3468>>2] = $3464;
 $3469 = $33;
 $3470 = $3469;
 $3471 = HEAP32[$3470>>2]|0;
 $3472 = (($3469) + 4)|0;
 $3473 = $3472;
 $3474 = HEAP32[$3473>>2]|0;
 $3475 = $10;
 $3476 = $3475;
 $3477 = HEAP32[$3476>>2]|0;
 $3478 = (($3475) + 4)|0;
 $3479 = $3478;
 $3480 = HEAP32[$3479>>2]|0;
 $3481 = (_i64Add(($3477|0),($3480|0),($3471|0),($3474|0))|0);
 $3482 = tempRet0;
 $3483 = $10;
 $3484 = $3483;
 HEAP32[$3484>>2] = $3481;
 $3485 = (($3483) + 4)|0;
 $3486 = $3485;
 HEAP32[$3486>>2] = $3482;
 $3487 = $33;
 $3488 = $3487;
 $3489 = HEAP32[$3488>>2]|0;
 $3490 = (($3487) + 4)|0;
 $3491 = $3490;
 $3492 = HEAP32[$3491>>2]|0;
 $3493 = (_bitshift64Shl(($3489|0),($3492|0),21)|0);
 $3494 = tempRet0;
 $3495 = $9;
 $3496 = $3495;
 $3497 = HEAP32[$3496>>2]|0;
 $3498 = (($3495) + 4)|0;
 $3499 = $3498;
 $3500 = HEAP32[$3499>>2]|0;
 $3501 = (_i64Subtract(($3497|0),($3500|0),($3493|0),($3494|0))|0);
 $3502 = tempRet0;
 $3503 = $9;
 $3504 = $3503;
 HEAP32[$3504>>2] = $3501;
 $3505 = (($3503) + 4)|0;
 $3506 = $3505;
 HEAP32[$3506>>2] = $3502;
 $3507 = $10;
 $3508 = $3507;
 $3509 = HEAP32[$3508>>2]|0;
 $3510 = (($3507) + 4)|0;
 $3511 = $3510;
 $3512 = HEAP32[$3511>>2]|0;
 $3513 = (_bitshift64Ashr(($3509|0),($3512|0),21)|0);
 $3514 = tempRet0;
 $3515 = $34;
 $3516 = $3515;
 HEAP32[$3516>>2] = $3513;
 $3517 = (($3515) + 4)|0;
 $3518 = $3517;
 HEAP32[$3518>>2] = $3514;
 $3519 = $34;
 $3520 = $3519;
 $3521 = HEAP32[$3520>>2]|0;
 $3522 = (($3519) + 4)|0;
 $3523 = $3522;
 $3524 = HEAP32[$3523>>2]|0;
 $3525 = $11;
 $3526 = $3525;
 $3527 = HEAP32[$3526>>2]|0;
 $3528 = (($3525) + 4)|0;
 $3529 = $3528;
 $3530 = HEAP32[$3529>>2]|0;
 $3531 = (_i64Add(($3527|0),($3530|0),($3521|0),($3524|0))|0);
 $3532 = tempRet0;
 $3533 = $11;
 $3534 = $3533;
 HEAP32[$3534>>2] = $3531;
 $3535 = (($3533) + 4)|0;
 $3536 = $3535;
 HEAP32[$3536>>2] = $3532;
 $3537 = $34;
 $3538 = $3537;
 $3539 = HEAP32[$3538>>2]|0;
 $3540 = (($3537) + 4)|0;
 $3541 = $3540;
 $3542 = HEAP32[$3541>>2]|0;
 $3543 = (_bitshift64Shl(($3539|0),($3542|0),21)|0);
 $3544 = tempRet0;
 $3545 = $10;
 $3546 = $3545;
 $3547 = HEAP32[$3546>>2]|0;
 $3548 = (($3545) + 4)|0;
 $3549 = $3548;
 $3550 = HEAP32[$3549>>2]|0;
 $3551 = (_i64Subtract(($3547|0),($3550|0),($3543|0),($3544|0))|0);
 $3552 = tempRet0;
 $3553 = $10;
 $3554 = $3553;
 HEAP32[$3554>>2] = $3551;
 $3555 = (($3553) + 4)|0;
 $3556 = $3555;
 HEAP32[$3556>>2] = $3552;
 $3557 = $11;
 $3558 = $3557;
 $3559 = HEAP32[$3558>>2]|0;
 $3560 = (($3557) + 4)|0;
 $3561 = $3560;
 $3562 = HEAP32[$3561>>2]|0;
 $3563 = (_bitshift64Ashr(($3559|0),($3562|0),21)|0);
 $3564 = tempRet0;
 $3565 = $35;
 $3566 = $3565;
 HEAP32[$3566>>2] = $3563;
 $3567 = (($3565) + 4)|0;
 $3568 = $3567;
 HEAP32[$3568>>2] = $3564;
 $3569 = $35;
 $3570 = $3569;
 $3571 = HEAP32[$3570>>2]|0;
 $3572 = (($3569) + 4)|0;
 $3573 = $3572;
 $3574 = HEAP32[$3573>>2]|0;
 $3575 = $12;
 $3576 = $3575;
 $3577 = HEAP32[$3576>>2]|0;
 $3578 = (($3575) + 4)|0;
 $3579 = $3578;
 $3580 = HEAP32[$3579>>2]|0;
 $3581 = (_i64Add(($3577|0),($3580|0),($3571|0),($3574|0))|0);
 $3582 = tempRet0;
 $3583 = $12;
 $3584 = $3583;
 HEAP32[$3584>>2] = $3581;
 $3585 = (($3583) + 4)|0;
 $3586 = $3585;
 HEAP32[$3586>>2] = $3582;
 $3587 = $35;
 $3588 = $3587;
 $3589 = HEAP32[$3588>>2]|0;
 $3590 = (($3587) + 4)|0;
 $3591 = $3590;
 $3592 = HEAP32[$3591>>2]|0;
 $3593 = (_bitshift64Shl(($3589|0),($3592|0),21)|0);
 $3594 = tempRet0;
 $3595 = $11;
 $3596 = $3595;
 $3597 = HEAP32[$3596>>2]|0;
 $3598 = (($3595) + 4)|0;
 $3599 = $3598;
 $3600 = HEAP32[$3599>>2]|0;
 $3601 = (_i64Subtract(($3597|0),($3600|0),($3593|0),($3594|0))|0);
 $3602 = tempRet0;
 $3603 = $11;
 $3604 = $3603;
 HEAP32[$3604>>2] = $3601;
 $3605 = (($3603) + 4)|0;
 $3606 = $3605;
 HEAP32[$3606>>2] = $3602;
 $3607 = $12;
 $3608 = $3607;
 $3609 = HEAP32[$3608>>2]|0;
 $3610 = (($3607) + 4)|0;
 $3611 = $3610;
 $3612 = HEAP32[$3611>>2]|0;
 $3613 = (_bitshift64Ashr(($3609|0),($3612|0),21)|0);
 $3614 = tempRet0;
 $3615 = $36;
 $3616 = $3615;
 HEAP32[$3616>>2] = $3613;
 $3617 = (($3615) + 4)|0;
 $3618 = $3617;
 HEAP32[$3618>>2] = $3614;
 $3619 = $36;
 $3620 = $3619;
 $3621 = HEAP32[$3620>>2]|0;
 $3622 = (($3619) + 4)|0;
 $3623 = $3622;
 $3624 = HEAP32[$3623>>2]|0;
 $3625 = $13;
 $3626 = $3625;
 $3627 = HEAP32[$3626>>2]|0;
 $3628 = (($3625) + 4)|0;
 $3629 = $3628;
 $3630 = HEAP32[$3629>>2]|0;
 $3631 = (_i64Add(($3627|0),($3630|0),($3621|0),($3624|0))|0);
 $3632 = tempRet0;
 $3633 = $13;
 $3634 = $3633;
 HEAP32[$3634>>2] = $3631;
 $3635 = (($3633) + 4)|0;
 $3636 = $3635;
 HEAP32[$3636>>2] = $3632;
 $3637 = $36;
 $3638 = $3637;
 $3639 = HEAP32[$3638>>2]|0;
 $3640 = (($3637) + 4)|0;
 $3641 = $3640;
 $3642 = HEAP32[$3641>>2]|0;
 $3643 = (_bitshift64Shl(($3639|0),($3642|0),21)|0);
 $3644 = tempRet0;
 $3645 = $12;
 $3646 = $3645;
 $3647 = HEAP32[$3646>>2]|0;
 $3648 = (($3645) + 4)|0;
 $3649 = $3648;
 $3650 = HEAP32[$3649>>2]|0;
 $3651 = (_i64Subtract(($3647|0),($3650|0),($3643|0),($3644|0))|0);
 $3652 = tempRet0;
 $3653 = $12;
 $3654 = $3653;
 HEAP32[$3654>>2] = $3651;
 $3655 = (($3653) + 4)|0;
 $3656 = $3655;
 HEAP32[$3656>>2] = $3652;
 $3657 = $13;
 $3658 = $3657;
 $3659 = HEAP32[$3658>>2]|0;
 $3660 = (($3657) + 4)|0;
 $3661 = $3660;
 $3662 = HEAP32[$3661>>2]|0;
 $3663 = (_bitshift64Ashr(($3659|0),($3662|0),21)|0);
 $3664 = tempRet0;
 $3665 = $37;
 $3666 = $3665;
 HEAP32[$3666>>2] = $3663;
 $3667 = (($3665) + 4)|0;
 $3668 = $3667;
 HEAP32[$3668>>2] = $3664;
 $3669 = $37;
 $3670 = $3669;
 $3671 = HEAP32[$3670>>2]|0;
 $3672 = (($3669) + 4)|0;
 $3673 = $3672;
 $3674 = HEAP32[$3673>>2]|0;
 $3675 = $14;
 $3676 = $3675;
 $3677 = HEAP32[$3676>>2]|0;
 $3678 = (($3675) + 4)|0;
 $3679 = $3678;
 $3680 = HEAP32[$3679>>2]|0;
 $3681 = (_i64Add(($3677|0),($3680|0),($3671|0),($3674|0))|0);
 $3682 = tempRet0;
 $3683 = $14;
 $3684 = $3683;
 HEAP32[$3684>>2] = $3681;
 $3685 = (($3683) + 4)|0;
 $3686 = $3685;
 HEAP32[$3686>>2] = $3682;
 $3687 = $37;
 $3688 = $3687;
 $3689 = HEAP32[$3688>>2]|0;
 $3690 = (($3687) + 4)|0;
 $3691 = $3690;
 $3692 = HEAP32[$3691>>2]|0;
 $3693 = (_bitshift64Shl(($3689|0),($3692|0),21)|0);
 $3694 = tempRet0;
 $3695 = $13;
 $3696 = $3695;
 $3697 = HEAP32[$3696>>2]|0;
 $3698 = (($3695) + 4)|0;
 $3699 = $3698;
 $3700 = HEAP32[$3699>>2]|0;
 $3701 = (_i64Subtract(($3697|0),($3700|0),($3693|0),($3694|0))|0);
 $3702 = tempRet0;
 $3703 = $13;
 $3704 = $3703;
 HEAP32[$3704>>2] = $3701;
 $3705 = (($3703) + 4)|0;
 $3706 = $3705;
 HEAP32[$3706>>2] = $3702;
 $3707 = $14;
 $3708 = $3707;
 $3709 = HEAP32[$3708>>2]|0;
 $3710 = (($3707) + 4)|0;
 $3711 = $3710;
 $3712 = HEAP32[$3711>>2]|0;
 $3713 = (___muldi3(($3709|0),($3712|0),666643,0)|0);
 $3714 = tempRet0;
 $3715 = $2;
 $3716 = $3715;
 $3717 = HEAP32[$3716>>2]|0;
 $3718 = (($3715) + 4)|0;
 $3719 = $3718;
 $3720 = HEAP32[$3719>>2]|0;
 $3721 = (_i64Add(($3717|0),($3720|0),($3713|0),($3714|0))|0);
 $3722 = tempRet0;
 $3723 = $2;
 $3724 = $3723;
 HEAP32[$3724>>2] = $3721;
 $3725 = (($3723) + 4)|0;
 $3726 = $3725;
 HEAP32[$3726>>2] = $3722;
 $3727 = $14;
 $3728 = $3727;
 $3729 = HEAP32[$3728>>2]|0;
 $3730 = (($3727) + 4)|0;
 $3731 = $3730;
 $3732 = HEAP32[$3731>>2]|0;
 $3733 = (___muldi3(($3729|0),($3732|0),470296,0)|0);
 $3734 = tempRet0;
 $3735 = $3;
 $3736 = $3735;
 $3737 = HEAP32[$3736>>2]|0;
 $3738 = (($3735) + 4)|0;
 $3739 = $3738;
 $3740 = HEAP32[$3739>>2]|0;
 $3741 = (_i64Add(($3737|0),($3740|0),($3733|0),($3734|0))|0);
 $3742 = tempRet0;
 $3743 = $3;
 $3744 = $3743;
 HEAP32[$3744>>2] = $3741;
 $3745 = (($3743) + 4)|0;
 $3746 = $3745;
 HEAP32[$3746>>2] = $3742;
 $3747 = $14;
 $3748 = $3747;
 $3749 = HEAP32[$3748>>2]|0;
 $3750 = (($3747) + 4)|0;
 $3751 = $3750;
 $3752 = HEAP32[$3751>>2]|0;
 $3753 = (___muldi3(($3749|0),($3752|0),654183,0)|0);
 $3754 = tempRet0;
 $3755 = $4;
 $3756 = $3755;
 $3757 = HEAP32[$3756>>2]|0;
 $3758 = (($3755) + 4)|0;
 $3759 = $3758;
 $3760 = HEAP32[$3759>>2]|0;
 $3761 = (_i64Add(($3757|0),($3760|0),($3753|0),($3754|0))|0);
 $3762 = tempRet0;
 $3763 = $4;
 $3764 = $3763;
 HEAP32[$3764>>2] = $3761;
 $3765 = (($3763) + 4)|0;
 $3766 = $3765;
 HEAP32[$3766>>2] = $3762;
 $3767 = $14;
 $3768 = $3767;
 $3769 = HEAP32[$3768>>2]|0;
 $3770 = (($3767) + 4)|0;
 $3771 = $3770;
 $3772 = HEAP32[$3771>>2]|0;
 $3773 = (___muldi3(($3769|0),($3772|0),997805,0)|0);
 $3774 = tempRet0;
 $3775 = $5;
 $3776 = $3775;
 $3777 = HEAP32[$3776>>2]|0;
 $3778 = (($3775) + 4)|0;
 $3779 = $3778;
 $3780 = HEAP32[$3779>>2]|0;
 $3781 = (_i64Subtract(($3777|0),($3780|0),($3773|0),($3774|0))|0);
 $3782 = tempRet0;
 $3783 = $5;
 $3784 = $3783;
 HEAP32[$3784>>2] = $3781;
 $3785 = (($3783) + 4)|0;
 $3786 = $3785;
 HEAP32[$3786>>2] = $3782;
 $3787 = $14;
 $3788 = $3787;
 $3789 = HEAP32[$3788>>2]|0;
 $3790 = (($3787) + 4)|0;
 $3791 = $3790;
 $3792 = HEAP32[$3791>>2]|0;
 $3793 = (___muldi3(($3789|0),($3792|0),136657,0)|0);
 $3794 = tempRet0;
 $3795 = $6;
 $3796 = $3795;
 $3797 = HEAP32[$3796>>2]|0;
 $3798 = (($3795) + 4)|0;
 $3799 = $3798;
 $3800 = HEAP32[$3799>>2]|0;
 $3801 = (_i64Add(($3797|0),($3800|0),($3793|0),($3794|0))|0);
 $3802 = tempRet0;
 $3803 = $6;
 $3804 = $3803;
 HEAP32[$3804>>2] = $3801;
 $3805 = (($3803) + 4)|0;
 $3806 = $3805;
 HEAP32[$3806>>2] = $3802;
 $3807 = $14;
 $3808 = $3807;
 $3809 = HEAP32[$3808>>2]|0;
 $3810 = (($3807) + 4)|0;
 $3811 = $3810;
 $3812 = HEAP32[$3811>>2]|0;
 $3813 = (___muldi3(($3809|0),($3812|0),683901,0)|0);
 $3814 = tempRet0;
 $3815 = $7;
 $3816 = $3815;
 $3817 = HEAP32[$3816>>2]|0;
 $3818 = (($3815) + 4)|0;
 $3819 = $3818;
 $3820 = HEAP32[$3819>>2]|0;
 $3821 = (_i64Subtract(($3817|0),($3820|0),($3813|0),($3814|0))|0);
 $3822 = tempRet0;
 $3823 = $7;
 $3824 = $3823;
 HEAP32[$3824>>2] = $3821;
 $3825 = (($3823) + 4)|0;
 $3826 = $3825;
 HEAP32[$3826>>2] = $3822;
 $3827 = $14;
 $3828 = $3827;
 HEAP32[$3828>>2] = 0;
 $3829 = (($3827) + 4)|0;
 $3830 = $3829;
 HEAP32[$3830>>2] = 0;
 $3831 = $2;
 $3832 = $3831;
 $3833 = HEAP32[$3832>>2]|0;
 $3834 = (($3831) + 4)|0;
 $3835 = $3834;
 $3836 = HEAP32[$3835>>2]|0;
 $3837 = (_bitshift64Ashr(($3833|0),($3836|0),21)|0);
 $3838 = tempRet0;
 $3839 = $26;
 $3840 = $3839;
 HEAP32[$3840>>2] = $3837;
 $3841 = (($3839) + 4)|0;
 $3842 = $3841;
 HEAP32[$3842>>2] = $3838;
 $3843 = $26;
 $3844 = $3843;
 $3845 = HEAP32[$3844>>2]|0;
 $3846 = (($3843) + 4)|0;
 $3847 = $3846;
 $3848 = HEAP32[$3847>>2]|0;
 $3849 = $3;
 $3850 = $3849;
 $3851 = HEAP32[$3850>>2]|0;
 $3852 = (($3849) + 4)|0;
 $3853 = $3852;
 $3854 = HEAP32[$3853>>2]|0;
 $3855 = (_i64Add(($3851|0),($3854|0),($3845|0),($3848|0))|0);
 $3856 = tempRet0;
 $3857 = $3;
 $3858 = $3857;
 HEAP32[$3858>>2] = $3855;
 $3859 = (($3857) + 4)|0;
 $3860 = $3859;
 HEAP32[$3860>>2] = $3856;
 $3861 = $26;
 $3862 = $3861;
 $3863 = HEAP32[$3862>>2]|0;
 $3864 = (($3861) + 4)|0;
 $3865 = $3864;
 $3866 = HEAP32[$3865>>2]|0;
 $3867 = (_bitshift64Shl(($3863|0),($3866|0),21)|0);
 $3868 = tempRet0;
 $3869 = $2;
 $3870 = $3869;
 $3871 = HEAP32[$3870>>2]|0;
 $3872 = (($3869) + 4)|0;
 $3873 = $3872;
 $3874 = HEAP32[$3873>>2]|0;
 $3875 = (_i64Subtract(($3871|0),($3874|0),($3867|0),($3868|0))|0);
 $3876 = tempRet0;
 $3877 = $2;
 $3878 = $3877;
 HEAP32[$3878>>2] = $3875;
 $3879 = (($3877) + 4)|0;
 $3880 = $3879;
 HEAP32[$3880>>2] = $3876;
 $3881 = $3;
 $3882 = $3881;
 $3883 = HEAP32[$3882>>2]|0;
 $3884 = (($3881) + 4)|0;
 $3885 = $3884;
 $3886 = HEAP32[$3885>>2]|0;
 $3887 = (_bitshift64Ashr(($3883|0),($3886|0),21)|0);
 $3888 = tempRet0;
 $3889 = $27;
 $3890 = $3889;
 HEAP32[$3890>>2] = $3887;
 $3891 = (($3889) + 4)|0;
 $3892 = $3891;
 HEAP32[$3892>>2] = $3888;
 $3893 = $27;
 $3894 = $3893;
 $3895 = HEAP32[$3894>>2]|0;
 $3896 = (($3893) + 4)|0;
 $3897 = $3896;
 $3898 = HEAP32[$3897>>2]|0;
 $3899 = $4;
 $3900 = $3899;
 $3901 = HEAP32[$3900>>2]|0;
 $3902 = (($3899) + 4)|0;
 $3903 = $3902;
 $3904 = HEAP32[$3903>>2]|0;
 $3905 = (_i64Add(($3901|0),($3904|0),($3895|0),($3898|0))|0);
 $3906 = tempRet0;
 $3907 = $4;
 $3908 = $3907;
 HEAP32[$3908>>2] = $3905;
 $3909 = (($3907) + 4)|0;
 $3910 = $3909;
 HEAP32[$3910>>2] = $3906;
 $3911 = $27;
 $3912 = $3911;
 $3913 = HEAP32[$3912>>2]|0;
 $3914 = (($3911) + 4)|0;
 $3915 = $3914;
 $3916 = HEAP32[$3915>>2]|0;
 $3917 = (_bitshift64Shl(($3913|0),($3916|0),21)|0);
 $3918 = tempRet0;
 $3919 = $3;
 $3920 = $3919;
 $3921 = HEAP32[$3920>>2]|0;
 $3922 = (($3919) + 4)|0;
 $3923 = $3922;
 $3924 = HEAP32[$3923>>2]|0;
 $3925 = (_i64Subtract(($3921|0),($3924|0),($3917|0),($3918|0))|0);
 $3926 = tempRet0;
 $3927 = $3;
 $3928 = $3927;
 HEAP32[$3928>>2] = $3925;
 $3929 = (($3927) + 4)|0;
 $3930 = $3929;
 HEAP32[$3930>>2] = $3926;
 $3931 = $4;
 $3932 = $3931;
 $3933 = HEAP32[$3932>>2]|0;
 $3934 = (($3931) + 4)|0;
 $3935 = $3934;
 $3936 = HEAP32[$3935>>2]|0;
 $3937 = (_bitshift64Ashr(($3933|0),($3936|0),21)|0);
 $3938 = tempRet0;
 $3939 = $28;
 $3940 = $3939;
 HEAP32[$3940>>2] = $3937;
 $3941 = (($3939) + 4)|0;
 $3942 = $3941;
 HEAP32[$3942>>2] = $3938;
 $3943 = $28;
 $3944 = $3943;
 $3945 = HEAP32[$3944>>2]|0;
 $3946 = (($3943) + 4)|0;
 $3947 = $3946;
 $3948 = HEAP32[$3947>>2]|0;
 $3949 = $5;
 $3950 = $3949;
 $3951 = HEAP32[$3950>>2]|0;
 $3952 = (($3949) + 4)|0;
 $3953 = $3952;
 $3954 = HEAP32[$3953>>2]|0;
 $3955 = (_i64Add(($3951|0),($3954|0),($3945|0),($3948|0))|0);
 $3956 = tempRet0;
 $3957 = $5;
 $3958 = $3957;
 HEAP32[$3958>>2] = $3955;
 $3959 = (($3957) + 4)|0;
 $3960 = $3959;
 HEAP32[$3960>>2] = $3956;
 $3961 = $28;
 $3962 = $3961;
 $3963 = HEAP32[$3962>>2]|0;
 $3964 = (($3961) + 4)|0;
 $3965 = $3964;
 $3966 = HEAP32[$3965>>2]|0;
 $3967 = (_bitshift64Shl(($3963|0),($3966|0),21)|0);
 $3968 = tempRet0;
 $3969 = $4;
 $3970 = $3969;
 $3971 = HEAP32[$3970>>2]|0;
 $3972 = (($3969) + 4)|0;
 $3973 = $3972;
 $3974 = HEAP32[$3973>>2]|0;
 $3975 = (_i64Subtract(($3971|0),($3974|0),($3967|0),($3968|0))|0);
 $3976 = tempRet0;
 $3977 = $4;
 $3978 = $3977;
 HEAP32[$3978>>2] = $3975;
 $3979 = (($3977) + 4)|0;
 $3980 = $3979;
 HEAP32[$3980>>2] = $3976;
 $3981 = $5;
 $3982 = $3981;
 $3983 = HEAP32[$3982>>2]|0;
 $3984 = (($3981) + 4)|0;
 $3985 = $3984;
 $3986 = HEAP32[$3985>>2]|0;
 $3987 = (_bitshift64Ashr(($3983|0),($3986|0),21)|0);
 $3988 = tempRet0;
 $3989 = $29;
 $3990 = $3989;
 HEAP32[$3990>>2] = $3987;
 $3991 = (($3989) + 4)|0;
 $3992 = $3991;
 HEAP32[$3992>>2] = $3988;
 $3993 = $29;
 $3994 = $3993;
 $3995 = HEAP32[$3994>>2]|0;
 $3996 = (($3993) + 4)|0;
 $3997 = $3996;
 $3998 = HEAP32[$3997>>2]|0;
 $3999 = $6;
 $4000 = $3999;
 $4001 = HEAP32[$4000>>2]|0;
 $4002 = (($3999) + 4)|0;
 $4003 = $4002;
 $4004 = HEAP32[$4003>>2]|0;
 $4005 = (_i64Add(($4001|0),($4004|0),($3995|0),($3998|0))|0);
 $4006 = tempRet0;
 $4007 = $6;
 $4008 = $4007;
 HEAP32[$4008>>2] = $4005;
 $4009 = (($4007) + 4)|0;
 $4010 = $4009;
 HEAP32[$4010>>2] = $4006;
 $4011 = $29;
 $4012 = $4011;
 $4013 = HEAP32[$4012>>2]|0;
 $4014 = (($4011) + 4)|0;
 $4015 = $4014;
 $4016 = HEAP32[$4015>>2]|0;
 $4017 = (_bitshift64Shl(($4013|0),($4016|0),21)|0);
 $4018 = tempRet0;
 $4019 = $5;
 $4020 = $4019;
 $4021 = HEAP32[$4020>>2]|0;
 $4022 = (($4019) + 4)|0;
 $4023 = $4022;
 $4024 = HEAP32[$4023>>2]|0;
 $4025 = (_i64Subtract(($4021|0),($4024|0),($4017|0),($4018|0))|0);
 $4026 = tempRet0;
 $4027 = $5;
 $4028 = $4027;
 HEAP32[$4028>>2] = $4025;
 $4029 = (($4027) + 4)|0;
 $4030 = $4029;
 HEAP32[$4030>>2] = $4026;
 $4031 = $6;
 $4032 = $4031;
 $4033 = HEAP32[$4032>>2]|0;
 $4034 = (($4031) + 4)|0;
 $4035 = $4034;
 $4036 = HEAP32[$4035>>2]|0;
 $4037 = (_bitshift64Ashr(($4033|0),($4036|0),21)|0);
 $4038 = tempRet0;
 $4039 = $30;
 $4040 = $4039;
 HEAP32[$4040>>2] = $4037;
 $4041 = (($4039) + 4)|0;
 $4042 = $4041;
 HEAP32[$4042>>2] = $4038;
 $4043 = $30;
 $4044 = $4043;
 $4045 = HEAP32[$4044>>2]|0;
 $4046 = (($4043) + 4)|0;
 $4047 = $4046;
 $4048 = HEAP32[$4047>>2]|0;
 $4049 = $7;
 $4050 = $4049;
 $4051 = HEAP32[$4050>>2]|0;
 $4052 = (($4049) + 4)|0;
 $4053 = $4052;
 $4054 = HEAP32[$4053>>2]|0;
 $4055 = (_i64Add(($4051|0),($4054|0),($4045|0),($4048|0))|0);
 $4056 = tempRet0;
 $4057 = $7;
 $4058 = $4057;
 HEAP32[$4058>>2] = $4055;
 $4059 = (($4057) + 4)|0;
 $4060 = $4059;
 HEAP32[$4060>>2] = $4056;
 $4061 = $30;
 $4062 = $4061;
 $4063 = HEAP32[$4062>>2]|0;
 $4064 = (($4061) + 4)|0;
 $4065 = $4064;
 $4066 = HEAP32[$4065>>2]|0;
 $4067 = (_bitshift64Shl(($4063|0),($4066|0),21)|0);
 $4068 = tempRet0;
 $4069 = $6;
 $4070 = $4069;
 $4071 = HEAP32[$4070>>2]|0;
 $4072 = (($4069) + 4)|0;
 $4073 = $4072;
 $4074 = HEAP32[$4073>>2]|0;
 $4075 = (_i64Subtract(($4071|0),($4074|0),($4067|0),($4068|0))|0);
 $4076 = tempRet0;
 $4077 = $6;
 $4078 = $4077;
 HEAP32[$4078>>2] = $4075;
 $4079 = (($4077) + 4)|0;
 $4080 = $4079;
 HEAP32[$4080>>2] = $4076;
 $4081 = $7;
 $4082 = $4081;
 $4083 = HEAP32[$4082>>2]|0;
 $4084 = (($4081) + 4)|0;
 $4085 = $4084;
 $4086 = HEAP32[$4085>>2]|0;
 $4087 = (_bitshift64Ashr(($4083|0),($4086|0),21)|0);
 $4088 = tempRet0;
 $4089 = $31;
 $4090 = $4089;
 HEAP32[$4090>>2] = $4087;
 $4091 = (($4089) + 4)|0;
 $4092 = $4091;
 HEAP32[$4092>>2] = $4088;
 $4093 = $31;
 $4094 = $4093;
 $4095 = HEAP32[$4094>>2]|0;
 $4096 = (($4093) + 4)|0;
 $4097 = $4096;
 $4098 = HEAP32[$4097>>2]|0;
 $4099 = $8;
 $4100 = $4099;
 $4101 = HEAP32[$4100>>2]|0;
 $4102 = (($4099) + 4)|0;
 $4103 = $4102;
 $4104 = HEAP32[$4103>>2]|0;
 $4105 = (_i64Add(($4101|0),($4104|0),($4095|0),($4098|0))|0);
 $4106 = tempRet0;
 $4107 = $8;
 $4108 = $4107;
 HEAP32[$4108>>2] = $4105;
 $4109 = (($4107) + 4)|0;
 $4110 = $4109;
 HEAP32[$4110>>2] = $4106;
 $4111 = $31;
 $4112 = $4111;
 $4113 = HEAP32[$4112>>2]|0;
 $4114 = (($4111) + 4)|0;
 $4115 = $4114;
 $4116 = HEAP32[$4115>>2]|0;
 $4117 = (_bitshift64Shl(($4113|0),($4116|0),21)|0);
 $4118 = tempRet0;
 $4119 = $7;
 $4120 = $4119;
 $4121 = HEAP32[$4120>>2]|0;
 $4122 = (($4119) + 4)|0;
 $4123 = $4122;
 $4124 = HEAP32[$4123>>2]|0;
 $4125 = (_i64Subtract(($4121|0),($4124|0),($4117|0),($4118|0))|0);
 $4126 = tempRet0;
 $4127 = $7;
 $4128 = $4127;
 HEAP32[$4128>>2] = $4125;
 $4129 = (($4127) + 4)|0;
 $4130 = $4129;
 HEAP32[$4130>>2] = $4126;
 $4131 = $8;
 $4132 = $4131;
 $4133 = HEAP32[$4132>>2]|0;
 $4134 = (($4131) + 4)|0;
 $4135 = $4134;
 $4136 = HEAP32[$4135>>2]|0;
 $4137 = (_bitshift64Ashr(($4133|0),($4136|0),21)|0);
 $4138 = tempRet0;
 $4139 = $32;
 $4140 = $4139;
 HEAP32[$4140>>2] = $4137;
 $4141 = (($4139) + 4)|0;
 $4142 = $4141;
 HEAP32[$4142>>2] = $4138;
 $4143 = $32;
 $4144 = $4143;
 $4145 = HEAP32[$4144>>2]|0;
 $4146 = (($4143) + 4)|0;
 $4147 = $4146;
 $4148 = HEAP32[$4147>>2]|0;
 $4149 = $9;
 $4150 = $4149;
 $4151 = HEAP32[$4150>>2]|0;
 $4152 = (($4149) + 4)|0;
 $4153 = $4152;
 $4154 = HEAP32[$4153>>2]|0;
 $4155 = (_i64Add(($4151|0),($4154|0),($4145|0),($4148|0))|0);
 $4156 = tempRet0;
 $4157 = $9;
 $4158 = $4157;
 HEAP32[$4158>>2] = $4155;
 $4159 = (($4157) + 4)|0;
 $4160 = $4159;
 HEAP32[$4160>>2] = $4156;
 $4161 = $32;
 $4162 = $4161;
 $4163 = HEAP32[$4162>>2]|0;
 $4164 = (($4161) + 4)|0;
 $4165 = $4164;
 $4166 = HEAP32[$4165>>2]|0;
 $4167 = (_bitshift64Shl(($4163|0),($4166|0),21)|0);
 $4168 = tempRet0;
 $4169 = $8;
 $4170 = $4169;
 $4171 = HEAP32[$4170>>2]|0;
 $4172 = (($4169) + 4)|0;
 $4173 = $4172;
 $4174 = HEAP32[$4173>>2]|0;
 $4175 = (_i64Subtract(($4171|0),($4174|0),($4167|0),($4168|0))|0);
 $4176 = tempRet0;
 $4177 = $8;
 $4178 = $4177;
 HEAP32[$4178>>2] = $4175;
 $4179 = (($4177) + 4)|0;
 $4180 = $4179;
 HEAP32[$4180>>2] = $4176;
 $4181 = $9;
 $4182 = $4181;
 $4183 = HEAP32[$4182>>2]|0;
 $4184 = (($4181) + 4)|0;
 $4185 = $4184;
 $4186 = HEAP32[$4185>>2]|0;
 $4187 = (_bitshift64Ashr(($4183|0),($4186|0),21)|0);
 $4188 = tempRet0;
 $4189 = $33;
 $4190 = $4189;
 HEAP32[$4190>>2] = $4187;
 $4191 = (($4189) + 4)|0;
 $4192 = $4191;
 HEAP32[$4192>>2] = $4188;
 $4193 = $33;
 $4194 = $4193;
 $4195 = HEAP32[$4194>>2]|0;
 $4196 = (($4193) + 4)|0;
 $4197 = $4196;
 $4198 = HEAP32[$4197>>2]|0;
 $4199 = $10;
 $4200 = $4199;
 $4201 = HEAP32[$4200>>2]|0;
 $4202 = (($4199) + 4)|0;
 $4203 = $4202;
 $4204 = HEAP32[$4203>>2]|0;
 $4205 = (_i64Add(($4201|0),($4204|0),($4195|0),($4198|0))|0);
 $4206 = tempRet0;
 $4207 = $10;
 $4208 = $4207;
 HEAP32[$4208>>2] = $4205;
 $4209 = (($4207) + 4)|0;
 $4210 = $4209;
 HEAP32[$4210>>2] = $4206;
 $4211 = $33;
 $4212 = $4211;
 $4213 = HEAP32[$4212>>2]|0;
 $4214 = (($4211) + 4)|0;
 $4215 = $4214;
 $4216 = HEAP32[$4215>>2]|0;
 $4217 = (_bitshift64Shl(($4213|0),($4216|0),21)|0);
 $4218 = tempRet0;
 $4219 = $9;
 $4220 = $4219;
 $4221 = HEAP32[$4220>>2]|0;
 $4222 = (($4219) + 4)|0;
 $4223 = $4222;
 $4224 = HEAP32[$4223>>2]|0;
 $4225 = (_i64Subtract(($4221|0),($4224|0),($4217|0),($4218|0))|0);
 $4226 = tempRet0;
 $4227 = $9;
 $4228 = $4227;
 HEAP32[$4228>>2] = $4225;
 $4229 = (($4227) + 4)|0;
 $4230 = $4229;
 HEAP32[$4230>>2] = $4226;
 $4231 = $10;
 $4232 = $4231;
 $4233 = HEAP32[$4232>>2]|0;
 $4234 = (($4231) + 4)|0;
 $4235 = $4234;
 $4236 = HEAP32[$4235>>2]|0;
 $4237 = (_bitshift64Ashr(($4233|0),($4236|0),21)|0);
 $4238 = tempRet0;
 $4239 = $34;
 $4240 = $4239;
 HEAP32[$4240>>2] = $4237;
 $4241 = (($4239) + 4)|0;
 $4242 = $4241;
 HEAP32[$4242>>2] = $4238;
 $4243 = $34;
 $4244 = $4243;
 $4245 = HEAP32[$4244>>2]|0;
 $4246 = (($4243) + 4)|0;
 $4247 = $4246;
 $4248 = HEAP32[$4247>>2]|0;
 $4249 = $11;
 $4250 = $4249;
 $4251 = HEAP32[$4250>>2]|0;
 $4252 = (($4249) + 4)|0;
 $4253 = $4252;
 $4254 = HEAP32[$4253>>2]|0;
 $4255 = (_i64Add(($4251|0),($4254|0),($4245|0),($4248|0))|0);
 $4256 = tempRet0;
 $4257 = $11;
 $4258 = $4257;
 HEAP32[$4258>>2] = $4255;
 $4259 = (($4257) + 4)|0;
 $4260 = $4259;
 HEAP32[$4260>>2] = $4256;
 $4261 = $34;
 $4262 = $4261;
 $4263 = HEAP32[$4262>>2]|0;
 $4264 = (($4261) + 4)|0;
 $4265 = $4264;
 $4266 = HEAP32[$4265>>2]|0;
 $4267 = (_bitshift64Shl(($4263|0),($4266|0),21)|0);
 $4268 = tempRet0;
 $4269 = $10;
 $4270 = $4269;
 $4271 = HEAP32[$4270>>2]|0;
 $4272 = (($4269) + 4)|0;
 $4273 = $4272;
 $4274 = HEAP32[$4273>>2]|0;
 $4275 = (_i64Subtract(($4271|0),($4274|0),($4267|0),($4268|0))|0);
 $4276 = tempRet0;
 $4277 = $10;
 $4278 = $4277;
 HEAP32[$4278>>2] = $4275;
 $4279 = (($4277) + 4)|0;
 $4280 = $4279;
 HEAP32[$4280>>2] = $4276;
 $4281 = $11;
 $4282 = $4281;
 $4283 = HEAP32[$4282>>2]|0;
 $4284 = (($4281) + 4)|0;
 $4285 = $4284;
 $4286 = HEAP32[$4285>>2]|0;
 $4287 = (_bitshift64Ashr(($4283|0),($4286|0),21)|0);
 $4288 = tempRet0;
 $4289 = $35;
 $4290 = $4289;
 HEAP32[$4290>>2] = $4287;
 $4291 = (($4289) + 4)|0;
 $4292 = $4291;
 HEAP32[$4292>>2] = $4288;
 $4293 = $35;
 $4294 = $4293;
 $4295 = HEAP32[$4294>>2]|0;
 $4296 = (($4293) + 4)|0;
 $4297 = $4296;
 $4298 = HEAP32[$4297>>2]|0;
 $4299 = $12;
 $4300 = $4299;
 $4301 = HEAP32[$4300>>2]|0;
 $4302 = (($4299) + 4)|0;
 $4303 = $4302;
 $4304 = HEAP32[$4303>>2]|0;
 $4305 = (_i64Add(($4301|0),($4304|0),($4295|0),($4298|0))|0);
 $4306 = tempRet0;
 $4307 = $12;
 $4308 = $4307;
 HEAP32[$4308>>2] = $4305;
 $4309 = (($4307) + 4)|0;
 $4310 = $4309;
 HEAP32[$4310>>2] = $4306;
 $4311 = $35;
 $4312 = $4311;
 $4313 = HEAP32[$4312>>2]|0;
 $4314 = (($4311) + 4)|0;
 $4315 = $4314;
 $4316 = HEAP32[$4315>>2]|0;
 $4317 = (_bitshift64Shl(($4313|0),($4316|0),21)|0);
 $4318 = tempRet0;
 $4319 = $11;
 $4320 = $4319;
 $4321 = HEAP32[$4320>>2]|0;
 $4322 = (($4319) + 4)|0;
 $4323 = $4322;
 $4324 = HEAP32[$4323>>2]|0;
 $4325 = (_i64Subtract(($4321|0),($4324|0),($4317|0),($4318|0))|0);
 $4326 = tempRet0;
 $4327 = $11;
 $4328 = $4327;
 HEAP32[$4328>>2] = $4325;
 $4329 = (($4327) + 4)|0;
 $4330 = $4329;
 HEAP32[$4330>>2] = $4326;
 $4331 = $12;
 $4332 = $4331;
 $4333 = HEAP32[$4332>>2]|0;
 $4334 = (($4331) + 4)|0;
 $4335 = $4334;
 $4336 = HEAP32[$4335>>2]|0;
 $4337 = (_bitshift64Ashr(($4333|0),($4336|0),21)|0);
 $4338 = tempRet0;
 $4339 = $36;
 $4340 = $4339;
 HEAP32[$4340>>2] = $4337;
 $4341 = (($4339) + 4)|0;
 $4342 = $4341;
 HEAP32[$4342>>2] = $4338;
 $4343 = $36;
 $4344 = $4343;
 $4345 = HEAP32[$4344>>2]|0;
 $4346 = (($4343) + 4)|0;
 $4347 = $4346;
 $4348 = HEAP32[$4347>>2]|0;
 $4349 = $13;
 $4350 = $4349;
 $4351 = HEAP32[$4350>>2]|0;
 $4352 = (($4349) + 4)|0;
 $4353 = $4352;
 $4354 = HEAP32[$4353>>2]|0;
 $4355 = (_i64Add(($4351|0),($4354|0),($4345|0),($4348|0))|0);
 $4356 = tempRet0;
 $4357 = $13;
 $4358 = $4357;
 HEAP32[$4358>>2] = $4355;
 $4359 = (($4357) + 4)|0;
 $4360 = $4359;
 HEAP32[$4360>>2] = $4356;
 $4361 = $36;
 $4362 = $4361;
 $4363 = HEAP32[$4362>>2]|0;
 $4364 = (($4361) + 4)|0;
 $4365 = $4364;
 $4366 = HEAP32[$4365>>2]|0;
 $4367 = (_bitshift64Shl(($4363|0),($4366|0),21)|0);
 $4368 = tempRet0;
 $4369 = $12;
 $4370 = $4369;
 $4371 = HEAP32[$4370>>2]|0;
 $4372 = (($4369) + 4)|0;
 $4373 = $4372;
 $4374 = HEAP32[$4373>>2]|0;
 $4375 = (_i64Subtract(($4371|0),($4374|0),($4367|0),($4368|0))|0);
 $4376 = tempRet0;
 $4377 = $12;
 $4378 = $4377;
 HEAP32[$4378>>2] = $4375;
 $4379 = (($4377) + 4)|0;
 $4380 = $4379;
 HEAP32[$4380>>2] = $4376;
 $4381 = $2;
 $4382 = $4381;
 $4383 = HEAP32[$4382>>2]|0;
 $4384 = (($4381) + 4)|0;
 $4385 = $4384;
 $4386 = HEAP32[$4385>>2]|0;
 $4387 = (_bitshift64Ashr(($4383|0),($4386|0),0)|0);
 $4388 = tempRet0;
 $4389 = $4387&255;
 $4390 = $1;
 HEAP8[$4390>>0] = $4389;
 $4391 = $2;
 $4392 = $4391;
 $4393 = HEAP32[$4392>>2]|0;
 $4394 = (($4391) + 4)|0;
 $4395 = $4394;
 $4396 = HEAP32[$4395>>2]|0;
 $4397 = (_bitshift64Ashr(($4393|0),($4396|0),8)|0);
 $4398 = tempRet0;
 $4399 = $4397&255;
 $4400 = $1;
 $4401 = ((($4400)) + 1|0);
 HEAP8[$4401>>0] = $4399;
 $4402 = $2;
 $4403 = $4402;
 $4404 = HEAP32[$4403>>2]|0;
 $4405 = (($4402) + 4)|0;
 $4406 = $4405;
 $4407 = HEAP32[$4406>>2]|0;
 $4408 = (_bitshift64Ashr(($4404|0),($4407|0),16)|0);
 $4409 = tempRet0;
 $4410 = $3;
 $4411 = $4410;
 $4412 = HEAP32[$4411>>2]|0;
 $4413 = (($4410) + 4)|0;
 $4414 = $4413;
 $4415 = HEAP32[$4414>>2]|0;
 $4416 = (_bitshift64Shl(($4412|0),($4415|0),5)|0);
 $4417 = tempRet0;
 $4418 = $4408 | $4416;
 $4409 | $4417;
 $4419 = $4418&255;
 $4420 = $1;
 $4421 = ((($4420)) + 2|0);
 HEAP8[$4421>>0] = $4419;
 $4422 = $3;
 $4423 = $4422;
 $4424 = HEAP32[$4423>>2]|0;
 $4425 = (($4422) + 4)|0;
 $4426 = $4425;
 $4427 = HEAP32[$4426>>2]|0;
 $4428 = (_bitshift64Ashr(($4424|0),($4427|0),3)|0);
 $4429 = tempRet0;
 $4430 = $4428&255;
 $4431 = $1;
 $4432 = ((($4431)) + 3|0);
 HEAP8[$4432>>0] = $4430;
 $4433 = $3;
 $4434 = $4433;
 $4435 = HEAP32[$4434>>2]|0;
 $4436 = (($4433) + 4)|0;
 $4437 = $4436;
 $4438 = HEAP32[$4437>>2]|0;
 $4439 = (_bitshift64Ashr(($4435|0),($4438|0),11)|0);
 $4440 = tempRet0;
 $4441 = $4439&255;
 $4442 = $1;
 $4443 = ((($4442)) + 4|0);
 HEAP8[$4443>>0] = $4441;
 $4444 = $3;
 $4445 = $4444;
 $4446 = HEAP32[$4445>>2]|0;
 $4447 = (($4444) + 4)|0;
 $4448 = $4447;
 $4449 = HEAP32[$4448>>2]|0;
 $4450 = (_bitshift64Ashr(($4446|0),($4449|0),19)|0);
 $4451 = tempRet0;
 $4452 = $4;
 $4453 = $4452;
 $4454 = HEAP32[$4453>>2]|0;
 $4455 = (($4452) + 4)|0;
 $4456 = $4455;
 $4457 = HEAP32[$4456>>2]|0;
 $4458 = (_bitshift64Shl(($4454|0),($4457|0),2)|0);
 $4459 = tempRet0;
 $4460 = $4450 | $4458;
 $4451 | $4459;
 $4461 = $4460&255;
 $4462 = $1;
 $4463 = ((($4462)) + 5|0);
 HEAP8[$4463>>0] = $4461;
 $4464 = $4;
 $4465 = $4464;
 $4466 = HEAP32[$4465>>2]|0;
 $4467 = (($4464) + 4)|0;
 $4468 = $4467;
 $4469 = HEAP32[$4468>>2]|0;
 $4470 = (_bitshift64Ashr(($4466|0),($4469|0),6)|0);
 $4471 = tempRet0;
 $4472 = $4470&255;
 $4473 = $1;
 $4474 = ((($4473)) + 6|0);
 HEAP8[$4474>>0] = $4472;
 $4475 = $4;
 $4476 = $4475;
 $4477 = HEAP32[$4476>>2]|0;
 $4478 = (($4475) + 4)|0;
 $4479 = $4478;
 $4480 = HEAP32[$4479>>2]|0;
 $4481 = (_bitshift64Ashr(($4477|0),($4480|0),14)|0);
 $4482 = tempRet0;
 $4483 = $5;
 $4484 = $4483;
 $4485 = HEAP32[$4484>>2]|0;
 $4486 = (($4483) + 4)|0;
 $4487 = $4486;
 $4488 = HEAP32[$4487>>2]|0;
 $4489 = (_bitshift64Shl(($4485|0),($4488|0),7)|0);
 $4490 = tempRet0;
 $4491 = $4481 | $4489;
 $4482 | $4490;
 $4492 = $4491&255;
 $4493 = $1;
 $4494 = ((($4493)) + 7|0);
 HEAP8[$4494>>0] = $4492;
 $4495 = $5;
 $4496 = $4495;
 $4497 = HEAP32[$4496>>2]|0;
 $4498 = (($4495) + 4)|0;
 $4499 = $4498;
 $4500 = HEAP32[$4499>>2]|0;
 $4501 = (_bitshift64Ashr(($4497|0),($4500|0),1)|0);
 $4502 = tempRet0;
 $4503 = $4501&255;
 $4504 = $1;
 $4505 = ((($4504)) + 8|0);
 HEAP8[$4505>>0] = $4503;
 $4506 = $5;
 $4507 = $4506;
 $4508 = HEAP32[$4507>>2]|0;
 $4509 = (($4506) + 4)|0;
 $4510 = $4509;
 $4511 = HEAP32[$4510>>2]|0;
 $4512 = (_bitshift64Ashr(($4508|0),($4511|0),9)|0);
 $4513 = tempRet0;
 $4514 = $4512&255;
 $4515 = $1;
 $4516 = ((($4515)) + 9|0);
 HEAP8[$4516>>0] = $4514;
 $4517 = $5;
 $4518 = $4517;
 $4519 = HEAP32[$4518>>2]|0;
 $4520 = (($4517) + 4)|0;
 $4521 = $4520;
 $4522 = HEAP32[$4521>>2]|0;
 $4523 = (_bitshift64Ashr(($4519|0),($4522|0),17)|0);
 $4524 = tempRet0;
 $4525 = $6;
 $4526 = $4525;
 $4527 = HEAP32[$4526>>2]|0;
 $4528 = (($4525) + 4)|0;
 $4529 = $4528;
 $4530 = HEAP32[$4529>>2]|0;
 $4531 = (_bitshift64Shl(($4527|0),($4530|0),4)|0);
 $4532 = tempRet0;
 $4533 = $4523 | $4531;
 $4524 | $4532;
 $4534 = $4533&255;
 $4535 = $1;
 $4536 = ((($4535)) + 10|0);
 HEAP8[$4536>>0] = $4534;
 $4537 = $6;
 $4538 = $4537;
 $4539 = HEAP32[$4538>>2]|0;
 $4540 = (($4537) + 4)|0;
 $4541 = $4540;
 $4542 = HEAP32[$4541>>2]|0;
 $4543 = (_bitshift64Ashr(($4539|0),($4542|0),4)|0);
 $4544 = tempRet0;
 $4545 = $4543&255;
 $4546 = $1;
 $4547 = ((($4546)) + 11|0);
 HEAP8[$4547>>0] = $4545;
 $4548 = $6;
 $4549 = $4548;
 $4550 = HEAP32[$4549>>2]|0;
 $4551 = (($4548) + 4)|0;
 $4552 = $4551;
 $4553 = HEAP32[$4552>>2]|0;
 $4554 = (_bitshift64Ashr(($4550|0),($4553|0),12)|0);
 $4555 = tempRet0;
 $4556 = $4554&255;
 $4557 = $1;
 $4558 = ((($4557)) + 12|0);
 HEAP8[$4558>>0] = $4556;
 $4559 = $6;
 $4560 = $4559;
 $4561 = HEAP32[$4560>>2]|0;
 $4562 = (($4559) + 4)|0;
 $4563 = $4562;
 $4564 = HEAP32[$4563>>2]|0;
 $4565 = (_bitshift64Ashr(($4561|0),($4564|0),20)|0);
 $4566 = tempRet0;
 $4567 = $7;
 $4568 = $4567;
 $4569 = HEAP32[$4568>>2]|0;
 $4570 = (($4567) + 4)|0;
 $4571 = $4570;
 $4572 = HEAP32[$4571>>2]|0;
 $4573 = (_bitshift64Shl(($4569|0),($4572|0),1)|0);
 $4574 = tempRet0;
 $4575 = $4565 | $4573;
 $4566 | $4574;
 $4576 = $4575&255;
 $4577 = $1;
 $4578 = ((($4577)) + 13|0);
 HEAP8[$4578>>0] = $4576;
 $4579 = $7;
 $4580 = $4579;
 $4581 = HEAP32[$4580>>2]|0;
 $4582 = (($4579) + 4)|0;
 $4583 = $4582;
 $4584 = HEAP32[$4583>>2]|0;
 $4585 = (_bitshift64Ashr(($4581|0),($4584|0),7)|0);
 $4586 = tempRet0;
 $4587 = $4585&255;
 $4588 = $1;
 $4589 = ((($4588)) + 14|0);
 HEAP8[$4589>>0] = $4587;
 $4590 = $7;
 $4591 = $4590;
 $4592 = HEAP32[$4591>>2]|0;
 $4593 = (($4590) + 4)|0;
 $4594 = $4593;
 $4595 = HEAP32[$4594>>2]|0;
 $4596 = (_bitshift64Ashr(($4592|0),($4595|0),15)|0);
 $4597 = tempRet0;
 $4598 = $8;
 $4599 = $4598;
 $4600 = HEAP32[$4599>>2]|0;
 $4601 = (($4598) + 4)|0;
 $4602 = $4601;
 $4603 = HEAP32[$4602>>2]|0;
 $4604 = (_bitshift64Shl(($4600|0),($4603|0),6)|0);
 $4605 = tempRet0;
 $4606 = $4596 | $4604;
 $4597 | $4605;
 $4607 = $4606&255;
 $4608 = $1;
 $4609 = ((($4608)) + 15|0);
 HEAP8[$4609>>0] = $4607;
 $4610 = $8;
 $4611 = $4610;
 $4612 = HEAP32[$4611>>2]|0;
 $4613 = (($4610) + 4)|0;
 $4614 = $4613;
 $4615 = HEAP32[$4614>>2]|0;
 $4616 = (_bitshift64Ashr(($4612|0),($4615|0),2)|0);
 $4617 = tempRet0;
 $4618 = $4616&255;
 $4619 = $1;
 $4620 = ((($4619)) + 16|0);
 HEAP8[$4620>>0] = $4618;
 $4621 = $8;
 $4622 = $4621;
 $4623 = HEAP32[$4622>>2]|0;
 $4624 = (($4621) + 4)|0;
 $4625 = $4624;
 $4626 = HEAP32[$4625>>2]|0;
 $4627 = (_bitshift64Ashr(($4623|0),($4626|0),10)|0);
 $4628 = tempRet0;
 $4629 = $4627&255;
 $4630 = $1;
 $4631 = ((($4630)) + 17|0);
 HEAP8[$4631>>0] = $4629;
 $4632 = $8;
 $4633 = $4632;
 $4634 = HEAP32[$4633>>2]|0;
 $4635 = (($4632) + 4)|0;
 $4636 = $4635;
 $4637 = HEAP32[$4636>>2]|0;
 $4638 = (_bitshift64Ashr(($4634|0),($4637|0),18)|0);
 $4639 = tempRet0;
 $4640 = $9;
 $4641 = $4640;
 $4642 = HEAP32[$4641>>2]|0;
 $4643 = (($4640) + 4)|0;
 $4644 = $4643;
 $4645 = HEAP32[$4644>>2]|0;
 $4646 = (_bitshift64Shl(($4642|0),($4645|0),3)|0);
 $4647 = tempRet0;
 $4648 = $4638 | $4646;
 $4639 | $4647;
 $4649 = $4648&255;
 $4650 = $1;
 $4651 = ((($4650)) + 18|0);
 HEAP8[$4651>>0] = $4649;
 $4652 = $9;
 $4653 = $4652;
 $4654 = HEAP32[$4653>>2]|0;
 $4655 = (($4652) + 4)|0;
 $4656 = $4655;
 $4657 = HEAP32[$4656>>2]|0;
 $4658 = (_bitshift64Ashr(($4654|0),($4657|0),5)|0);
 $4659 = tempRet0;
 $4660 = $4658&255;
 $4661 = $1;
 $4662 = ((($4661)) + 19|0);
 HEAP8[$4662>>0] = $4660;
 $4663 = $9;
 $4664 = $4663;
 $4665 = HEAP32[$4664>>2]|0;
 $4666 = (($4663) + 4)|0;
 $4667 = $4666;
 $4668 = HEAP32[$4667>>2]|0;
 $4669 = (_bitshift64Ashr(($4665|0),($4668|0),13)|0);
 $4670 = tempRet0;
 $4671 = $4669&255;
 $4672 = $1;
 $4673 = ((($4672)) + 20|0);
 HEAP8[$4673>>0] = $4671;
 $4674 = $10;
 $4675 = $4674;
 $4676 = HEAP32[$4675>>2]|0;
 $4677 = (($4674) + 4)|0;
 $4678 = $4677;
 $4679 = HEAP32[$4678>>2]|0;
 $4680 = (_bitshift64Ashr(($4676|0),($4679|0),0)|0);
 $4681 = tempRet0;
 $4682 = $4680&255;
 $4683 = $1;
 $4684 = ((($4683)) + 21|0);
 HEAP8[$4684>>0] = $4682;
 $4685 = $10;
 $4686 = $4685;
 $4687 = HEAP32[$4686>>2]|0;
 $4688 = (($4685) + 4)|0;
 $4689 = $4688;
 $4690 = HEAP32[$4689>>2]|0;
 $4691 = (_bitshift64Ashr(($4687|0),($4690|0),8)|0);
 $4692 = tempRet0;
 $4693 = $4691&255;
 $4694 = $1;
 $4695 = ((($4694)) + 22|0);
 HEAP8[$4695>>0] = $4693;
 $4696 = $10;
 $4697 = $4696;
 $4698 = HEAP32[$4697>>2]|0;
 $4699 = (($4696) + 4)|0;
 $4700 = $4699;
 $4701 = HEAP32[$4700>>2]|0;
 $4702 = (_bitshift64Ashr(($4698|0),($4701|0),16)|0);
 $4703 = tempRet0;
 $4704 = $11;
 $4705 = $4704;
 $4706 = HEAP32[$4705>>2]|0;
 $4707 = (($4704) + 4)|0;
 $4708 = $4707;
 $4709 = HEAP32[$4708>>2]|0;
 $4710 = (_bitshift64Shl(($4706|0),($4709|0),5)|0);
 $4711 = tempRet0;
 $4712 = $4702 | $4710;
 $4703 | $4711;
 $4713 = $4712&255;
 $4714 = $1;
 $4715 = ((($4714)) + 23|0);
 HEAP8[$4715>>0] = $4713;
 $4716 = $11;
 $4717 = $4716;
 $4718 = HEAP32[$4717>>2]|0;
 $4719 = (($4716) + 4)|0;
 $4720 = $4719;
 $4721 = HEAP32[$4720>>2]|0;
 $4722 = (_bitshift64Ashr(($4718|0),($4721|0),3)|0);
 $4723 = tempRet0;
 $4724 = $4722&255;
 $4725 = $1;
 $4726 = ((($4725)) + 24|0);
 HEAP8[$4726>>0] = $4724;
 $4727 = $11;
 $4728 = $4727;
 $4729 = HEAP32[$4728>>2]|0;
 $4730 = (($4727) + 4)|0;
 $4731 = $4730;
 $4732 = HEAP32[$4731>>2]|0;
 $4733 = (_bitshift64Ashr(($4729|0),($4732|0),11)|0);
 $4734 = tempRet0;
 $4735 = $4733&255;
 $4736 = $1;
 $4737 = ((($4736)) + 25|0);
 HEAP8[$4737>>0] = $4735;
 $4738 = $11;
 $4739 = $4738;
 $4740 = HEAP32[$4739>>2]|0;
 $4741 = (($4738) + 4)|0;
 $4742 = $4741;
 $4743 = HEAP32[$4742>>2]|0;
 $4744 = (_bitshift64Ashr(($4740|0),($4743|0),19)|0);
 $4745 = tempRet0;
 $4746 = $12;
 $4747 = $4746;
 $4748 = HEAP32[$4747>>2]|0;
 $4749 = (($4746) + 4)|0;
 $4750 = $4749;
 $4751 = HEAP32[$4750>>2]|0;
 $4752 = (_bitshift64Shl(($4748|0),($4751|0),2)|0);
 $4753 = tempRet0;
 $4754 = $4744 | $4752;
 $4745 | $4753;
 $4755 = $4754&255;
 $4756 = $1;
 $4757 = ((($4756)) + 26|0);
 HEAP8[$4757>>0] = $4755;
 $4758 = $12;
 $4759 = $4758;
 $4760 = HEAP32[$4759>>2]|0;
 $4761 = (($4758) + 4)|0;
 $4762 = $4761;
 $4763 = HEAP32[$4762>>2]|0;
 $4764 = (_bitshift64Ashr(($4760|0),($4763|0),6)|0);
 $4765 = tempRet0;
 $4766 = $4764&255;
 $4767 = $1;
 $4768 = ((($4767)) + 27|0);
 HEAP8[$4768>>0] = $4766;
 $4769 = $12;
 $4770 = $4769;
 $4771 = HEAP32[$4770>>2]|0;
 $4772 = (($4769) + 4)|0;
 $4773 = $4772;
 $4774 = HEAP32[$4773>>2]|0;
 $4775 = (_bitshift64Ashr(($4771|0),($4774|0),14)|0);
 $4776 = tempRet0;
 $4777 = $13;
 $4778 = $4777;
 $4779 = HEAP32[$4778>>2]|0;
 $4780 = (($4777) + 4)|0;
 $4781 = $4780;
 $4782 = HEAP32[$4781>>2]|0;
 $4783 = (_bitshift64Shl(($4779|0),($4782|0),7)|0);
 $4784 = tempRet0;
 $4785 = $4775 | $4783;
 $4776 | $4784;
 $4786 = $4785&255;
 $4787 = $1;
 $4788 = ((($4787)) + 28|0);
 HEAP8[$4788>>0] = $4786;
 $4789 = $13;
 $4790 = $4789;
 $4791 = HEAP32[$4790>>2]|0;
 $4792 = (($4789) + 4)|0;
 $4793 = $4792;
 $4794 = HEAP32[$4793>>2]|0;
 $4795 = (_bitshift64Ashr(($4791|0),($4794|0),1)|0);
 $4796 = tempRet0;
 $4797 = $4795&255;
 $4798 = $1;
 $4799 = ((($4798)) + 29|0);
 HEAP8[$4799>>0] = $4797;
 $4800 = $13;
 $4801 = $4800;
 $4802 = HEAP32[$4801>>2]|0;
 $4803 = (($4800) + 4)|0;
 $4804 = $4803;
 $4805 = HEAP32[$4804>>2]|0;
 $4806 = (_bitshift64Ashr(($4802|0),($4805|0),9)|0);
 $4807 = tempRet0;
 $4808 = $4806&255;
 $4809 = $1;
 $4810 = ((($4809)) + 30|0);
 HEAP8[$4810>>0] = $4808;
 $4811 = $13;
 $4812 = $4811;
 $4813 = HEAP32[$4812>>2]|0;
 $4814 = (($4811) + 4)|0;
 $4815 = $4814;
 $4816 = HEAP32[$4815>>2]|0;
 $4817 = (_bitshift64Ashr(($4813|0),($4816|0),17)|0);
 $4818 = tempRet0;
 $4819 = $4817&255;
 $4820 = $1;
 $4821 = ((($4820)) + 31|0);
 HEAP8[$4821>>0] = $4819;
 STACKTOP = sp;return;
}
function _load_3_44($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = tempRet0;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $2;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 tempRet0 = ($51);
 STACKTOP = sp;return ($48|0);
}
function _load_4_45($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = tempRet0;
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = tempRet0;
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $1;
 $47 = ((($46)) + 3|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (_bitshift64Shl(($49|0),0,24)|0);
 $51 = tempRet0;
 $52 = $2;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $54 | $50;
 $59 = $57 | $51;
 $60 = $2;
 $61 = $60;
 HEAP32[$61>>2] = $58;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 $64 = $2;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 tempRet0 = ($69);
 STACKTOP = sp;return ($66|0);
}
function _sha3_Init512($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $2 = $3;
 $4 = $2;
 _memset(($4|0),0,224)|0;
 $5 = $2;
 $6 = ((($5)) + 216|0);
 HEAP32[$6>>2] = 16;
 STACKTOP = sp;return;
}
function _sha3_Update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $13 = $3;
 $6 = $13;
 $14 = $6;
 $15 = ((($14)) + 208|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (8 - ($16))|0;
 $18 = $17 & 7;
 $7 = $18;
 $19 = $4;
 $11 = $19;
 $20 = $5;
 $21 = $7;
 $22 = ($20>>>0)<($21>>>0);
 if ($22) {
  while(1) {
   $23 = $5;
   $24 = (($23) + -1)|0;
   $5 = $24;
   $25 = ($23|0)!=(0);
   if (!($25)) {
    break;
   }
   $26 = $11;
   $27 = ((($26)) + 1|0);
   $11 = $27;
   $28 = HEAP8[$26>>0]|0;
   $29 = $28&255;
   $30 = $6;
   $31 = ((($30)) + 208|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1)|0;
   HEAP32[$31>>2] = $33;
   $34 = $32<<3;
   $35 = (_bitshift64Shl(($29|0),0,($34|0))|0);
   $36 = tempRet0;
   $37 = $6;
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = $40 | $35;
   $45 = $43 | $36;
   $46 = $37;
   $47 = $46;
   HEAP32[$47>>2] = $44;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $45;
  }
  STACKTOP = sp;return;
 }
 $50 = $7;
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $7;
  $53 = $5;
  $54 = (($53) - ($52))|0;
  $5 = $54;
  while(1) {
   $55 = $7;
   $56 = (($55) + -1)|0;
   $7 = $56;
   $57 = ($55|0)!=(0);
   if (!($57)) {
    break;
   }
   $58 = $11;
   $59 = ((($58)) + 1|0);
   $11 = $59;
   $60 = HEAP8[$58>>0]|0;
   $61 = $60&255;
   $62 = $6;
   $63 = ((($62)) + 208|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 1)|0;
   HEAP32[$63>>2] = $65;
   $66 = $64<<3;
   $67 = (_bitshift64Shl(($61|0),0,($66|0))|0);
   $68 = tempRet0;
   $69 = $6;
   $70 = $69;
   $71 = $70;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) + 4)|0;
   $74 = $73;
   $75 = HEAP32[$74>>2]|0;
   $76 = $72 | $67;
   $77 = $75 | $68;
   $78 = $69;
   $79 = $78;
   HEAP32[$79>>2] = $76;
   $80 = (($78) + 4)|0;
   $81 = $80;
   HEAP32[$81>>2] = $77;
  }
  $82 = $6;
  $83 = $82;
  $84 = $83;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4)|0;
  $87 = $86;
  $88 = HEAP32[$87>>2]|0;
  $89 = $6;
  $90 = ((($89)) + 8|0);
  $91 = $6;
  $92 = ((($91)) + 212|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($90) + ($93<<3)|0);
  $95 = $94;
  $96 = $95;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($95) + 4)|0;
  $99 = $98;
  $100 = HEAP32[$99>>2]|0;
  $101 = $97 ^ $85;
  $102 = $100 ^ $88;
  $103 = $94;
  $104 = $103;
  HEAP32[$104>>2] = $101;
  $105 = (($103) + 4)|0;
  $106 = $105;
  HEAP32[$106>>2] = $102;
  $107 = $6;
  $108 = ((($107)) + 208|0);
  HEAP32[$108>>2] = 0;
  $109 = $6;
  $110 = $109;
  $111 = $110;
  HEAP32[$111>>2] = 0;
  $112 = (($110) + 4)|0;
  $113 = $112;
  HEAP32[$113>>2] = 0;
  $114 = $6;
  $115 = ((($114)) + 212|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) + 1)|0;
  HEAP32[$115>>2] = $117;
  $118 = $6;
  $119 = ((($118)) + 216|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (25 - ($120))|0;
  $122 = ($117|0)==($121|0);
  if ($122) {
   $123 = $6;
   $124 = ((($123)) + 8|0);
   _keccakf($124);
   $125 = $6;
   $126 = ((($125)) + 212|0);
   HEAP32[$126>>2] = 0;
  }
 }
 $127 = $5;
 $128 = (($127>>>0) / 8)&-1;
 $8 = $128;
 $129 = $5;
 $130 = $8;
 $131 = $130<<3;
 $132 = (($129) - ($131))|0;
 $9 = $132;
 $10 = 0;
 while(1) {
  $133 = $10;
  $134 = $8;
  $135 = ($133>>>0)<($134>>>0);
  if (!($135)) {
   break;
  }
  $136 = $11;
  $137 = HEAP8[$136>>0]|0;
  $138 = $137&255;
  $139 = $11;
  $140 = ((($139)) + 1|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = (_bitshift64Shl(($142|0),0,8)|0);
  $144 = tempRet0;
  $145 = $138 | $143;
  $146 = $11;
  $147 = ((($146)) + 2|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = (_bitshift64Shl(($149|0),0,16)|0);
  $151 = tempRet0;
  $152 = $145 | $150;
  $153 = $144 | $151;
  $154 = $11;
  $155 = ((($154)) + 3|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = (_bitshift64Shl(($157|0),0,24)|0);
  $159 = tempRet0;
  $160 = $152 | $158;
  $161 = $153 | $159;
  $162 = $11;
  $163 = ((($162)) + 4|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = $161 | $165;
  $167 = $11;
  $168 = ((($167)) + 5|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = $169&255;
  $171 = (_bitshift64Shl(($170|0),0,40)|0);
  $172 = tempRet0;
  $173 = $160 | $171;
  $174 = $166 | $172;
  $175 = $11;
  $176 = ((($175)) + 6|0);
  $177 = HEAP8[$176>>0]|0;
  $178 = $177&255;
  $179 = (_bitshift64Shl(($178|0),0,48)|0);
  $180 = tempRet0;
  $181 = $173 | $179;
  $182 = $174 | $180;
  $183 = $11;
  $184 = ((($183)) + 7|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = (_bitshift64Shl(($186|0),0,56)|0);
  $188 = tempRet0;
  $189 = $181 | $187;
  $190 = $182 | $188;
  $191 = $12;
  $192 = $191;
  HEAP32[$192>>2] = $189;
  $193 = (($191) + 4)|0;
  $194 = $193;
  HEAP32[$194>>2] = $190;
  $195 = $12;
  $196 = $195;
  $197 = HEAP32[$196>>2]|0;
  $198 = (($195) + 4)|0;
  $199 = $198;
  $200 = HEAP32[$199>>2]|0;
  $201 = $6;
  $202 = ((($201)) + 8|0);
  $203 = $6;
  $204 = ((($203)) + 212|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (($202) + ($205<<3)|0);
  $207 = $206;
  $208 = $207;
  $209 = HEAP32[$208>>2]|0;
  $210 = (($207) + 4)|0;
  $211 = $210;
  $212 = HEAP32[$211>>2]|0;
  $213 = $209 ^ $197;
  $214 = $212 ^ $200;
  $215 = $206;
  $216 = $215;
  HEAP32[$216>>2] = $213;
  $217 = (($215) + 4)|0;
  $218 = $217;
  HEAP32[$218>>2] = $214;
  $219 = $6;
  $220 = ((($219)) + 212|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + 1)|0;
  HEAP32[$220>>2] = $222;
  $223 = $6;
  $224 = ((($223)) + 216|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (25 - ($225))|0;
  $227 = ($222|0)==($226|0);
  if ($227) {
   $228 = $6;
   $229 = ((($228)) + 8|0);
   _keccakf($229);
   $230 = $6;
   $231 = ((($230)) + 212|0);
   HEAP32[$231>>2] = 0;
  }
  $232 = $10;
  $233 = (($232) + 1)|0;
  $10 = $233;
  $234 = $11;
  $235 = ((($234)) + 8|0);
  $11 = $235;
 }
 while(1) {
  $236 = $9;
  $237 = (($236) + -1)|0;
  $9 = $237;
  $238 = ($236|0)!=(0);
  if (!($238)) {
   break;
  }
  $239 = $11;
  $240 = ((($239)) + 1|0);
  $11 = $240;
  $241 = HEAP8[$239>>0]|0;
  $242 = $241&255;
  $243 = $6;
  $244 = ((($243)) + 208|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($245) + 1)|0;
  HEAP32[$244>>2] = $246;
  $247 = $245<<3;
  $248 = (_bitshift64Shl(($242|0),0,($247|0))|0);
  $249 = tempRet0;
  $250 = $6;
  $251 = $250;
  $252 = $251;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($251) + 4)|0;
  $255 = $254;
  $256 = HEAP32[$255>>2]|0;
  $257 = $253 | $248;
  $258 = $256 | $249;
  $259 = $250;
  $260 = $259;
  HEAP32[$260>>2] = $257;
  $261 = (($259) + 4)|0;
  $262 = $261;
  HEAP32[$262>>2] = $258;
 }
 STACKTOP = sp;return;
}
function _keccakf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 40|0;
 $6 = sp;
 $1 = $0;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = ($7|0)<(24);
  if (!($8)) {
   break;
  }
  $2 = 0;
  while(1) {
   $9 = $2;
   $10 = ($9|0)<(5);
   if (!($10)) {
    break;
   }
   $11 = $1;
   $12 = $2;
   $13 = (($11) + ($12<<3)|0);
   $14 = $13;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = $2;
   $22 = (($21) + 5)|0;
   $23 = (($20) + ($22<<3)|0);
   $24 = $23;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) + 4)|0;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = $16 ^ $26;
   $31 = $19 ^ $29;
   $32 = $1;
   $33 = $2;
   $34 = (($33) + 10)|0;
   $35 = (($32) + ($34<<3)|0);
   $36 = $35;
   $37 = $36;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($36) + 4)|0;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = $30 ^ $38;
   $43 = $31 ^ $41;
   $44 = $1;
   $45 = $2;
   $46 = (($45) + 15)|0;
   $47 = (($44) + ($46<<3)|0);
   $48 = $47;
   $49 = $48;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 4)|0;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = $42 ^ $50;
   $55 = $43 ^ $53;
   $56 = $1;
   $57 = $2;
   $58 = (($57) + 20)|0;
   $59 = (($56) + ($58<<3)|0);
   $60 = $59;
   $61 = $60;
   $62 = HEAP32[$61>>2]|0;
   $63 = (($60) + 4)|0;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = $54 ^ $62;
   $67 = $55 ^ $65;
   $68 = $2;
   $69 = (($6) + ($68<<3)|0);
   $70 = $69;
   $71 = $70;
   HEAP32[$71>>2] = $66;
   $72 = (($70) + 4)|0;
   $73 = $72;
   HEAP32[$73>>2] = $67;
   $74 = $2;
   $75 = (($74) + 1)|0;
   $2 = $75;
  }
  $2 = 0;
  while(1) {
   $76 = $2;
   $77 = ($76|0)<(5);
   if (!($77)) {
    break;
   }
   $78 = $2;
   $79 = (($78) + 4)|0;
   $80 = (($79|0) % 5)&-1;
   $81 = (($6) + ($80<<3)|0);
   $82 = $81;
   $83 = $82;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($82) + 4)|0;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = $2;
   $89 = (($88) + 1)|0;
   $90 = (($89|0) % 5)&-1;
   $91 = (($6) + ($90<<3)|0);
   $92 = $91;
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) + 4)|0;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (_bitshift64Shl(($94|0),($97|0),1)|0);
   $99 = tempRet0;
   $100 = $2;
   $101 = (($100) + 1)|0;
   $102 = (($101|0) % 5)&-1;
   $103 = (($6) + ($102<<3)|0);
   $104 = $103;
   $105 = $104;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($104) + 4)|0;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (_bitshift64Lshr(($106|0),($109|0),63)|0);
   $111 = tempRet0;
   $112 = $98 | $110;
   $113 = $99 | $111;
   $114 = $84 ^ $112;
   $115 = $87 ^ $113;
   $116 = $5;
   $117 = $116;
   HEAP32[$117>>2] = $114;
   $118 = (($116) + 4)|0;
   $119 = $118;
   HEAP32[$119>>2] = $115;
   $3 = 0;
   while(1) {
    $120 = $3;
    $121 = ($120|0)<(25);
    if (!($121)) {
     break;
    }
    $122 = $5;
    $123 = $122;
    $124 = HEAP32[$123>>2]|0;
    $125 = (($122) + 4)|0;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = $1;
    $129 = $3;
    $130 = $2;
    $131 = (($129) + ($130))|0;
    $132 = (($128) + ($131<<3)|0);
    $133 = $132;
    $134 = $133;
    $135 = HEAP32[$134>>2]|0;
    $136 = (($133) + 4)|0;
    $137 = $136;
    $138 = HEAP32[$137>>2]|0;
    $139 = $135 ^ $124;
    $140 = $138 ^ $127;
    $141 = $132;
    $142 = $141;
    HEAP32[$142>>2] = $139;
    $143 = (($141) + 4)|0;
    $144 = $143;
    HEAP32[$144>>2] = $140;
    $145 = $3;
    $146 = (($145) + 5)|0;
    $3 = $146;
   }
   $147 = $2;
   $148 = (($147) + 1)|0;
   $2 = $148;
  }
  $149 = $1;
  $150 = ((($149)) + 8|0);
  $151 = $150;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($151) + 4)|0;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = $5;
  $158 = $157;
  HEAP32[$158>>2] = $153;
  $159 = (($157) + 4)|0;
  $160 = $159;
  HEAP32[$160>>2] = $156;
  $2 = 0;
  while(1) {
   $161 = $2;
   $162 = ($161|0)<(24);
   if (!($162)) {
    break;
   }
   $163 = $2;
   $164 = (32004 + ($163<<2)|0);
   $165 = HEAP32[$164>>2]|0;
   $3 = $165;
   $166 = $1;
   $167 = $3;
   $168 = (($166) + ($167<<3)|0);
   $169 = $168;
   $170 = $169;
   $171 = HEAP32[$170>>2]|0;
   $172 = (($169) + 4)|0;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = $6;
   $176 = $175;
   HEAP32[$176>>2] = $171;
   $177 = (($175) + 4)|0;
   $178 = $177;
   HEAP32[$178>>2] = $174;
   $179 = $5;
   $180 = $179;
   $181 = HEAP32[$180>>2]|0;
   $182 = (($179) + 4)|0;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = $2;
   $186 = (32100 + ($185<<2)|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = (_bitshift64Shl(($181|0),($184|0),($187|0))|0);
   $189 = tempRet0;
   $190 = $5;
   $191 = $190;
   $192 = HEAP32[$191>>2]|0;
   $193 = (($190) + 4)|0;
   $194 = $193;
   $195 = HEAP32[$194>>2]|0;
   $196 = $2;
   $197 = (32100 + ($196<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (64 - ($198))|0;
   $200 = (_bitshift64Lshr(($192|0),($195|0),($199|0))|0);
   $201 = tempRet0;
   $202 = $188 | $200;
   $203 = $189 | $201;
   $204 = $1;
   $205 = $3;
   $206 = (($204) + ($205<<3)|0);
   $207 = $206;
   $208 = $207;
   HEAP32[$208>>2] = $202;
   $209 = (($207) + 4)|0;
   $210 = $209;
   HEAP32[$210>>2] = $203;
   $211 = $6;
   $212 = $211;
   $213 = HEAP32[$212>>2]|0;
   $214 = (($211) + 4)|0;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = $5;
   $218 = $217;
   HEAP32[$218>>2] = $213;
   $219 = (($217) + 4)|0;
   $220 = $219;
   HEAP32[$220>>2] = $216;
   $221 = $2;
   $222 = (($221) + 1)|0;
   $2 = $222;
  }
  $3 = 0;
  while(1) {
   $223 = $3;
   $224 = ($223|0)<(25);
   if (!($224)) {
    break;
   }
   $2 = 0;
   while(1) {
    $225 = $2;
    $226 = ($225|0)<(5);
    if (!($226)) {
     break;
    }
    $227 = $1;
    $228 = $3;
    $229 = $2;
    $230 = (($228) + ($229))|0;
    $231 = (($227) + ($230<<3)|0);
    $232 = $231;
    $233 = $232;
    $234 = HEAP32[$233>>2]|0;
    $235 = (($232) + 4)|0;
    $236 = $235;
    $237 = HEAP32[$236>>2]|0;
    $238 = $2;
    $239 = (($6) + ($238<<3)|0);
    $240 = $239;
    $241 = $240;
    HEAP32[$241>>2] = $234;
    $242 = (($240) + 4)|0;
    $243 = $242;
    HEAP32[$243>>2] = $237;
    $244 = $2;
    $245 = (($244) + 1)|0;
    $2 = $245;
   }
   $2 = 0;
   while(1) {
    $246 = $2;
    $247 = ($246|0)<(5);
    if (!($247)) {
     break;
    }
    $248 = $2;
    $249 = (($248) + 1)|0;
    $250 = (($249|0) % 5)&-1;
    $251 = (($6) + ($250<<3)|0);
    $252 = $251;
    $253 = $252;
    $254 = HEAP32[$253>>2]|0;
    $255 = (($252) + 4)|0;
    $256 = $255;
    $257 = HEAP32[$256>>2]|0;
    $258 = $254 ^ -1;
    $259 = $257 ^ -1;
    $260 = $2;
    $261 = (($260) + 2)|0;
    $262 = (($261|0) % 5)&-1;
    $263 = (($6) + ($262<<3)|0);
    $264 = $263;
    $265 = $264;
    $266 = HEAP32[$265>>2]|0;
    $267 = (($264) + 4)|0;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = $258 & $266;
    $271 = $259 & $269;
    $272 = $1;
    $273 = $3;
    $274 = $2;
    $275 = (($273) + ($274))|0;
    $276 = (($272) + ($275<<3)|0);
    $277 = $276;
    $278 = $277;
    $279 = HEAP32[$278>>2]|0;
    $280 = (($277) + 4)|0;
    $281 = $280;
    $282 = HEAP32[$281>>2]|0;
    $283 = $279 ^ $270;
    $284 = $282 ^ $271;
    $285 = $276;
    $286 = $285;
    HEAP32[$286>>2] = $283;
    $287 = (($285) + 4)|0;
    $288 = $287;
    HEAP32[$288>>2] = $284;
    $289 = $2;
    $290 = (($289) + 1)|0;
    $2 = $290;
   }
   $291 = $3;
   $292 = (($291) + 5)|0;
   $3 = $292;
  }
  $293 = $4;
  $294 = (8 + ($293<<3)|0);
  $295 = $294;
  $296 = $295;
  $297 = HEAP32[$296>>2]|0;
  $298 = (($295) + 4)|0;
  $299 = $298;
  $300 = HEAP32[$299>>2]|0;
  $301 = $1;
  $302 = $301;
  $303 = $302;
  $304 = HEAP32[$303>>2]|0;
  $305 = (($302) + 4)|0;
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = $304 ^ $297;
  $309 = $307 ^ $300;
  $310 = $301;
  $311 = $310;
  HEAP32[$311>>2] = $308;
  $312 = (($310) + 4)|0;
  $313 = $312;
  HEAP32[$313>>2] = $309;
  $314 = $4;
  $315 = (($314) + 1)|0;
  $4 = $315;
 }
 STACKTOP = sp;return;
}
function _sha3_Finalize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $4;
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $4;
 $17 = ((($16)) + 208|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<3;
 $20 = (_bitshift64Shl(6,0,($19|0))|0);
 $21 = tempRet0;
 $22 = $12 ^ $20;
 $23 = $15 ^ $21;
 $24 = $4;
 $25 = ((($24)) + 8|0);
 $26 = $4;
 $27 = ((($26)) + 212|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($25) + ($28<<3)|0);
 $30 = $29;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = $32 ^ $22;
 $37 = $35 ^ $23;
 $38 = $29;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = $4;
 $43 = ((($42)) + 8|0);
 $44 = $4;
 $45 = ((($44)) + 216|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (25 - ($46))|0;
 $48 = (($47) - 1)|0;
 $49 = (($43) + ($48<<3)|0);
 $50 = $49;
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 4)|0;
 $54 = $53;
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 ^ -2147483648;
 $57 = $49;
 $58 = $57;
 HEAP32[$58>>2] = $52;
 $59 = (($57) + 4)|0;
 $60 = $59;
 HEAP32[$60>>2] = $56;
 $61 = $4;
 $62 = ((($61)) + 8|0);
 _keccakf($62);
 $5 = 0;
 while(1) {
  $63 = $5;
  $64 = ($63>>>0)<(25);
  if (!($64)) {
   break;
  }
  $65 = $4;
  $66 = ((($65)) + 8|0);
  $67 = $5;
  $68 = (($66) + ($67<<3)|0);
  $69 = $68;
  $70 = $69;
  $71 = HEAP32[$70>>2]|0;
  $72 = (($69) + 4)|0;
  $73 = $72;
  $74 = HEAP32[$73>>2]|0;
  $6 = $71;
  $75 = $4;
  $76 = ((($75)) + 8|0);
  $77 = $5;
  $78 = (($76) + ($77<<3)|0);
  $79 = $78;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + 4)|0;
  $83 = $82;
  $84 = HEAP32[$83>>2]|0;
  $85 = (_bitshift64Lshr(($81|0),($84|0),16)|0);
  $86 = tempRet0;
  $87 = (_bitshift64Lshr(($85|0),($86|0),16)|0);
  $88 = tempRet0;
  $7 = $87;
  $89 = $6;
  $90 = $89&255;
  $91 = $4;
  $92 = ((($91)) + 8|0);
  $93 = $5;
  $94 = $93<<3;
  $95 = (($94) + 0)|0;
  $96 = (($92) + ($95)|0);
  HEAP8[$96>>0] = $90;
  $97 = $6;
  $98 = $97 >>> 8;
  $99 = $98&255;
  $100 = $4;
  $101 = ((($100)) + 8|0);
  $102 = $5;
  $103 = $102<<3;
  $104 = (($103) + 1)|0;
  $105 = (($101) + ($104)|0);
  HEAP8[$105>>0] = $99;
  $106 = $6;
  $107 = $106 >>> 16;
  $108 = $107&255;
  $109 = $4;
  $110 = ((($109)) + 8|0);
  $111 = $5;
  $112 = $111<<3;
  $113 = (($112) + 2)|0;
  $114 = (($110) + ($113)|0);
  HEAP8[$114>>0] = $108;
  $115 = $6;
  $116 = $115 >>> 24;
  $117 = $116&255;
  $118 = $4;
  $119 = ((($118)) + 8|0);
  $120 = $5;
  $121 = $120<<3;
  $122 = (($121) + 3)|0;
  $123 = (($119) + ($122)|0);
  HEAP8[$123>>0] = $117;
  $124 = $7;
  $125 = $124&255;
  $126 = $4;
  $127 = ((($126)) + 8|0);
  $128 = $5;
  $129 = $128<<3;
  $130 = (($129) + 4)|0;
  $131 = (($127) + ($130)|0);
  HEAP8[$131>>0] = $125;
  $132 = $7;
  $133 = $132 >>> 8;
  $134 = $133&255;
  $135 = $4;
  $136 = ((($135)) + 8|0);
  $137 = $5;
  $138 = $137<<3;
  $139 = (($138) + 5)|0;
  $140 = (($136) + ($139)|0);
  HEAP8[$140>>0] = $134;
  $141 = $7;
  $142 = $141 >>> 16;
  $143 = $142&255;
  $144 = $4;
  $145 = ((($144)) + 8|0);
  $146 = $5;
  $147 = $146<<3;
  $148 = (($147) + 6)|0;
  $149 = (($145) + ($148)|0);
  HEAP8[$149>>0] = $143;
  $150 = $7;
  $151 = $150 >>> 24;
  $152 = $151&255;
  $153 = $4;
  $154 = ((($153)) + 8|0);
  $155 = $5;
  $156 = $155<<3;
  $157 = (($156) + 7)|0;
  $158 = (($154) + ($157)|0);
  HEAP8[$158>>0] = $152;
  $159 = $5;
  $160 = (($159) + 1)|0;
  $5 = $160;
 }
 $161 = $3;
 $162 = $4;
 $163 = ((($162)) + 8|0);
 $164 = $4;
 $165 = ((($164)) + 216|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = $166<<2;
 _memcpy(($161|0),($163|0),($167|0))|0;
 STACKTOP = sp;return;
}
function _sha512_init($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _sha3_Init512($2);
 STACKTOP = sp;return 1;
}
function _sha512_update($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $4 = $0;
 $5 = $1;
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = $2;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 _sha3_Update($11,$12,$15);
 STACKTOP = sp;return 1;
}
function _sha512_final($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _sha3_Finalize($4,$5);
 STACKTOP = sp;return 1;
}
function _sha512($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $4 = $0;
 $5 = $1;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $3;
 $12 = HEAP32[8000]|0;
 $13 = (_llvm_stacksave()|0);
 $7 = $13;
 $$alloca_mul = $12;
 $14 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 (_sha512_init($14)|0);
 $15 = $5;
 $16 = $6;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 (_sha512_update($14,$15,$18,$21)|0);
 $22 = $4;
 (_sha512_final($14,$22)|0);
 $23 = $7;
 _llvm_stackrestore(($23|0));
 STACKTOP = sp;return 1;
}
function _randombytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $7 = (_open(32324,0,$vararg_buffer)|0);
 $5 = $7;
 $8 = $5;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   $2 = 0;
  } else {
   $10 = $5;
   $11 = $3;
   $12 = $4;
   $13 = (_read($10,$11,$12)|0);
   $6 = $13;
   $14 = $6;
   $15 = ($14|0)<(0);
   if ($15) {
    $2 = 0;
    break;
   } else {
    $2 = 1;
    break;
   }
  }
 } while(0);
 $16 = $2;
 STACKTOP = sp;return ($16|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[8086]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (32384 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[8086] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(32352)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (32384 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[8086] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(32364)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (32384 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[8086] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(32352)>>2] = $76;
     HEAP32[(32364)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(32348)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (32648 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (32648 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(32348)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(32364)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (32384 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[8086] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(32352)>>2] = $$0173$lcssa$i;
       HEAP32[(32364)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(32348)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (32648 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (32648 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(32352)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (32648 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(32348)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (32384 + ($383<<2)|0);
          $385 = HEAP32[8086]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[8086] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (32648 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(32348)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(32352)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(32364)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(32364)>>2] = $462;
   HEAP32[(32352)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(32352)>>2] = 0;
   HEAP32[(32364)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(32356)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(32356)>>2] = $477;
  $478 = HEAP32[(32368)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(32368)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[8204]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(32824)>>2] = 4096;
  HEAP32[(32820)>>2] = 4096;
  HEAP32[(32828)>>2] = -1;
  HEAP32[(32832)>>2] = -1;
  HEAP32[(32836)>>2] = 0;
  HEAP32[(32788)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[8204] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(32824)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(32784)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(32776)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(32788)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(32368)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (32792);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(32820)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(32776)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(32784)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(32824)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(32788)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(32788)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(32776)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(32776)>>2] = $578;
  $579 = HEAP32[(32780)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(32780)>>2] = $578;
  }
  $581 = HEAP32[(32368)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(32360)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(32360)>>2] = $$748$i;
    }
    HEAP32[(32792)>>2] = $$748$i;
    HEAP32[(32796)>>2] = $$723947$i;
    HEAP32[(32804)>>2] = 0;
    $586 = HEAP32[8204]|0;
    HEAP32[(32380)>>2] = $586;
    HEAP32[(32376)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (32384 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(32368)>>2] = $600;
    HEAP32[(32356)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(32832)>>2]|0;
    HEAP32[(32372)>>2] = $606;
   } else {
    $$024370$i = (32792);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(32356)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(32368)>>2] = $630;
       HEAP32[(32356)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(32832)>>2]|0;
       HEAP32[(32372)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(32360)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(32360)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (32792);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(32356)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(32356)>>2] = $678;
        HEAP32[(32368)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(32364)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(32352)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(32352)>>2] = $684;
         HEAP32[(32364)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[8086]|0;
            $703 = $702 & $701;
            HEAP32[8086] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (32648 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(32348)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(32348)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (32384 + ($762<<2)|0);
         $764 = HEAP32[8086]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[8086] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (32648 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(32348)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(32348)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (32792);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(32368)>>2] = $865;
    HEAP32[(32356)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(32832)>>2]|0;
    HEAP32[(32372)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(32792)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(32792)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(32792)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(32792)+12>>2]|0;
    HEAP32[(32792)>>2] = $$748$i;
    HEAP32[(32796)>>2] = $$723947$i;
    HEAP32[(32804)>>2] = 0;
    HEAP32[(32800)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (32384 + ($887<<2)|0);
      $889 = HEAP32[8086]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[8086] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (32648 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(32348)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(32348)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(32356)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(32356)>>2] = $962;
   $963 = HEAP32[(32368)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(32368)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(32360)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(32364)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(32352)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[8086]|0;
     $29 = $28 & $27;
     HEAP32[8086] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (32648 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(32348)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(32348)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(32368)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(32364)>>2]|0;
  if ($95) {
   $97 = HEAP32[(32356)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(32356)>>2] = $98;
   HEAP32[(32368)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(32364)>>2] = 0;
   HEAP32[(32352)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(32352)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(32352)>>2] = $104;
   HEAP32[(32364)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[8086]|0;
     $120 = $119 & $118;
     HEAP32[8086] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (32648 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(32348)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(32348)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(32364)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(32352)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (32384 + ($180<<2)|0);
  $182 = HEAP32[8086]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[8086] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (32648 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(32348)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(32348)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(32376)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(32376)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (32800);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(32376)>>2] = -1;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32840|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((32844|0));
 return (32852|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((32844|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[8080]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[8080]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 7]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,b1,___stdout_write,___stdio_seek,___stdio_write,b1,b1,b1];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _ed25519_create_keypair: _ed25519_create_keypair, _ed25519_derive_public_key: _ed25519_derive_public_key, _ed25519_sign: _ed25519_sign, _ed25519_verify: _ed25519_verify, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _sbrk: _sbrk, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__ed25519_create_keypair = asm["_ed25519_create_keypair"]; asm["_ed25519_create_keypair"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed25519_create_keypair.apply(null, arguments);
};

var real__ed25519_derive_public_key = asm["_ed25519_derive_public_key"]; asm["_ed25519_derive_public_key"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed25519_derive_public_key.apply(null, arguments);
};

var real__ed25519_sign = asm["_ed25519_sign"]; asm["_ed25519_sign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed25519_sign.apply(null, arguments);
};

var real__ed25519_verify = asm["_ed25519_verify"]; asm["_ed25519_verify"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ed25519_verify.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _ed25519_create_keypair = Module["_ed25519_create_keypair"] = asm["_ed25519_create_keypair"];
var _ed25519_derive_public_key = Module["_ed25519_derive_public_key"] = asm["_ed25519_derive_public_key"];
var _ed25519_sign = Module["_ed25519_sign"] = asm["_ed25519_sign"];
var _ed25519_verify = Module["_ed25519_verify"] = asm["_ed25519_verify"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function exit(status, implicit) {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var flush = FS.quit;
  if (flush) {
    var print = Module['print'];
    var printErr = Module['printErr'];
    var has = false;
    Module['print'] = Module['printErr'] = function(x) {
      has = true;
    }
    try { // it doesn't matter if it fails
      flush(0);
    } catch(e) {}
    Module['print'] = print;
    Module['printErr'] = printErr;
    if (has) {
      warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
    }
  }

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



